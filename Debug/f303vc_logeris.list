
f303vc_logeris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800c760  0800c760  0001c760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a8  0800c9a8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9a8  0800c9a8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9a8  0800c9a8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a8  0800c9a8  0001c9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013bc  2000017c  0800cb2c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001538  0800cb2c  00021538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef10  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ad  00000000  00000000  0003f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00043770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00044c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022da2  00000000  00000000  00045f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f36a  00000000  00000000  00068cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c249d  00000000  00000000  00088054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a4f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0014a544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c744 	.word	0x0800c744

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800c744 	.word	0x0800c744

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b1a:	4b67      	ldr	r3, [pc, #412]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b1c:	4a67      	ldr	r2, [pc, #412]	; (8000cbc <MX_ADC2_Init+0x1b8>)
 8000b1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b20:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b26:	4b64      	ldr	r3, [pc, #400]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b2c:	4b62      	ldr	r3, [pc, #392]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b32:	4b61      	ldr	r3, [pc, #388]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b38:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b40:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b48:	4b5b      	ldr	r3, [pc, #364]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b59      	ldr	r3, [pc, #356]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 10;
 8000b56:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b5c:	4b56      	ldr	r3, [pc, #344]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b64:	4b54      	ldr	r3, [pc, #336]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b6a:	4b53      	ldr	r3, [pc, #332]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b70:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b76:	4850      	ldr	r0, [pc, #320]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000b78:	f001 f8e4 	bl	8001d44 <HAL_ADC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000b82:	f000 fe4b 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b92:	2306      	movs	r3, #6
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4845      	ldr	r0, [pc, #276]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000ba4:	f001 fbca 	bl	800233c <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000bae:	f000 fe35 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000bc0:	f001 fbbc 	bl	800233c <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000bca:	f000 fe27 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4837      	ldr	r0, [pc, #220]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000bdc:	f001 fbae 	bl	800233c <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 8000be6:	f000 fe19 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bea:	2305      	movs	r3, #5
 8000bec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000bf8:	f001 fba0 	bl	800233c <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8000c02:	f000 fe0b 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c06:	2306      	movs	r3, #6
 8000c08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000c14:	f001 fb92 	bl	800233c <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8000c1e:	f000 fdfd 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c26:	2306      	movs	r3, #6
 8000c28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000c30:	f001 fb84 	bl	800233c <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC2_Init+0x13a>
  {
    Error_Handler();
 8000c3a:	f000 fdef 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c42:	2307      	movs	r3, #7
 8000c44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000c4c:	f001 fb76 	bl	800233c <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 8000c56:	f000 fde1 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c5a:	2309      	movs	r3, #9
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000c68:	f001 fb68 	bl	800233c <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC2_Init+0x172>
  {
    Error_Handler();
 8000c72:	f000 fdd3 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c76:	230a      	movs	r3, #10
 8000c78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000c7a:	2309      	movs	r3, #9
 8000c7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000c84:	f001 fb5a 	bl	800233c <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC2_Init+0x18e>
  {
    Error_Handler();
 8000c8e:	f000 fdc5 	bl	800181c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c92:	230b      	movs	r3, #11
 8000c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000c96:	230a      	movs	r3, #10
 8000c98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_ADC2_Init+0x1b4>)
 8000ca0:	f001 fb4c 	bl	800233c <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC2_Init+0x1aa>
  {
    Error_Handler();
 8000caa:	f000 fdb7 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200003c0 	.word	0x200003c0
 8000cbc:	50000100 	.word	0x50000100

08000cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a41      	ldr	r2, [pc, #260]	; (8000de4 <HAL_ADC_MspInit+0x124>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d17c      	bne.n	8000ddc <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a40      	ldr	r2, [pc, #256]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a3a      	ldr	r2, [pc, #232]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a34      	ldr	r2, [pc, #208]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <HAL_ADC_MspInit+0x128>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    PC5     ------> ADC2_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d42:	233f      	movs	r3, #63	; 0x3f
 8000d44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4825      	ldr	r0, [pc, #148]	; (8000dec <HAL_ADC_MspInit+0x12c>)
 8000d56:	f002 fc07 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4820      	ldr	r0, [pc, #128]	; (8000df0 <HAL_ADC_MspInit+0x130>)
 8000d6e:	f002 fbfb 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d72:	23e0      	movs	r3, #224	; 0xe0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f002 fbee 	bl	8003568 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_ADC_MspInit+0x138>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000db6:	2220      	movs	r2, #32
 8000db8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000dc2:	f002 fa1e 	bl	8003202 <HAL_DMA_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8000dcc:	f000 fd26 	bl	800181c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd6:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_ADC_MspInit+0x134>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	50000100 	.word	0x50000100
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48001400 	.word	0x48001400
 8000df4:	20000410 	.word	0x20000410
 8000df8:	40020408 	.word	0x40020408

08000dfc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_DAC_Init+0x4c>)
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <MX_DAC_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_DAC_Init+0x4c>)
 8000e14:	f001 ffb3 	bl	8002d7e <HAL_DAC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000e1e:	f000 fcfd 	bl	800181c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000e22:	2314      	movs	r3, #20
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_DAC_Init+0x4c>)
 8000e32:	f002 f905 	bl	8003040 <HAL_DAC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000e3c:	f000 fcee 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000498 	.word	0x20000498
 8000e4c:	40007400 	.word	0x40007400

08000e50 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <HAL_DAC_MspInit+0xe4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d15b      	bne.n	8000f2a <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_DAC_MspInit+0xe8>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f002 fb56 	bl	8003568 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_DAC_MspInit+0xf0>)
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee2:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000ef4:	f002 f985 	bl	8003202 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8000efe:	f000 fc8d 	bl	800181c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_DAC_MspInit+0xf4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_DAC_MspInit+0xf4>)
 8000f08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f0c:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_DAC_MspInit+0xec>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2036      	movs	r0, #54	; 0x36
 8000f20:	f001 fef7 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f24:	2036      	movs	r0, #54	; 0x36
 8000f26:	f001 ff10 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40007400 	.word	0x40007400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	20000454 	.word	0x20000454
 8000f40:	40020030 	.word	0x40020030
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_DMA_Init+0x60>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200d      	movs	r0, #13
 8000f84:	f001 fec5 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f88:	200d      	movs	r0, #13
 8000f8a:	f001 fede 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2038      	movs	r0, #56	; 0x38
 8000f94:	f001 febd 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f98:	2038      	movs	r0, #56	; 0x38
 8000f9a:	f001 fed6 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a2d      	ldr	r2, [pc, #180]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a27      	ldr	r2, [pc, #156]	; (8001094 <MX_GPIO_Init+0xe8>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_GPIO_Init+0xe8>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0xe8>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_GPIO_Init+0xec>)
 8001040:	f002 fc24 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_Pin|led0_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <MX_GPIO_Init+0xf0>)
 800104c:	f002 fc1e 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = temp_Pin;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_GPIO_Init+0xec>)
 8001068:	f002 fa7e 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = led1_Pin|led0_Pin;
 800106c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_GPIO_Init+0xf0>)
 8001086:	f002 fa6f 	bl	8003568 <HAL_GPIO_Init>

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400
 800109c:	48001000 	.word	0x48001000

080010a0 <HAL_ADC_ConvCpltCallback>:
uint8_t DS18B20_Start(void);
void DS18B20_Write(uint8_t data);
uint8_t DS18B20_Read(void);
void measTemp();

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	mVeliavos.adcDone = 1;
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_ADC_ConvCpltCallback+0x20>)
 80010aa:	7813      	ldrb	r3, [r2, #0]
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	7013      	strb	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200004ac 	.word	0x200004ac

080010c4 <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	mUSB_data.data = buf;
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <CDC_ReceiveCallback+0x2c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
	mUSB_data.len = len;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <CDC_ReceiveCallback+0x2c>)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	6053      	str	r3, [r2, #4]
	mVeliavos.usbDRDY = 1;
 80010da:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <CDC_ReceiveCallback+0x30>)
 80010dc:	7813      	ldrb	r3, [r2, #0]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	7013      	strb	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200004b0 	.word	0x200004b0
 80010f4:	200004ac 	.word	0x200004ac

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b0b4      	sub	sp, #208	; 0xd0
 80010fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t dacSignal[DAC_SIGNAL_STEPS] = { 0 };
 80010fe:	463b      	mov	r3, r7
 8001100:	22c8      	movs	r2, #200	; 0xc8
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00a fadf 	bl	800b6c8 <memset>
	generateSine(dacSignal, DAC_SIGNAL_STEPS, 2000);
 800110a:	463b      	mov	r3, r7
 800110c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001110:	2164      	movs	r1, #100	; 0x64
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f994 	bl	8001440 <generateSine>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fd76 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f930 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f7ff ff44 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 8001124:	f7ff ff10 	bl	8000f48 <MX_DMA_Init>
  MX_ADC2_Init();
 8001128:	f7ff fcec 	bl	8000b04 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 800112c:	f009 fdd8 	bl	800ace0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001130:	f000 fc10 	bl	8001954 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001134:	f000 fc84 	bl	8001a40 <MX_TIM6_Init>
  MX_DAC_Init();
 8001138:	f7ff fe60 	bl	8000dfc <MX_DAC_Init>
  MX_TIM7_Init();
 800113c:	f000 fcb6 	bl	8001aac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8001140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001144:	4880      	ldr	r0, [pc, #512]	; (8001348 <main+0x250>)
 8001146:	f002 fbb9 	bl	80038bc <HAL_GPIO_TogglePin>

	CHANGE_SINE_F(50);
 800114a:	f004 ffb9 	bl	80060c0 <HAL_RCC_GetHCLKFreq>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f97b 	bl	800044c <__aeabi_ui2d>
 8001156:	a37a      	add	r3, pc, #488	; (adr r3, 8001340 <main+0x248>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff f9f0 	bl	8000540 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <main+0x254>)
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	3301      	adds	r3, #1
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f96c 	bl	800044c <__aeabi_ui2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fb0a 	bl	8000794 <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <main+0x258>)
 800118e:	f7ff fb01 	bl	8000794 <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <main+0x25c>)
 80011a0:	f7ff f816 	bl	80001d0 <__aeabi_dsub>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4c68      	ldr	r4, [pc, #416]	; (800134c <main+0x254>)
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc89 	bl	8000ac4 <__aeabi_d2uiz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	62e3      	str	r3, [r4, #44]	; 0x2c
	//TODO sugeneruot perkelus visas init ir panasiai i atskirus failus del tvarkos cia (kube)

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dacSignal, DAC_SIGNAL_STEPS, DAC_ALIGN_12B_R);
 80011b6:	463a      	mov	r2, r7
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	2100      	movs	r1, #0
 80011c0:	4865      	ldr	r0, [pc, #404]	; (8001358 <main+0x260>)
 80011c2:	f001 fe27 	bl	8002e14 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);
 80011c6:	4865      	ldr	r0, [pc, #404]	; (800135c <main+0x264>)
 80011c8:	f005 f98e 	bl	80064e8 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) mPaketasSiuntimui.adcData, KANALU_SKAICIUS);
 80011cc:	220a      	movs	r2, #10
 80011ce:	4964      	ldr	r1, [pc, #400]	; (8001360 <main+0x268>)
 80011d0:	4864      	ldr	r0, [pc, #400]	; (8001364 <main+0x26c>)
 80011d2:	f000 ff97 	bl	8002104 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 80011d6:	4864      	ldr	r0, [pc, #400]	; (8001368 <main+0x270>)
 80011d8:	f005 f986 	bl	80064e8 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim6);
 80011dc:	4863      	ldr	r0, [pc, #396]	; (800136c <main+0x274>)
 80011de:	f005 f983 	bl	80064e8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (mVeliavos.usbDRDY) {
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <main+0x278>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8083 	beq.w	80012f8 <main+0x200>
			switch (*mUSB_data.data) {
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <main+0x27c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d02b      	beq.n	8001254 <main+0x15c>
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	dc73      	bgt.n	80012e8 <main+0x1f0>
 8001200:	2b01      	cmp	r3, #1
 8001202:	dc02      	bgt.n	800120a <main+0x112>
 8001204:	2b00      	cmp	r3, #0
 8001206:	da03      	bge.n	8001210 <main+0x118>
			case 3:
				// Change sine wave frequency
				CHANGE_SINE_F(*(uint16_t* ) (mUSB_data.data + 1));
				break;
			default:
				break;
 8001208:	e06e      	b.n	80012e8 <main+0x1f0>
			switch (*mUSB_data.data) {
 800120a:	2b02      	cmp	r3, #2
 800120c:	d00c      	beq.n	8001228 <main+0x130>
				break;
 800120e:	e06b      	b.n	80012e8 <main+0x1f0>
				mVeliavos.start = *mUSB_data.data;
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <main+0x27c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	b2d9      	uxtb	r1, r3
 800121c:	4a54      	ldr	r2, [pc, #336]	; (8001370 <main+0x278>)
 800121e:	7813      	ldrb	r3, [r2, #0]
 8001220:	f361 0382 	bfi	r3, r1, #2, #1
 8001224:	7013      	strb	r3, [r2, #0]
				break;
 8001226:	e062      	b.n	80012ee <main+0x1f6>
				if (mUSB_data.len == 3)
 8001228:	4b52      	ldr	r3, [pc, #328]	; (8001374 <main+0x27c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d15d      	bne.n	80012ec <main+0x1f4>
					TIM3->ARR = *(uint16_t*) (mUSB_data.data + 1) - 1 < 299 ? 299 : *(uint16_t*) (mUSB_data.data + 1) - 1;
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <main+0x27c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800123c:	d305      	bcc.n	800124a <main+0x152>
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <main+0x27c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3b01      	subs	r3, #1
 8001248:	e001      	b.n	800124e <main+0x156>
 800124a:	f240 132b 	movw	r3, #299	; 0x12b
 800124e:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <main+0x280>)
 8001250:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8001252:	e04b      	b.n	80012ec <main+0x1f4>
				CHANGE_SINE_F(*(uint16_t* ) (mUSB_data.data + 1));
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <main+0x27c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f905 	bl	800046c <__aeabi_i2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	f04f 0000 	mov.w	r0, #0
 800126a:	493a      	ldr	r1, [pc, #232]	; (8001354 <main+0x25c>)
 800126c:	f7ff fa92 	bl	8000794 <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4614      	mov	r4, r2
 8001276:	461d      	mov	r5, r3
 8001278:	f004 ff22 	bl	80060c0 <HAL_RCC_GetHCLKFreq>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8e4 	bl	800044c <__aeabi_ui2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f958 	bl	8000540 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <main+0x254>)
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	3301      	adds	r3, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8d4 	bl	800044c <__aeabi_ui2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fa72 	bl	8000794 <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <main+0x258>)
 80012be:	f7ff fa69 	bl	8000794 <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <main+0x25c>)
 80012d0:	f7fe ff7e 	bl	80001d0 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4c1c      	ldr	r4, [pc, #112]	; (800134c <main+0x254>)
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbf1 	bl	8000ac4 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	62e3      	str	r3, [r4, #44]	; 0x2c
				break;
 80012e6:	e002      	b.n	80012ee <main+0x1f6>
				break;
 80012e8:	bf00      	nop
 80012ea:	e000      	b.n	80012ee <main+0x1f6>
				break;
 80012ec:	bf00      	nop
			}
			mVeliavos.usbDRDY = 0;
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <main+0x278>)
 80012f0:	7813      	ldrb	r3, [r2, #0]
 80012f2:	f36f 0341 	bfc	r3, #1, #1
 80012f6:	7013      	strb	r3, [r2, #0]
		}

		if (mVeliavos.adcDone) {
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <main+0x278>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	f43f af6d 	beq.w	80011e2 <main+0xea>
			mVeliavos.adcDone = 0;
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <main+0x278>)
 800130a:	7813      	ldrb	r3, [r2, #0]
 800130c:	f36f 0300 	bfc	r3, #0, #1
 8001310:	7013      	strb	r3, [r2, #0]
			ledsToggle();
 8001312:	f000 f8f9 	bl	8001508 <ledsToggle>
			measTemp();
 8001316:	f000 fa15 	bl	8001744 <measTemp>
			mPaketasSiuntimui.temperatura = TEMP;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <main+0x284>)
 800131c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <main+0x268>)
 8001322:	829a      	strh	r2, [r3, #20]

			if (mVeliavos.start)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <main+0x278>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f43f af57 	beq.w	80011e2 <main+0xea>
				CDC_Transmit_FS((uint8_t*) mPaketasSiuntimui.adcData, KANALU_SKAICIUS * 2 + 2);
 8001334:	2116      	movs	r1, #22
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <main+0x268>)
 8001338:	f009 fd96 	bl	800ae68 <CDC_Transmit_FS>
		if (mVeliavos.usbDRDY) {
 800133c:	e751      	b.n	80011e2 <main+0xea>
 800133e:	bf00      	nop
 8001340:	47ae147b 	.word	0x47ae147b
 8001344:	3f947ae1 	.word	0x3f947ae1
 8001348:	48001000 	.word	0x48001000
 800134c:	40001400 	.word	0x40001400
 8001350:	40590000 	.word	0x40590000
 8001354:	3ff00000 	.word	0x3ff00000
 8001358:	20000498 	.word	0x20000498
 800135c:	20000568 	.word	0x20000568
 8001360:	200004b8 	.word	0x200004b8
 8001364:	200003c0 	.word	0x200003c0
 8001368:	200004d0 	.word	0x200004d0
 800136c:	2000051c 	.word	0x2000051c
 8001370:	200004ac 	.word	0x200004ac
 8001374:	200004b0 	.word	0x200004b0
 8001378:	40000400 	.word	0x40000400
 800137c:	200004ae 	.word	0x200004ae

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09e      	sub	sp, #120	; 0x78
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800138a:	2228      	movs	r2, #40	; 0x28
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f99a 	bl	800b6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	223c      	movs	r2, #60	; 0x3c
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00a f98c 	bl	800b6c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	2301      	movs	r3, #1
 80013c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fd84 	bl	8004ee4 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013e2:	f000 fa1b 	bl	800181c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fc76 	bl	8005cf4 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800140e:	f000 fa05 	bl	800181c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <SystemClock_Config+0xbc>)
 8001414:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800141c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fe57 	bl	80060d8 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001430:	f000 f9f4 	bl	800181c <Error_Handler>
  }
}
 8001434:	bf00      	nop
 8001436:	3778      	adds	r7, #120	; 0x78
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	00020080 	.word	0x00020080

08001440 <generateSine>:

/* USER CODE BEGIN 4 */
void generateSine(uint16_t *array, uint32_t len, uint16_t amplitude) {
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	4613      	mov	r3, r2
 800144e:	80fb      	strh	r3, [r7, #6]
	amplitude /= 2;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	80fb      	strh	r3, [r7, #6]
	//	Generate sine wave for DAC
	for (uint8_t i = 0; i < len; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	e047      	b.n	80014ec <generateSine+0xac>
		*(uint16_t*) (array + i) = amplitude + amplitude * sin(2 * M_PI * i / len);
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f804 	bl	800046c <__aeabi_i2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fffe 	bl	800046c <__aeabi_i2d>
 8001470:	4680      	mov	r8, r0
 8001472:	4689      	mov	r9, r1
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fff8 	bl	800046c <__aeabi_i2d>
 800147c:	a320      	add	r3, pc, #128	; (adr r3, 8001500 <generateSine+0xc0>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f85d 	bl	8000540 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4692      	mov	sl, r2
 800148c:	469b      	mov	fp, r3
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7fe ffdc 	bl	800044c <__aeabi_ui2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4650      	mov	r0, sl
 800149a:	4659      	mov	r1, fp
 800149c:	f7ff f97a 	bl	8000794 <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	ec43 2b17 	vmov	d7, r2, r3
 80014a8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ac:	eef0 0a67 	vmov.f32	s1, s15
 80014b0:	f00a f912 	bl	800b6d8 <sin>
 80014b4:	ec53 2b10 	vmov	r2, r3, d0
 80014b8:	4640      	mov	r0, r8
 80014ba:	4649      	mov	r1, r9
 80014bc:	f7ff f840 	bl	8000540 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fe84 	bl	80001d4 <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	18d4      	adds	r4, r2, r3
 80014dc:	f7ff faf2 	bl	8000ac4 <__aeabi_d2uiz>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	8023      	strh	r3, [r4, #0]
	for (uint8_t i = 0; i < len; i++) {
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	3301      	adds	r3, #1
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8b3      	bhi.n	800145c <generateSine+0x1c>
	}
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001500:	54442d18 	.word	0x54442d18
 8001504:	401921fb 	.word	0x401921fb

08001508 <ledsToggle>:

void ledsToggle() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led0_GPIO_Port, led0_Pin);
 800150c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <ledsToggle+0x1c>)
 8001512:	f002 f9d3 	bl	80038bc <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8001516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <ledsToggle+0x1c>)
 800151c:	f002 f9ce 	bl	80038bc <HAL_GPIO_TogglePin>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	48001000 	.word	0x48001000

08001528 <delay>:

void delay(uint16_t time) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <delay+0x30>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 800153a:	bf00      	nop
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <delay+0x30>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3f9      	bcc.n	800153c <delay+0x14>
		;
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2000051c 	.word	0x2000051c

0800155c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f001 ffec 	bl	8003568 <HAL_GPIO_Init>
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 ffce 	bl	8003568 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <DS18B20_Start>:

uint8_t DS18B20_Start(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set the pin as output
 80015de:	2101      	movs	r1, #1
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <DS18B20_Start+0x5c>)
 80015e2:	f7ff ffbb 	bl	800155c <Set_Pin_Output>
	HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin low
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <DS18B20_Start+0x5c>)
 80015ec:	f002 f94e 	bl	800388c <HAL_GPIO_WritePin>
	delay(480);   // delay according to datasheet
 80015f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80015f4:	f7ff ff98 	bl	8001528 <delay>

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);    // set the pin as input
 80015f8:	2101      	movs	r1, #1
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <DS18B20_Start+0x5c>)
 80015fc:	f7ff ffcc 	bl	8001598 <Set_Pin_Input>
	delay(80);    // delay according to datasheet
 8001600:	2050      	movs	r0, #80	; 0x50
 8001602:	f7ff ff91 	bl	8001528 <delay>

	if (!(HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin)))
 8001606:	2101      	movs	r1, #1
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <DS18B20_Start+0x5c>)
 800160a:	f002 f927 	bl	800385c <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <DS18B20_Start+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001614:	2301      	movs	r3, #1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	e001      	b.n	800161e <DS18B20_Start+0x4a>
	else
		Response = -1;
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	71fb      	strb	r3, [r7, #7]

	delay(400); // 480 us delay totally.
 800161e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001622:	f7ff ff81 	bl	8001528 <delay>

	return Response;
 8001626:	79fb      	ldrb	r3, [r7, #7]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	48000400 	.word	0x48000400

08001634 <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 800163e:	2101      	movs	r1, #1
 8001640:	481e      	ldr	r0, [pc, #120]	; (80016bc <DS18B20_Write+0x88>)
 8001642:	f7ff ff8b 	bl	800155c <Set_Pin_Output>
//	delay(1);

	for (int i = 0; i < 8; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e02e      	b.n	80016aa <DS18B20_Write+0x76>

		if ((data & (1 << i)) != 0)  // if the bit is high
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <DS18B20_Write+0x50>
				{
			// write 1

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 800165c:	2101      	movs	r1, #1
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <DS18B20_Write+0x88>)
 8001660:	f7ff ff7c 	bl	800155c <Set_Pin_Output>
			HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	4814      	ldr	r0, [pc, #80]	; (80016bc <DS18B20_Write+0x88>)
 800166a:	f002 f90f 	bl	800388c <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff ff5a 	bl	8001528 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 8001674:	2101      	movs	r1, #1
 8001676:	4811      	ldr	r0, [pc, #68]	; (80016bc <DS18B20_Write+0x88>)
 8001678:	f7ff ff8e 	bl	8001598 <Set_Pin_Input>
//			HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 1);
			delay(60);  // wait for 60 us
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	f7ff ff53 	bl	8001528 <delay>
 8001682:	e00f      	b.n	80016a4 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);
 8001684:	2101      	movs	r1, #1
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <DS18B20_Write+0x88>)
 8001688:	f7ff ff68 	bl	800155c <Set_Pin_Output>
			HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <DS18B20_Write+0x88>)
 8001692:	f002 f8fb 	bl	800388c <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 8001696:	203c      	movs	r0, #60	; 0x3c
 8001698:	f7ff ff46 	bl	8001528 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 800169c:	2101      	movs	r1, #1
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <DS18B20_Write+0x88>)
 80016a0:	f7ff ff7a 	bl	8001598 <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	ddcd      	ble.n	800164c <DS18B20_Write+0x18>
		}
	}
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	48000400 	.word	0x48000400

080016c0 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
	uint8_t nuskaityta = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 80016ce:	2101      	movs	r1, #1
 80016d0:	481b      	ldr	r0, [pc, #108]	; (8001740 <DS18B20_Read+0x80>)
 80016d2:	f7ff ff61 	bl	8001598 <Set_Pin_Input>

	for (int i = 0; i < 8; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	e028      	b.n	800172e <DS18B20_Read+0x6e>
		Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 80016dc:	2101      	movs	r1, #1
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <DS18B20_Read+0x80>)
 80016e0:	f7ff ff3c 	bl	800155c <Set_Pin_Output>
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 80016e4:	2200      	movs	r2, #0
 80016e6:	2101      	movs	r1, #1
 80016e8:	4815      	ldr	r0, [pc, #84]	; (8001740 <DS18B20_Read+0x80>)
 80016ea:	f002 f8cf 	bl	800388c <HAL_GPIO_WritePin>
		delay(2);  // wait for > 1us
 80016ee:	2002      	movs	r0, #2
 80016f0:	f7ff ff1a 	bl	8001528 <delay>

		Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 80016f4:	2101      	movs	r1, #1
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <DS18B20_Read+0x80>)
 80016f8:	f7ff ff4e 	bl	8001598 <Set_Pin_Input>
		delay(8);
 80016fc:	2008      	movs	r0, #8
 80016fe:	f7ff ff13 	bl	8001528 <delay>

		nuskaityta = HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin);
 8001702:	2101      	movs	r1, #1
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <DS18B20_Read+0x80>)
 8001706:	f002 f8a9 	bl	800385c <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]

		value |= nuskaityta << i;  // read = 1
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	b25a      	sxtb	r2, r3
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
 8001720:	73fb      	strb	r3, [r7, #15]

		delay(60);  // wait for 60 us
 8001722:	203c      	movs	r0, #60	; 0x3c
 8001724:	f7ff ff00 	bl	8001528 <delay>
	for (int i = 0; i < 8; i++) {
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b07      	cmp	r3, #7
 8001732:	ddd3      	ble.n	80016dc <DS18B20_Read+0x1c>
	}
	return value;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	48000400 	.word	0x48000400

08001744 <measTemp>:

void measTemp() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

	uint8_t Temp_byte1, Temp_byte2;

	Presence = DS18B20_Start();
 800174a:	f7ff ff43 	bl	80015d4 <DS18B20_Start>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <measTemp+0xc8>)
 8001754:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f000 fabc 	bl	8001cd4 <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 800175c:	20cc      	movs	r0, #204	; 0xcc
 800175e:	f7ff ff69 	bl	8001634 <DS18B20_Write>
	DS18B20_Write(0x44);  // convert t
 8001762:	2044      	movs	r0, #68	; 0x44
 8001764:	f7ff ff66 	bl	8001634 <DS18B20_Write>

	do {
		HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f000 fab3 	bl	8001cd4 <HAL_Delay>
		Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 800176e:	2101      	movs	r1, #1
 8001770:	4827      	ldr	r0, [pc, #156]	; (8001810 <measTemp+0xcc>)
 8001772:	f7ff fef3 	bl	800155c <Set_Pin_Output>

		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 8001776:	2200      	movs	r2, #0
 8001778:	2101      	movs	r1, #1
 800177a:	4825      	ldr	r0, [pc, #148]	; (8001810 <measTemp+0xcc>)
 800177c:	f002 f886 	bl	800388c <HAL_GPIO_WritePin>
		delay(2);  // wait for > 1us
 8001780:	2002      	movs	r0, #2
 8001782:	f7ff fed1 	bl	8001528 <delay>

		Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 8001786:	2101      	movs	r1, #1
 8001788:	4821      	ldr	r0, [pc, #132]	; (8001810 <measTemp+0xcc>)
 800178a:	f7ff ff05 	bl	8001598 <Set_Pin_Input>
		delay(10);
 800178e:	200a      	movs	r0, #10
 8001790:	f7ff feca 	bl	8001528 <delay>
	} while (!HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin));
 8001794:	2101      	movs	r1, #1
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <measTemp+0xcc>)
 8001798:	f002 f860 	bl	800385c <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0e2      	beq.n	8001768 <measTemp+0x24>

	Presence = DS18B20_Start();
 80017a2:	f7ff ff17 	bl	80015d4 <DS18B20_Start>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <measTemp+0xc8>)
 80017ac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 fa90 	bl	8001cd4 <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 80017b4:	20cc      	movs	r0, #204	; 0xcc
 80017b6:	f7ff ff3d 	bl	8001634 <DS18B20_Write>
	DS18B20_Write(0xBE);  // Read Scratch-pad
 80017ba:	20be      	movs	r0, #190	; 0xbe
 80017bc:	f7ff ff3a 	bl	8001634 <DS18B20_Write>
	HAL_Delay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 fa87 	bl	8001cd4 <HAL_Delay>

	Temp_byte1 = DS18B20_Read();
 80017c6:	f7ff ff7b 	bl	80016c0 <DS18B20_Read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	Temp_byte2 = DS18B20_Read();
 80017ce:	f7ff ff77 	bl	80016c0 <DS18B20_Read>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71bb      	strb	r3, [r7, #6]
	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <measTemp+0xd0>)
 80017e6:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <measTemp+0xd0>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <measTemp+0xd4>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000019c 	.word	0x2000019c
 8001810:	48000400 	.word	0x48000400
 8001814:	200004ae 	.word	0x200004ae
 8001818:	20000198 	.word	0x20000198

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x44>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_MspInit+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x44>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x44>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x44>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x44>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f9e4 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DMA1_Channel3_IRQHandler+0x10>)
 80018d6:	f001 fd3a 	bl	800334e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000454 	.word	0x20000454

080018e4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80018ea:	f002 f905 	bl	8003af8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000124c 	.word	0x2000124c

080018f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <TIM6_DAC_IRQHandler+0x14>)
 80018fe:	f004 feb6 	bl	800666e <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <TIM6_DAC_IRQHandler+0x18>)
 8001904:	f001 fb42 	bl	8002f8c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000051c 	.word	0x2000051c
 8001910:	20000498 	.word	0x20000498

08001914 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA2_Channel1_IRQHandler+0x10>)
 800191a:	f001 fd18 	bl	800334e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000410 	.word	0x20000410

08001928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <SystemInit+0x28>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <SystemInit+0x28>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SystemInit+0x28>)
 800193e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001942:	609a      	str	r2, [r3, #8]
#endif
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08e      	sub	sp, #56	; 0x38
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <MX_TIM3_Init+0xe4>)
 8001988:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <MX_TIM3_Init+0xe8>)
 800198a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_TIM3_Init+0xe4>)
 800198e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <MX_TIM3_Init+0xe4>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_TIM3_Init+0xe4>)
 800199c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ae:	4822      	ldr	r0, [pc, #136]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019b0:	f004 fd42 	bl	8006438 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80019ba:	f7ff ff2f 	bl	800181c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c8:	4619      	mov	r1, r3
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019cc:	f004 ffe4 	bl	8006998 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80019d6:	f7ff ff21 	bl	800181c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019dc:	f004 fde6 	bl	80065ac <HAL_TIM_OC_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80019e6:	f7ff ff19 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ea:	2320      	movs	r3, #32
 80019ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <MX_TIM3_Init+0xe4>)
 80019fa:	f005 fcc5 	bl	8007388 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a04:	f7ff ff0a 	bl	800181c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_TIM3_Init+0xe4>)
 8001a20:	f004 ff44 	bl	80068ac <HAL_TIM_OC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001a2a:	f7ff fef7 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	; 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200004d0 	.word	0x200004d0
 8001a3c:	40000400 	.word	0x40000400

08001a40 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <MX_TIM6_Init+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a58:	222f      	movs	r2, #47	; 0x2f
 8001a5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfff;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a64:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a72:	f004 fce1 	bl	8006438 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a7c:	f7ff fece 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM6_Init+0x64>)
 8001a8e:	f005 fc7b 	bl	8007388 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a98:	f7ff fec0 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000051c 	.word	0x2000051c
 8001aa8:	40001000 	.word	0x40001000

08001aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_TIM7_Init+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ac4:	222f      	movs	r2, #47	; 0x2f
 8001ac6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ad0:	22c7      	movs	r2, #199	; 0xc7
 8001ad2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001adc:	f004 fcac 	bl	8006438 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ae6:	f7ff fe99 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aea:	2320      	movs	r3, #32
 8001aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001af8:	f005 fc46 	bl	8007388 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b02:	f7ff fe8b 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000568 	.word	0x20000568
 8001b14:	40001400 	.word	0x40001400

08001b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10c      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001b42:	e02a      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_TIM_Base_MspInit+0x94>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d114      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2036      	movs	r0, #54	; 0x36
 8001b6c:	f001 f8d1 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b70:	2036      	movs	r0, #54	; 0x36
 8001b72:	f001 f8ea 	bl	8002d4a <HAL_NVIC_EnableIRQ>
}
 8001b76:	e010      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_TIM_Base_MspInit+0x98>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40001000 	.word	0x40001000
 8001bb0:	40001400 	.word	0x40001400

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bba:	e003      	b.n	8001bc4 <LoopCopyDataInit>

08001bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bc2:	3104      	adds	r1, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bcc:	d3f6      	bcc.n	8001bbc <CopyDataInit>
	ldr	r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bd0:	e002      	b.n	8001bd8 <LoopFillZerobss>

08001bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd4:	f842 3b04 	str.w	r3, [r2], #4

08001bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <LoopForever+0x16>)
	cmp	r2, r3
 8001bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bdc:	d3f9      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff fea3 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f009 fd4d 	bl	800b680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7ff fa87 	bl	80010f8 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bec:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001bf0:	0800c9b0 	.word	0x0800c9b0
	ldr	r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf8:	2000017c 	.word	0x2000017c
	ldr	r2, =_sbss
 8001bfc:	2000017c 	.word	0x2000017c
	ldr	r3, = _ebss
 8001c00:	20001538 	.word	0x20001538

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x28>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 f86f 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fe02 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 f887 	bl	8002d66 <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c70:	f001 f84f 	bl	8002d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200005b4 	.word	0x200005b4

08001cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200005b4 	.word	0x200005b4

08001cd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09a      	sub	sp, #104	; 0x68
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e1c9      	b.n	80020f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d176      	bne.n	8001e64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d152      	bne.n	8001e24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe ff91 	bl	8000cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d13b      	bne.n	8001e24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fe75 	bl	8002a9c <ADC_Disable>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12f      	bne.n	8001e24 <HAL_ADC_Init+0xe0>
 8001dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12b      	bne.n	8001e24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd4:	f023 0302 	bic.w	r3, r3, #2
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dfe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e00:	4b86      	ldr	r3, [pc, #536]	; (800201c <HAL_ADC_Init+0x2d8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a86      	ldr	r2, [pc, #536]	; (8002020 <HAL_ADC_Init+0x2dc>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9a      	lsrs	r2, r3, #18
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f9      	bne.n	8001e18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e40:	d110      	bne.n	8001e64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f023 0312 	bic.w	r3, r3, #18
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 8136 	bne.w	80020de <HAL_ADC_Init+0x39a>
 8001e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 8131 	bne.w	80020de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 8129 	bne.w	80020de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_Init+0x16c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <HAL_ADC_Init+0x2e0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_Init+0x170>
 8001eb0:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_ADC_Init+0x2e4>)
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Init+0x172>
 8001eb4:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_ADC_Init+0x2e8>)
 8001eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_ADC_Init+0x184>
 8001ec2:	4b58      	ldr	r3, [pc, #352]	; (8002024 <HAL_ADC_Init+0x2e0>)
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e01a      	b.n	8001efe <HAL_ADC_Init+0x1ba>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_ADC_Init+0x2e0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d103      	bne.n	8001eda <HAL_ADC_Init+0x196>
 8001ed2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e011      	b.n	8001efe <HAL_ADC_Init+0x1ba>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_ADC_Init+0x2ec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d102      	bne.n	8001eea <HAL_ADC_Init+0x1a6>
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_ADC_Init+0x2f0>)
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e009      	b.n	8001efe <HAL_ADC_Init+0x1ba>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_ADC_Init+0x2f0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <HAL_ADC_Init+0x1b6>
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_ADC_Init+0x2ec>)
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e001      	b.n	8001efe <HAL_ADC_Init+0x1ba>
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_ADC_Init+0x1da>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x1da>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_ADC_Init+0x1dc>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11c      	bne.n	8001f5e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_ADC_Init+0x202>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x202>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_ADC_Init+0x204>
 8001f46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7e5b      	ldrb	r3, [r3, #25]
 8001f62:	035b      	lsls	r3, r3, #13
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f68:	2a01      	cmp	r2, #1
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_Init+0x22e>
 8001f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f70:	e000      	b.n	8001f74 <HAL_ADC_Init+0x230>
 8001f72:	2200      	movs	r2, #0
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f84:	4313      	orrs	r3, r2
 8001f86:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d11b      	bne.n	8001fca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e5b      	ldrb	r3, [r3, #25]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	045a      	lsls	r2, r3, #17
 8001fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	663b      	str	r3, [r7, #96]	; 0x60
 8001fac:	e00d      	b.n	8001fca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001fb6:	f043 0220 	orr.w	r2, r3, #32
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d03a      	beq.n	8002048 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a16      	ldr	r2, [pc, #88]	; (8002030 <HAL_ADC_Init+0x2ec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_Init+0x2a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_ADC_Init+0x2f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d128      	bne.n	8002038 <HAL_ADC_Init+0x2f4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001fee:	d012      	beq.n	8002016 <HAL_ADC_Init+0x2d2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff8:	d00a      	beq.n	8002010 <HAL_ADC_Init+0x2cc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002002:	d002      	beq.n	800200a <HAL_ADC_Init+0x2c6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	e018      	b.n	800203c <HAL_ADC_Init+0x2f8>
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	e015      	b.n	800203c <HAL_ADC_Init+0x2f8>
 8002010:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002014:	e012      	b.n	800203c <HAL_ADC_Init+0x2f8>
 8002016:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800201a:	e00f      	b.n	800203c <HAL_ADC_Init+0x2f8>
 800201c:	20000000 	.word	0x20000000
 8002020:	431bde83 	.word	0x431bde83
 8002024:	50000100 	.word	0x50000100
 8002028:	50000300 	.word	0x50000300
 800202c:	50000700 	.word	0x50000700
 8002030:	50000400 	.word	0x50000400
 8002034:	50000500 	.word	0x50000500
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002040:	4313      	orrs	r3, r2
 8002042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002044:	4313      	orrs	r3, r2
 8002046:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b00      	cmp	r3, #0
 8002054:	d114      	bne.n	8002080 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002064:	f023 0302 	bic.w	r3, r3, #2
 8002068:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	039a      	lsls	r2, r3, #14
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4313      	orrs	r3, r2
 800207a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800207c:	4313      	orrs	r3, r2
 800207e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_ADC_Init+0x3bc>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002090:	430b      	orrs	r3, r1
 8002092:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10c      	bne.n	80020b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f023 010f 	bic.w	r1, r3, #15
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 020f 	bic.w	r2, r2, #15
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
 80020dc:	e00a      	b.n	80020f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f023 0312 	bic.w	r3, r3, #18
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3768      	adds	r7, #104	; 0x68
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	fff0c007 	.word	0xfff0c007

08002104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80f7 	bne.w	8002312 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Start_DMA+0x2e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0f2      	b.n	8002318 <HAL_ADC_Start_DMA+0x214>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002142:	d004      	beq.n	800214e <HAL_ADC_Start_DMA+0x4a>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_ADC_Start_DMA+0x21c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d109      	bne.n	8002162 <HAL_ADC_Start_DMA+0x5e>
 800214e:	4b75      	ldr	r3, [pc, #468]	; (8002324 <HAL_ADC_Start_DMA+0x220>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e008      	b.n	8002174 <HAL_ADC_Start_DMA+0x70>
 8002162:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_ADC_Start_DMA+0x224>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80c5 	beq.w	8002304 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fc30 	bl	80029e0 <ADC_Enable>
 8002180:	4603      	mov	r3, r0
 8002182:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 80b7 	bne.w	80022fa <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a8:	d004      	beq.n	80021b4 <HAL_ADC_Start_DMA+0xb0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5c      	ldr	r2, [pc, #368]	; (8002320 <HAL_ADC_Start_DMA+0x21c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_Start_DMA+0xbe>
 80021b4:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <HAL_ADC_Start_DMA+0x220>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_ADC_Start_DMA+0xde>
 80021c0:	e005      	b.n	80021ce <HAL_ADC_Start_DMA+0xca>
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_ADC_Start_DMA+0x224>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_ADC_Start_DMA+0xde>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_Start_DMA+0xde>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_ADC_Start_DMA+0x228>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d115      	bne.n	800220e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d036      	beq.n	800226a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800220c:	e02d      	b.n	800226a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002222:	d004      	beq.n	800222e <HAL_ADC_Start_DMA+0x12a>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_ADC_Start_DMA+0x21c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10a      	bne.n	8002244 <HAL_ADC_Start_DMA+0x140>
 800222e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e008      	b.n	8002256 <HAL_ADC_Start_DMA+0x152>
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_ADC_Start_DMA+0x228>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d106      	bne.n	8002286 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f023 0206 	bic.w	r2, r3, #6
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
 8002284:	e002      	b.n	800228c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <HAL_ADC_Start_DMA+0x22c>)
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_ADC_Start_DMA+0x230>)
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_ADC_Start_DMA+0x234>)
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	221c      	movs	r2, #28
 80022b2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0210 	orr.w	r2, r2, #16
 80022c2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3340      	adds	r3, #64	; 0x40
 80022de:	4619      	mov	r1, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f000 ffd4 	bl	8003290 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0204 	orr.w	r2, r2, #4
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e00d      	b.n	8002316 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002302:	e008      	b.n	8002316 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002310:	e001      	b.n	8002316 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	50000100 	.word	0x50000100
 8002324:	50000300 	.word	0x50000300
 8002328:	50000700 	.word	0x50000700
 800232c:	50000400 	.word	0x50000400
 8002330:	08002915 	.word	0x08002915
 8002334:	0800298f 	.word	0x0800298f
 8002338:	080029ab 	.word	0x080029ab

0800233c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b09b      	sub	sp, #108	; 0x6c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x22>
 800235a:	2302      	movs	r3, #2
 800235c:	e2cb      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x5ba>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 82af 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d81c      	bhi.n	80023b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	461a      	mov	r2, r3
 8002392:	231f      	movs	r3, #31
 8002394:	4093      	lsls	r3, r2
 8002396:	43db      	mvns	r3, r3
 8002398:	4019      	ands	r1, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
 80023b6:	e063      	b.n	8002480 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d81e      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	4019      	ands	r1, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	fa00 f203 	lsl.w	r2, r0, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34
 80023fc:	e040      	b.n	8002480 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b0e      	cmp	r3, #14
 8002404:	d81e      	bhi.n	8002444 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	3b3c      	subs	r3, #60	; 0x3c
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	4019      	ands	r1, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	3b3c      	subs	r3, #60	; 0x3c
 8002436:	fa00 f203 	lsl.w	r2, r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
 8002442:	e01d      	b.n	8002480 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	3b5a      	subs	r3, #90	; 0x5a
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	4019      	ands	r1, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	3b5a      	subs	r3, #90	; 0x5a
 8002474:	fa00 f203 	lsl.w	r2, r0, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80e5 	bne.w	800265a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d91c      	bls.n	80024d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6999      	ldr	r1, [r3, #24]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	3b1e      	subs	r3, #30
 80024aa:	2207      	movs	r2, #7
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4019      	ands	r1, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6898      	ldr	r0, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	fa00 f203 	lsl.w	r2, r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e019      	b.n	8002506 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6959      	ldr	r1, [r3, #20]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	2207      	movs	r2, #7
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4019      	ands	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6898      	ldr	r0, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	fa00 f203 	lsl.w	r2, r0, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	3b01      	subs	r3, #1
 8002524:	2b03      	cmp	r3, #3
 8002526:	d84f      	bhi.n	80025c8 <HAL_ADC_ConfigChannel+0x28c>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <HAL_ADC_ConfigChannel+0x1f4>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002563 	.word	0x08002563
 8002538:	08002585 	.word	0x08002585
 800253c:	080025a7 	.word	0x080025a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002546:	4b9f      	ldr	r3, [pc, #636]	; (80027c4 <HAL_ADC_ConfigChannel+0x488>)
 8002548:	4013      	ands	r3, r2
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	0691      	lsls	r1, r2, #26
 8002550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002552:	430a      	orrs	r2, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800255e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002560:	e07e      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_ADC_ConfigChannel+0x488>)
 800256a:	4013      	ands	r3, r2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	0691      	lsls	r1, r2, #26
 8002572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002574:	430a      	orrs	r2, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002580:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002582:	e06d      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800258a:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_ADC_ConfigChannel+0x488>)
 800258c:	4013      	ands	r3, r2
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	0691      	lsls	r1, r2, #26
 8002594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002596:	430a      	orrs	r2, r1
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025a4:	e05c      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025ac:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <HAL_ADC_ConfigChannel+0x488>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	0691      	lsls	r1, r2, #26
 80025b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b8:	430a      	orrs	r2, r1
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025c6:	e04b      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	429a      	cmp	r2, r3
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800260e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002632:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	429a      	cmp	r2, r3
 8002646:	d10a      	bne.n	800265e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002656:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002658:	e001      	b.n	800265e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800265a:	bf00      	nop
 800265c:	e000      	b.n	8002660 <HAL_ADC_ConfigChannel+0x324>
      break;
 800265e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x344>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x344>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_ADC_ConfigChannel+0x346>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8131 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d00f      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80026ae:	e049      	b.n	8002744 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d91c      	bls.n	800270c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6999      	ldr	r1, [r3, #24]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	3b1b      	subs	r3, #27
 80026e4:	2207      	movs	r2, #7
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4019      	ands	r1, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6898      	ldr	r0, [r3, #8]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	3b1b      	subs	r3, #27
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	e01b      	b.n	8002744 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	2207      	movs	r2, #7
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	4019      	ands	r1, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6898      	ldr	r0, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	fa00 f203 	lsl.w	r2, r0, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d004      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x41c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_ADC_ConfigChannel+0x48c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x420>
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_ADC_ConfigChannel+0x490>)
 800275a:	e000      	b.n	800275e <HAL_ADC_ConfigChannel+0x422>
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_ADC_ConfigChannel+0x494>)
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b10      	cmp	r3, #16
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002778:	2b11      	cmp	r3, #17
 800277a:	d105      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800277c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800278c:	2b12      	cmp	r3, #18
 800278e:	f040 80ac 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80a5 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a8:	d102      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x474>
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_ADC_ConfigChannel+0x48c>)
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e023      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x4bc>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_ADC_ConfigChannel+0x48c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10c      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x498>
 80027ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e01a      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x4bc>
 80027c2:	bf00      	nop
 80027c4:	83fff000 	.word	0x83fff000
 80027c8:	50000100 	.word	0x50000100
 80027cc:	50000300 	.word	0x50000300
 80027d0:	50000700 	.word	0x50000700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_ADC_ConfigChannel+0x5c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d102      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x4a8>
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_ADC_ConfigChannel+0x5cc>)
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e009      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x4bc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_ADC_ConfigChannel+0x5cc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d102      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x4b8>
 80027ee:	4b45      	ldr	r3, [pc, #276]	; (8002904 <HAL_ADC_ConfigChannel+0x5c8>)
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e001      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x4bc>
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x4dc>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x4dc>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_ADC_ConfigChannel+0x4de>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d150      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800281e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x504>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x504>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_ADC_ConfigChannel+0x506>
 8002840:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d13c      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d11d      	bne.n	800288a <HAL_ADC_ConfigChannel+0x54e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d118      	bne.n	800288a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_ADC_ConfigChannel+0x5d0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_ADC_ConfigChannel+0x5d4>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9a      	lsrs	r2, r3, #18
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800287a:	e002      	b.n	8002882 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3b01      	subs	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002888:	e02e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b11      	cmp	r3, #17
 8002890:	d10b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x56e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289a:	d106      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028a8:	e01e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b12      	cmp	r3, #18
 80028b0:	d11a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028be:	e013      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028d2:	e00a      	b.n	80028ea <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028e6:	e000      	b.n	80028ea <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	376c      	adds	r7, #108	; 0x6c
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	50000400 	.word	0x50000400
 8002908:	50000500 	.word	0x50000500
 800290c:	20000000 	.word	0x20000000
 8002910:	431bde83 	.word	0x431bde83

08002914 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d126      	bne.n	800297c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002944:	2b00      	cmp	r3, #0
 8002946:	d115      	bne.n	8002974 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7fe fb93 	bl	80010a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800297a:	e004      	b.n	8002986 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff f9bd 	bl	8001d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff f9ad 	bl	8001d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <ADC_Enable+0x2c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <ADC_Enable+0x2c>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <ADC_Enable+0x2e>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d13c      	bne.n	8002a8c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <ADC_Enable+0xb8>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e028      	b.n	8002a8e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a4c:	f7ff f936 	bl	8001cbc <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a52:	e014      	b.n	8002a7e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a54:	f7ff f932 	bl	8001cbc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d90d      	bls.n	8002a7e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e007      	b.n	8002a8e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d1e3      	bne.n	8002a54 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	8000003f 	.word	0x8000003f

08002a9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <ADC_Disable+0x2c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <ADC_Disable+0x2c>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <ADC_Disable+0x2e>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030d 	and.w	r3, r3, #13
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10f      	bne.n	8002afc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2203      	movs	r2, #3
 8002af2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002af4:	f7ff f8e2 	bl	8001cbc <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002afa:	e022      	b.n	8002b42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e01c      	b.n	8002b52 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b18:	f7ff f8d0 	bl	8001cbc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d90d      	bls.n	8002b42 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e007      	b.n	8002b52 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d0e3      	beq.n	8002b18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff29 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff3e 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff8e 	bl	8002c50 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff31 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ffa2 	bl	8002cb8 <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e014      	b.n	8002dba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	791b      	ldrb	r3, [r3, #4]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe f855 	bl	8000e50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	795b      	ldrb	r3, [r3, #5]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_DAC_Start_DMA+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e09b      	b.n	8002f6a <HAL_DAC_Start_DMA+0x156>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d12f      	bne.n	8002ea4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a4a      	ldr	r2, [pc, #296]	; (8002f74 <HAL_DAC_Start_DMA+0x160>)
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <HAL_DAC_Start_DMA+0x164>)
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_DAC_Start_DMA+0x168>)
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d013      	beq.n	8002e9a <HAL_DAC_Start_DMA+0x86>
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d845      	bhi.n	8002f04 <HAL_DAC_Start_DMA+0xf0>
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_DAC_Start_DMA+0x72>
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d005      	beq.n	8002e90 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e84:	e03e      	b.n	8002f04 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	617b      	str	r3, [r7, #20]
        break;
 8002e8e:	e03c      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	617b      	str	r3, [r7, #20]
        break;
 8002e98:	e037      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	e032      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_DAC_Start_DMA+0x16c>)
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <HAL_DAC_Start_DMA+0x170>)
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <HAL_DAC_Start_DMA+0x174>)
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d013      	beq.n	8002efa <HAL_DAC_Start_DMA+0xe6>
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d817      	bhi.n	8002f08 <HAL_DAC_Start_DMA+0xf4>
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_DAC_Start_DMA+0xd2>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d005      	beq.n	8002ef0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ee4:	e010      	b.n	8002f08 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3314      	adds	r3, #20
 8002eec:	617b      	str	r3, [r7, #20]
        break;
 8002eee:	e00c      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	617b      	str	r3, [r7, #20]
        break;
 8002ef8:	e007      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	331c      	adds	r3, #28
 8002f00:	617b      	str	r3, [r7, #20]
        break;
 8002f02:	e002      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f08:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6898      	ldr	r0, [r3, #8]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	f000 f9b1 	bl	8003290 <HAL_DMA_Start_IT>
 8002f2e:	e00e      	b.n	8002f4e <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68d8      	ldr	r0, [r3, #12]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	f000 f9a1 	bl	8003290 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0800312b 	.word	0x0800312b
 8002f78:	0800314d 	.word	0x0800314d
 8002f7c:	08003169 	.word	0x08003169
 8002f80:	08003197 	.word	0x08003197
 8002f84:	080031b9 	.word	0x080031b9
 8002f88:	080031d5 	.word	0x080031d5

08002f8c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	d120      	bne.n	8002fe6 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d118      	bne.n	8002fe6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fde:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff0c 	bl	8002dfe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff4:	d120      	bne.n	8003038 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003004:	d118      	bne.n	8003038 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f043 0202 	orr.w	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f86f 	bl	8003116 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_DAC_ConfigChannel+0x20>
 800305c:	2302      	movs	r3, #2
 800305e:	e036      	b.n	80030ce <HAL_DAC_ConfigChannel+0x8e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003074:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4013      	ands	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	22c0      	movs	r2, #192	; 0xc0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fe42 	bl	8002dc2 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fe3b 	bl	8002dd6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff fe31 	bl	8002dea <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	711a      	strb	r2, [r3, #4]
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff ff98 	bl	80030da <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	711a      	strb	r2, [r3, #4]
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff ff91 	bl	80030ee <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff87 	bl	8003102 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	711a      	strb	r2, [r3, #4]
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e037      	b.n	8003288 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800322e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f940 	bl	80034f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}  
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Start_IT+0x20>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e04a      	b.n	8003346 <HAL_DMA_Start_IT+0xb6>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d13a      	bne.n	8003338 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8d4 	bl	8003494 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 020e 	orr.w	r2, r2, #14
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 020a 	orr.w	r2, r2, #10
 8003314:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0204 	bic.w	r2, r2, #4
 8003324:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e005      	b.n	8003344 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003344:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d024      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x72>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01f      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2104      	movs	r1, #4
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06a      	beq.n	800348c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80033be:	e065      	b.n	800348c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2202      	movs	r2, #2
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_IRQHandler+0xdc>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d027      	beq.n	800342a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020a 	bic.w	r2, r2, #10
 80033f6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	2102      	movs	r1, #2
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d035      	beq.n	800348c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003428:	e030      	b.n	800348c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2208      	movs	r2, #8
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d028      	beq.n	800348c <HAL_DMA_IRQHandler+0x13e>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d023      	beq.n	800348c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 020e 	bic.w	r2, r2, #14
 8003452:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f202 	lsl.w	r2, r1, r2
 8003462:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
    }
  }
}  
 800348a:	e7ff      	b.n	800348c <HAL_DMA_IRQHandler+0x13e>
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d108      	bne.n	80034d4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d2:	e007      	b.n	80034e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <DMA_CalcBaseAndBitshift+0x60>)
 8003500:	429a      	cmp	r2, r3
 8003502:	d80f      	bhi.n	8003524 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <DMA_CalcBaseAndBitshift+0x64>)
 800350c:	4413      	add	r3, r2
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <DMA_CalcBaseAndBitshift+0x68>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0f      	ldr	r2, [pc, #60]	; (800355c <DMA_CalcBaseAndBitshift+0x6c>)
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003522:	e00e      	b.n	8003542 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <DMA_CalcBaseAndBitshift+0x70>)
 800352c:	4413      	add	r3, r2
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <DMA_CalcBaseAndBitshift+0x68>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	009a      	lsls	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <DMA_CalcBaseAndBitshift+0x74>)
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40020407 	.word	0x40020407
 8003554:	bffdfff8 	.word	0xbffdfff8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020000 	.word	0x40020000
 8003560:	bffdfbf8 	.word	0xbffdfbf8
 8003564:	40020400 	.word	0x40020400

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003576:	e154      	b.n	8003822 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8146 	beq.w	800381c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00b      	beq.n	80035b0 <HAL_GPIO_Init+0x48>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d007      	beq.n	80035b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a4:	2b11      	cmp	r3, #17
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d130      	bne.n	8003612 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e6:	2201      	movs	r2, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0201 	and.w	r2, r3, #1
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0xea>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b12      	cmp	r3, #18
 8003650:	d123      	bne.n	800369a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	08da      	lsrs	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3208      	adds	r2, #8
 8003694:	6939      	ldr	r1, [r7, #16]
 8003696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0203 	and.w	r2, r3, #3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a0 	beq.w	800381c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036dc:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_GPIO_Init+0x2d8>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_GPIO_Init+0x2d8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6193      	str	r3, [r2, #24]
 80036e8:	4b55      	ldr	r3, [pc, #340]	; (8003840 <HAL_GPIO_Init+0x2d8>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036f4:	4a53      	ldr	r2, [pc, #332]	; (8003844 <HAL_GPIO_Init+0x2dc>)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800371e:	d019      	beq.n	8003754 <HAL_GPIO_Init+0x1ec>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a49      	ldr	r2, [pc, #292]	; (8003848 <HAL_GPIO_Init+0x2e0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1e8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a48      	ldr	r2, [pc, #288]	; (800384c <HAL_GPIO_Init+0x2e4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1e4>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a47      	ldr	r2, [pc, #284]	; (8003850 <HAL_GPIO_Init+0x2e8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1e0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a46      	ldr	r2, [pc, #280]	; (8003854 <HAL_GPIO_Init+0x2ec>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1dc>
 8003740:	2304      	movs	r3, #4
 8003742:	e008      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003744:	2305      	movs	r3, #5
 8003746:	e006      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003748:	2303      	movs	r3, #3
 800374a:	e004      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 800374c:	2302      	movs	r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_GPIO_Init+0x1ee>
 8003754:	2300      	movs	r3, #0
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f002 0203 	and.w	r2, r2, #3
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	4093      	lsls	r3, r2
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003766:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_GPIO_Init+0x2dc>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b38      	ldr	r3, [pc, #224]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003798:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800379e:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037ec:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f aea3 	bne.w	8003578 <HAL_GPIO_Init+0x10>
  }
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40021000 	.word	0x40021000
 8003844:	40010000 	.word	0x40010000
 8003848:	48000400 	.word	0x48000400
 800384c:	48000800 	.word	0x48000800
 8003850:	48000c00 	.word	0x48000c00
 8003854:	48001000 	.word	0x48001000
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e001      	b.n	800387e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]
 8003898:	4613      	mov	r3, r2
 800389a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800389c:	787b      	ldrb	r3, [r7, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43d9      	mvns	r1, r3
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	400b      	ands	r3, r1
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	619a      	str	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b08b      	sub	sp, #44	; 0x2c
 80038f4:	af06      	add	r7, sp, #24
 80038f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0d0      	b.n	8003aa4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f007 fbdc 	bl	800b0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f003 fde2 	bl	80074f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e04c      	b.n	80039ce <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3301      	adds	r3, #1
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	b298      	uxth	r0, r3
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	3336      	adds	r3, #54	; 0x36
 8003972:	4602      	mov	r2, r0
 8003974:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3303      	adds	r3, #3
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3338      	adds	r3, #56	; 0x38
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	333c      	adds	r3, #60	; 0x3c
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	3340      	adds	r3, #64	; 0x40
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	3301      	adds	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3ad      	bcc.n	8003934 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e044      	b.n	8003a68 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	3301      	adds	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3b5      	bcc.n	80039de <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	687e      	ldr	r6, [r7, #4]
 8003a7a:	466d      	mov	r5, sp
 8003a7c:	f106 0410 	add.w	r4, r6, #16
 8003a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	1d33      	adds	r3, r6, #4
 8003a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f003 fd4b 	bl	8007528 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_PCD_Start+0x16>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e016      	b.n	8003af0 <HAL_PCD_Start+0x44>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fcf8 	bl	80074c4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f007 fd9a 	bl	800b610 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f005 fcd1 	bl	8009488 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f005 fcca 	bl	800949e <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d102      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 faf6 	bl	8004108 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 fcbc 	bl	800949e <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b30:	d112      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	b292      	uxth	r2, r2
 8003b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f007 fb63 	bl	800b216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8c7 	bl	8003ce6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f005 fc9e 	bl	800949e <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b6c:	d10b      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b80:	b292      	uxth	r2, r2
 8003b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 fc87 	bl	800949e <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f005 fc70 	bl	800949e <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d126      	bne.n	8003c18 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0204 	bic.w	r2, r2, #4
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0208 	bic.w	r2, r2, #8
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f007 fb44 	bl	800b288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c12:	b292      	uxth	r2, r2
 8003c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f005 fc3e 	bl	800949e <USB_ReadInterrupts>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d126      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0208 	orr.w	r2, r2, #8
 8003c40:	b292      	uxth	r2, r2
 8003c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0204 	orr.w	r2, r2, #4
 8003c70:	b292      	uxth	r2, r2
 8003c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f007 faec 	bl	800b254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f005 fc0c 	bl	800949e <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d10e      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f007 faa5 	bl	800b1fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f005 fbf2 	bl	800949e <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d10b      	bne.n	8003cde <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_PCD_SetAddress+0x1a>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e013      	b.n	8003d28 <HAL_PCD_SetAddress+0x42>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 fba1 	bl	8009460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	70fb      	strb	r3, [r7, #3]
 8003d42:	460b      	mov	r3, r1
 8003d44:	803b      	strh	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0e      	bge.n	8003d74 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	705a      	strb	r2, [r3, #1]
 8003d72:	e00e      	b.n	8003d92 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 0207 	and.w	r2, r3, #7
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d9e:	883a      	ldrh	r2, [r7, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	78ba      	ldrb	r2, [r7, #2]
 8003da8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dbc:	78bb      	ldrb	r3, [r7, #2]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d102      	bne.n	8003dc8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_PCD_EP_Open+0xa6>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e00e      	b.n	8003df4 <HAL_PCD_EP_Open+0xc4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fbc1 	bl	800756c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003df2:	7afb      	ldrb	r3, [r7, #11]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da0e      	bge.n	8003e2e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	705a      	strb	r2, [r3, #1]
 8003e2c:	e00e      	b.n	8003e4c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 0207 	and.w	r2, r3, #7
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_PCD_EP_Close+0x6a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e00e      	b.n	8003e84 <HAL_PCD_EP_Close+0x88>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fee7 	bl	8007c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	f003 0207 	and.w	r2, r3, #7
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6979      	ldr	r1, [r7, #20]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 f89a 	bl	8008022 <USB_EPStartXfer>
 8003eee:	e005      	b.n	8003efc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 f893 	bl	8008022 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 0207 	and.w	r2, r3, #7
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f28:	681b      	ldr	r3, [r3, #0]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	460b      	mov	r3, r1
 8003f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f83f 	bl	8008022 <USB_EPStartXfer>
 8003fa4:	e005      	b.n	8003fb2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 f838 	bl	8008022 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	f003 0207 	and.w	r2, r3, #7
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d901      	bls.n	8003fda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03e      	b.n	8004058 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da0e      	bge.n	8004000 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	705a      	strb	r2, [r3, #1]
 8003ffe:	e00c      	b.n	800401a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_PCD_EP_SetStall+0x7e>
 8004036:	2302      	movs	r3, #2
 8004038:	e00e      	b.n	8004058 <HAL_PCD_EP_SetStall+0x9c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	f005 f90a 	bl	8009262 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d901      	bls.n	800407e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e040      	b.n	8004100 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800407e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da0e      	bge.n	80040a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	705a      	strb	r2, [r3, #1]
 80040a2:	e00e      	b.n	80040c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 0207 	and.w	r2, r3, #7
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_PCD_EP_ClrStall+0x82>
 80040de:	2302      	movs	r3, #2
 80040e0:	e00e      	b.n	8004100 <HAL_PCD_EP_ClrStall+0xa0>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 f907 	bl	8009304 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004110:	e2df      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800411a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800411c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 8158 	bne.w	80043e2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d152      	bne.n	80041e2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	81fb      	strh	r3, [r7, #14]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	89fb      	ldrh	r3, [r7, #14]
 8004154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3328      	adds	r3, #40	; 0x28
 8004164:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	3302      	adds	r3, #2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	441a      	add	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041a0:	2100      	movs	r1, #0
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f007 f80f 	bl	800b1c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 828e 	beq.w	80046d2 <PCD_EP_ISR_Handler+0x5ca>
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 8289 	bne.w	80046d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	b292      	uxth	r2, r2
 80041d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041e0:	e277      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d034      	beq.n	8004266 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	3306      	adds	r3, #6
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800423a:	b29b      	uxth	r3, r3
 800423c:	f005 f985 	bl	800954a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29a      	uxth	r2, r3
 8004248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800424c:	4013      	ands	r3, r2
 800424e:	823b      	strh	r3, [r7, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	8a3a      	ldrh	r2, [r7, #16]
 8004256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800425a:	b292      	uxth	r2, r2
 800425c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f006 ff84 	bl	800b16c <HAL_PCD_SetupStageCallback>
 8004264:	e235      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004266:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800426a:	2b00      	cmp	r3, #0
 800426c:	f280 8231 	bge.w	80046d2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29a      	uxth	r2, r3
 8004278:	f640 738f 	movw	r3, #3983	; 0xf8f
 800427c:	4013      	ands	r3, r2
 800427e:	83bb      	strh	r3, [r7, #28]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	8bba      	ldrh	r2, [r7, #28]
 8004286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800428a:	b292      	uxth	r2, r2
 800428c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	3306      	adds	r3, #6
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d019      	beq.n	80042f6 <PCD_EP_ISR_Handler+0x1ee>
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	6959      	ldr	r1, [r3, #20]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f005 f935 	bl	800954a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	441a      	add	r2, r3
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042ee:	2100      	movs	r1, #0
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f006 ff4d 	bl	800b190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d112      	bne.n	8004344 <PCD_EP_ISR_Handler+0x23c>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004328:	b29a      	uxth	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433c:	b29a      	uxth	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	e02f      	b.n	80043a4 <PCD_EP_ISR_Handler+0x29c>
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b3e      	cmp	r3, #62	; 0x3e
 800434a:	d813      	bhi.n	8004374 <PCD_EP_ISR_Handler+0x26c>
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	633b      	str	r3, [r7, #48]	; 0x30
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <PCD_EP_ISR_Handler+0x25e>
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	3301      	adds	r3, #1
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	b29b      	uxth	r3, r3
 800436a:	029b      	lsls	r3, r3, #10
 800436c:	b29a      	uxth	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	e017      	b.n	80043a4 <PCD_EP_ISR_Handler+0x29c>
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <PCD_EP_ISR_Handler+0x286>
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	3b01      	subs	r3, #1
 800438c:	633b      	str	r3, [r7, #48]	; 0x30
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	b29b      	uxth	r3, r3
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29a      	uxth	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	827b      	strh	r3, [r7, #18]
 80043b6:	8a7b      	ldrh	r3, [r7, #18]
 80043b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043bc:	827b      	strh	r3, [r7, #18]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043c4:	827b      	strh	r3, [r7, #18]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	8a7b      	ldrh	r3, [r7, #18]
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
 80043e0:	e177      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f280 80ea 	bge.w	80045d2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29a      	uxth	r2, r3
 8004410:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004414:	4013      	ands	r3, r2
 8004416:	853b      	strh	r3, [r7, #40]	; 0x28
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442c:	b292      	uxth	r2, r2
 800442e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004430:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	7b1b      	ldrb	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d122      	bne.n	8004494 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	3306      	adds	r3, #6
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004478:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8087 	beq.w	800458e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	6959      	ldr	r1, [r3, #20]
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	88da      	ldrh	r2, [r3, #6]
 800448c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800448e:	f005 f85c 	bl	800954a <USB_ReadPMA>
 8004492:	e07c      	b.n	800458e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d108      	bne.n	80044ae <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800449c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800449e:	461a      	mov	r2, r3
 80044a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f923 	bl	80046ee <HAL_PCD_EP_DB_Receive>
 80044a8:	4603      	mov	r3, r0
 80044aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044ac:	e06f      	b.n	800458e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d021      	beq.n	800454c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	3302      	adds	r3, #2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004530:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004532:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02a      	beq.n	800458e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	6959      	ldr	r1, [r3, #20]
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	891a      	ldrh	r2, [r3, #8]
 8004544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004546:	f005 f800 	bl	800954a <USB_ReadPMA>
 800454a:	e020      	b.n	800458e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	3306      	adds	r3, #6
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004574:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	6959      	ldr	r1, [r3, #20]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	895a      	ldrh	r2, [r3, #10]
 8004588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800458a:	f004 ffde 	bl	800954a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004594:	441a      	add	r2, r3
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045a0:	441a      	add	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <PCD_EP_ISR_Handler+0x4b0>
 80045ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d206      	bcs.n	80045c6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f006 fde6 	bl	800b190 <HAL_PCD_DataOutStageCallback>
 80045c4:	e005      	b.n	80045d2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fd28 	bl	8008022 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80045d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d07a      	beq.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80045dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	843b      	strh	r3, [r7, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	8c3b      	ldrh	r3, [r7, #32]
 800461c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d108      	bne.n	8004642 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004634:	2b02      	cmp	r3, #2
 8004636:	d146      	bne.n	80046c6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004638:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	3302      	adds	r3, #2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	8bfb      	ldrh	r3, [r7, #30]
 8004672:	429a      	cmp	r2, r3
 8004674:	d906      	bls.n	8004684 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	8bfb      	ldrh	r3, [r7, #30]
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	619a      	str	r2, [r3, #24]
 8004682:	e002      	b.n	800468a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	2200      	movs	r2, #0
 8004688:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f006 fd94 	bl	800b1c6 <HAL_PCD_DataInStageCallback>
 800469e:	e018      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	8bfb      	ldrh	r3, [r7, #30]
 80046a6:	441a      	add	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	8bfb      	ldrh	r3, [r7, #30]
 80046b2:	441a      	add	r2, r3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fcaf 	bl	8008022 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80046c4:	e005      	b.n	80046d2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046c8:	461a      	mov	r2, r3
 80046ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f91b 	bl	8004908 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b21b      	sxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f6ff ad17 	blt.w	8004112 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3738      	adds	r7, #56	; 0x38
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b088      	sub	sp, #32
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d07e      	beq.n	8004804 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	3302      	adds	r3, #2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	8b7b      	ldrh	r3, [r7, #26]
 8004736:	429a      	cmp	r2, r3
 8004738:	d306      	bcc.n	8004748 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	8b7b      	ldrh	r3, [r7, #26]
 8004740:	1ad2      	subs	r2, r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	619a      	str	r2, [r3, #24]
 8004746:	e002      	b.n	800474e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d123      	bne.n	800479e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	833b      	strh	r3, [r7, #24]
 8004772:	8b3b      	ldrh	r3, [r7, #24]
 8004774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004778:	833b      	strh	r3, [r7, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	8b3b      	ldrh	r3, [r7, #24]
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01f      	beq.n	80047e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	82fb      	strh	r3, [r7, #22]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8afb      	ldrh	r3, [r7, #22]
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6959      	ldr	r1, [r3, #20]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	891a      	ldrh	r2, [r3, #8]
 80047fc:	8b7b      	ldrh	r3, [r7, #26]
 80047fe:	f004 fea4 	bl	800954a <USB_ReadPMA>
 8004802:	e07c      	b.n	80048fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	3306      	adds	r3, #6
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	8b7b      	ldrh	r3, [r7, #26]
 8004834:	429a      	cmp	r2, r3
 8004836:	d306      	bcc.n	8004846 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	8b7b      	ldrh	r3, [r7, #26]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	619a      	str	r2, [r3, #24]
 8004844:	e002      	b.n	800484c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d123      	bne.n	800489c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	83fb      	strh	r3, [r7, #30]
 8004870:	8bfb      	ldrh	r3, [r7, #30]
 8004872:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004876:	83fb      	strh	r3, [r7, #30]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	8bfb      	ldrh	r3, [r7, #30]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11f      	bne.n	80048e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	83bb      	strh	r3, [r7, #28]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8bbb      	ldrh	r3, [r7, #28]
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048e6:	8b7b      	ldrh	r3, [r7, #26]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6959      	ldr	r1, [r3, #20]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	895a      	ldrh	r2, [r3, #10]
 80048f8:	8b7b      	ldrh	r3, [r7, #26]
 80048fa:	f004 fe26 	bl	800954a <USB_ReadPMA>
    }
  }

  return count;
 80048fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b094      	sub	sp, #80	; 0x50
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8138 	beq.w	8004b92 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	3302      	adds	r3, #2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004956:	429a      	cmp	r2, r3
 8004958:	d907      	bls.n	800496a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	619a      	str	r2, [r3, #24]
 8004968:	e002      	b.n	8004970 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d12c      	bne.n	80049d2 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f006 fc21 	bl	800b1c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 823a 	beq.w	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	82fb      	strh	r3, [r7, #22]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	8afb      	ldrh	r3, [r7, #22]
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
 80049d0:	e218      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01f      	beq.n	8004a1c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	f040 81ee 	bne.w	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a30:	441a      	add	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a3e:	441a      	add	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d309      	bcc.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e015      	b.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004a6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a7a:	e009      	b.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d155      	bne.n	8004b44 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d112      	bne.n	8004aec <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	e047      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x274>
 8004aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aee:	2b3e      	cmp	r3, #62	; 0x3e
 8004af0:	d811      	bhi.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x20e>
 8004af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_PCD_EP_DB_Transmit+0x200>
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	3301      	adds	r3, #1
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	e032      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x274>
 8004b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x224>
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e01b      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x274>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d117      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x274>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	4413      	add	r3, r2
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6959      	ldr	r1, [r3, #20]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	891a      	ldrh	r2, [r3, #8]
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f004 fc97 	bl	80094be <USB_WritePMA>
 8004b90:	e138      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3306      	adds	r3, #6
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d307      	bcc.n	8004bda <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	619a      	str	r2, [r3, #24]
 8004bd8:	e002      	b.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d12e      	bne.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	4619      	mov	r1, r3
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f006 fae9 	bl	800b1c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8102 	bne.w	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	8013      	strh	r3, [r2, #0]
 8004c44:	e0de      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11f      	bne.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	f040 80b4 	bne.w	8004e04 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d309      	bcc.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	621a      	str	r2, [r3, #32]
 8004cd6:	e015      	b.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004ce0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cee:	e009      	b.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d155      	bne.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	4413      	add	r3, r2
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	011a      	lsls	r2, r3, #4
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	4413      	add	r3, r2
 8004d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d112      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	e044      	b.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d68:	2b3e      	cmp	r3, #62	; 0x3e
 8004d6a:	d811      	bhi.n	8004d90 <HAL_PCD_EP_DB_Transmit+0x488>
 8004d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7e:	3301      	adds	r3, #1
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	029b      	lsls	r3, r3, #10
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	e02f      	b.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_EP_DB_Transmit+0x49e>
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	3b01      	subs	r3, #1
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e018      	b.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d114      	bne.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd4:	4413      	add	r3, r2
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	4413      	add	r3, r2
 8004de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6959      	ldr	r1, [r3, #20]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	895a      	ldrh	r2, [r3, #10]
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f004 fb5d 	bl	80094be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1e:	82bb      	strh	r3, [r7, #20]
 8004e20:	8abb      	ldrh	r3, [r7, #20]
 8004e22:	f083 0310 	eor.w	r3, r3, #16
 8004e26:	82bb      	strh	r3, [r7, #20]
 8004e28:	8abb      	ldrh	r3, [r7, #20]
 8004e2a:	f083 0320 	eor.w	r3, r3, #32
 8004e2e:	82bb      	strh	r3, [r7, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	8abb      	ldrh	r3, [r7, #20]
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3750      	adds	r7, #80	; 0x50
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b087      	sub	sp, #28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e70:	897b      	ldrh	r3, [r7, #10]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e009      	b.n	8004ea8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e94:	897a      	ldrh	r2, [r7, #10]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ea8:	893b      	ldrh	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d107      	bne.n	8004ebe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	80da      	strh	r2, [r3, #6]
 8004ebc:	e00b      	b.n	8004ed6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef0:	1d3b      	adds	r3, r7, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f000 bef4 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 816a 	beq.w	80051e2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f0e:	4bb3      	ldr	r3, [pc, #716]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d00c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f1a:	4bb0      	ldr	r3, [pc, #704]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d159      	bne.n	8004fda <HAL_RCC_OscConfig+0xf6>
 8004f26:	4bad      	ldr	r3, [pc, #692]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f32:	d152      	bne.n	8004fda <HAL_RCC_OscConfig+0xf6>
 8004f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f40:	fa93 f3a3 	rbit	r3, r3
 8004f44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	fab3 f383 	clz	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_OscConfig+0x82>
 8004f60:	4b9e      	ldr	r3, [pc, #632]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_OscConfig+0xae>
 8004f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004f8e:	4b93      	ldr	r3, [pc, #588]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004f9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004f9e:	fa92 f2a2 	rbit	r2, r2
 8004fa2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fa6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004faa:	fab2 f282 	clz	r2, r2
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	f042 0220 	orr.w	r2, r2, #32
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	f002 021f 	and.w	r2, r2, #31
 8004fba:	2101      	movs	r1, #1
 8004fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 810c 	beq.w	80051e0 <HAL_RCC_OscConfig+0x2fc>
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 8106 	bne.w	80051e0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f000 be86 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x110>
 8004fe6:	4b7d      	ldr	r3, [pc, #500]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7c      	ldr	r2, [pc, #496]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e030      	b.n	8005056 <HAL_RCC_OscConfig+0x172>
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x134>
 8004ffe:	4b77      	ldr	r3, [pc, #476]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a76      	ldr	r2, [pc, #472]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b74      	ldr	r3, [pc, #464]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a73      	ldr	r2, [pc, #460]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01e      	b.n	8005056 <HAL_RCC_OscConfig+0x172>
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005022:	d10c      	bne.n	800503e <HAL_RCC_OscConfig+0x15a>
 8005024:	4b6d      	ldr	r3, [pc, #436]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6c      	ldr	r2, [pc, #432]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 800502a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a69      	ldr	r2, [pc, #420]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e00b      	b.n	8005056 <HAL_RCC_OscConfig+0x172>
 800503e:	4b67      	ldr	r3, [pc, #412]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a66      	ldr	r2, [pc, #408]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b64      	ldr	r3, [pc, #400]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a63      	ldr	r2, [pc, #396]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005054:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005056:	4b61      	ldr	r3, [pc, #388]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	f023 020f 	bic.w	r2, r3, #15
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	495d      	ldr	r1, [pc, #372]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d059      	beq.n	8005128 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc fe22 	bl	8001cbc <HAL_GetTick>
 8005078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507c:	e00a      	b.n	8005094 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507e:	f7fc fe1d 	bl	8001cbc <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d902      	bls.n	8005094 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	f000 be29 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005098:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80050a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_RCC_OscConfig+0x1e2>
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	e015      	b.n	80050f2 <HAL_RCC_OscConfig+0x20e>
 80050c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80050d2:	fa93 f3a3 	rbit	r3, r3
 80050d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050e2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80050fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80050fe:	fa92 f2a2 	rbit	r2, r2
 8005102:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005106:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800510a:	fab2 f282 	clz	r2, r2
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	f042 0220 	orr.w	r2, r2, #32
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	f002 021f 	and.w	r2, r2, #31
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f202 	lsl.w	r2, r1, r2
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ab      	beq.n	800507e <HAL_RCC_OscConfig+0x19a>
 8005126:	e05c      	b.n	80051e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fc fdc8 	bl	8001cbc <HAL_GetTick>
 800512c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005132:	f7fc fdc3 	bl	8001cbc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d902      	bls.n	8005148 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	f000 bdcf 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800514c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800515c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_RCC_OscConfig+0x296>
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x2c2>
 800517a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800517e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800518e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005192:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005196:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_RCC_OscConfig+0x2f8>)
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80051ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051b2:	fa92 f2a2 	rbit	r2, r2
 80051b6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80051ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0220 	orr.w	r2, r2, #32
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ab      	bne.n	8005132 <HAL_RCC_OscConfig+0x24e>
 80051da:	e002      	b.n	80051e2 <HAL_RCC_OscConfig+0x2fe>
 80051dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 816f 	beq.w	80054d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80051f2:	4bd0      	ldr	r3, [pc, #832]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051fe:	4bcd      	ldr	r3, [pc, #820]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b08      	cmp	r3, #8
 8005208:	d16c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x400>
 800520a:	4bca      	ldr	r3, [pc, #808]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d166      	bne.n	80052e4 <HAL_RCC_OscConfig+0x400>
 8005216:	2302      	movs	r3, #2
 8005218:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005228:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522c:	fab3 f383 	clz	r3, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d102      	bne.n	8005246 <HAL_RCC_OscConfig+0x362>
 8005240:	4bbc      	ldr	r3, [pc, #752]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	e013      	b.n	800526e <HAL_RCC_OscConfig+0x38a>
 8005246:	2302      	movs	r3, #2
 8005248:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005258:	2302      	movs	r3, #2
 800525a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800525e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800526a:	4bb2      	ldr	r3, [pc, #712]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2202      	movs	r2, #2
 8005270:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005274:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005278:	fa92 f2a2 	rbit	r2, r2
 800527c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005280:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005284:	fab2 f282 	clz	r2, r2
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	f002 021f 	and.w	r2, r2, #31
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f202 	lsl.w	r2, r1, r2
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d002      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f000 bd1b 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b0:	4ba0      	ldr	r3, [pc, #640]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	21f8      	movs	r1, #248	; 0xf8
 80052c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052c8:	fa91 f1a1 	rbit	r1, r1
 80052cc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80052d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80052d4:	fab1 f181 	clz	r1, r1
 80052d8:	b2c9      	uxtb	r1, r1
 80052da:	408b      	lsls	r3, r1
 80052dc:	4995      	ldr	r1, [pc, #596]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e2:	e0f5      	b.n	80054d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8085 	beq.w	80053fa <HAL_RCC_OscConfig+0x516>
 80052f0:	2301      	movs	r3, #1
 80052f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80052fa:	fa93 f3a3 	rbit	r3, r3
 80052fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005302:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	461a      	mov	r2, r3
 8005318:	2301      	movs	r3, #1
 800531a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fc fcce 	bl	8001cbc <HAL_GetTick>
 8005320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005326:	f7fc fcc9 	bl	8001cbc <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d902      	bls.n	800533c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	f000 bcd5 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
 800533c:	2302      	movs	r3, #2
 800533e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005346:	fa93 f3a3 	rbit	r3, r3
 800534a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800534e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d102      	bne.n	800536c <HAL_RCC_OscConfig+0x488>
 8005366:	4b73      	ldr	r3, [pc, #460]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	e013      	b.n	8005394 <HAL_RCC_OscConfig+0x4b0>
 800536c:	2302      	movs	r3, #2
 800536e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800537e:	2302      	movs	r3, #2
 8005380:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005384:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005388:	fa93 f3a3 	rbit	r3, r3
 800538c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005390:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2202      	movs	r2, #2
 8005396:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800539a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800539e:	fa92 f2a2 	rbit	r2, r2
 80053a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80053a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80053aa:	fab2 f282 	clz	r2, r2
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	f042 0220 	orr.w	r2, r2, #32
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f002 021f 	and.w	r2, r2, #31
 80053ba:	2101      	movs	r1, #1
 80053bc:	fa01 f202 	lsl.w	r2, r1, r2
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0af      	beq.n	8005326 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c6:	4b5b      	ldr	r3, [pc, #364]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	21f8      	movs	r1, #248	; 0xf8
 80053d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80053de:	fa91 f1a1 	rbit	r1, r1
 80053e2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80053e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80053ea:	fab1 f181 	clz	r1, r1
 80053ee:	b2c9      	uxtb	r1, r1
 80053f0:	408b      	lsls	r3, r1
 80053f2:	4950      	ldr	r1, [pc, #320]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	e06a      	b.n	80054d0 <HAL_RCC_OscConfig+0x5ec>
 80053fa:	2301      	movs	r3, #1
 80053fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800540c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800541a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc fc49 	bl	8001cbc <HAL_GetTick>
 800542a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e00a      	b.n	8005446 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005430:	f7fc fc44 	bl	8001cbc <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d902      	bls.n	8005446 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	f000 bc50 	b.w	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005446:	2302      	movs	r3, #2
 8005448:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005450:	fa93 f3a3 	rbit	r3, r3
 8005454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d102      	bne.n	8005476 <HAL_RCC_OscConfig+0x592>
 8005470:	4b30      	ldr	r3, [pc, #192]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	e013      	b.n	800549e <HAL_RCC_OscConfig+0x5ba>
 8005476:	2302      	movs	r3, #2
 8005478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005488:	2302      	movs	r3, #2
 800548a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800548e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x650>)
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2202      	movs	r2, #2
 80054a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80054a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054a8:	fa92 f2a2 	rbit	r2, r2
 80054ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80054b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054b4:	fab2 f282 	clz	r2, r2
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f042 0220 	orr.w	r2, r2, #32
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	f002 021f 	and.w	r2, r2, #31
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1af      	bne.n	8005430 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80da 	beq.w	8005694 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d069      	beq.n	80055be <HAL_RCC_OscConfig+0x6da>
 80054ea:	2301      	movs	r3, #1
 80054ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005500:	fab3 f383 	clz	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_OscConfig+0x654>)
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	461a      	mov	r2, r3
 8005510:	2301      	movs	r3, #1
 8005512:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005514:	f7fc fbd2 	bl	8001cbc <HAL_GetTick>
 8005518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551c:	e00e      	b.n	800553c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fc fbcd 	bl	8001cbc <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d906      	bls.n	800553c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e3d9      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	10908120 	.word	0x10908120
 800553c:	2302      	movs	r3, #2
 800553e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800554e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005552:	2202      	movs	r2, #2
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	fa93 f2a3 	rbit	r2, r3
 8005560:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800556a:	2202      	movs	r2, #2
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	fa93 f2a3 	rbit	r2, r3
 8005578:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800557c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	4ba5      	ldr	r3, [pc, #660]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005582:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005586:	2102      	movs	r1, #2
 8005588:	6019      	str	r1, [r3, #0]
 800558a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fa93 f1a3 	rbit	r1, r3
 8005594:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005598:	6019      	str	r1, [r3, #0]
  return result;
 800559a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2101      	movs	r1, #1
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0b0      	beq.n	800551e <HAL_RCC_OscConfig+0x63a>
 80055bc:	e06a      	b.n	8005694 <HAL_RCC_OscConfig+0x7b0>
 80055be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	fa93 f2a3 	rbit	r2, r3
 80055d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055d4:	601a      	str	r2, [r3, #0]
  return result;
 80055d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	fab3 f383 	clz	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b8c      	ldr	r3, [pc, #560]	; (8005818 <HAL_RCC_OscConfig+0x934>)
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	461a      	mov	r2, r3
 80055ec:	2300      	movs	r3, #0
 80055ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fc fb64 	bl	8001cbc <HAL_GetTick>
 80055f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	e009      	b.n	800560e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fc fb5f 	bl	8001cbc <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e36b      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 800560e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005612:	2202      	movs	r2, #2
 8005614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fa93 f2a3 	rbit	r2, r3
 8005620:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800562a:	2202      	movs	r2, #2
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005642:	2202      	movs	r2, #2
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	fa93 f2a3 	rbit	r2, r3
 8005650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005654:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005656:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800565e:	2102      	movs	r1, #2
 8005660:	6019      	str	r1, [r3, #0]
 8005662:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	fa93 f1a3 	rbit	r1, r3
 800566c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005670:	6019      	str	r1, [r3, #0]
  return result;
 8005672:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	fab3 f383 	clz	r3, r3
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1b2      	bne.n	80055fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8158 	beq.w	8005954 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056aa:	4b5a      	ldr	r3, [pc, #360]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d112      	bne.n	80056dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b6:	4b57      	ldr	r3, [pc, #348]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	4a56      	ldr	r2, [pc, #344]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c0:	61d3      	str	r3, [r2, #28]
 80056c2:	4b54      	ldr	r3, [pc, #336]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f107 0308 	add.w	r3, r7, #8
 80056d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b4f      	ldr	r3, [pc, #316]	; (800581c <HAL_RCC_OscConfig+0x938>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11a      	bne.n	800571e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e8:	4b4c      	ldr	r3, [pc, #304]	; (800581c <HAL_RCC_OscConfig+0x938>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a4b      	ldr	r2, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x938>)
 80056ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f4:	f7fc fae2 	bl	8001cbc <HAL_GetTick>
 80056f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fc:	e009      	b.n	8005712 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fe:	f7fc fadd 	bl	8001cbc <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e2e9      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b42      	ldr	r3, [pc, #264]	; (800581c <HAL_RCC_OscConfig+0x938>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ef      	beq.n	80056fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x852>
 8005728:	4b3a      	ldr	r3, [pc, #232]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4a39      	ldr	r2, [pc, #228]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6213      	str	r3, [r2, #32]
 8005734:	e02f      	b.n	8005796 <HAL_RCC_OscConfig+0x8b2>
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10c      	bne.n	800575a <HAL_RCC_OscConfig+0x876>
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	4a33      	ldr	r2, [pc, #204]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	6213      	str	r3, [r2, #32]
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005752:	f023 0304 	bic.w	r3, r3, #4
 8005756:	6213      	str	r3, [r2, #32]
 8005758:	e01d      	b.n	8005796 <HAL_RCC_OscConfig+0x8b2>
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b05      	cmp	r3, #5
 8005762:	d10c      	bne.n	800577e <HAL_RCC_OscConfig+0x89a>
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800576a:	f043 0304 	orr.w	r3, r3, #4
 800576e:	6213      	str	r3, [r2, #32]
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6213      	str	r3, [r2, #32]
 800577c:	e00b      	b.n	8005796 <HAL_RCC_OscConfig+0x8b2>
 800577e:	4b25      	ldr	r3, [pc, #148]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	6213      	str	r3, [r2, #32]
 800578a:	4b22      	ldr	r3, [pc, #136]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d06b      	beq.n	8005878 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fc fa8c 	bl	8001cbc <HAL_GetTick>
 80057a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	e00b      	b.n	80057c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fc fa87 	bl	8001cbc <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e291      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 80057c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057c6:	2202      	movs	r2, #2
 80057c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	fa93 f2a3 	rbit	r2, r3
 80057d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057de:	2202      	movs	r2, #2
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	fa93 f2a3 	rbit	r2, r3
 80057ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057f0:	601a      	str	r2, [r3, #0]
  return result;
 80057f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f8:	fab3 f383 	clz	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d109      	bne.n	8005820 <HAL_RCC_OscConfig+0x93c>
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <HAL_RCC_OscConfig+0x930>)
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	e014      	b.n	800583c <HAL_RCC_OscConfig+0x958>
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	10908120 	.word	0x10908120
 800581c:	40007000 	.word	0x40007000
 8005820:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005824:	2202      	movs	r2, #2
 8005826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	fa93 f2a3 	rbit	r2, r3
 8005832:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	4bbb      	ldr	r3, [pc, #748]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005840:	2102      	movs	r1, #2
 8005842:	6011      	str	r1, [r2, #0]
 8005844:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	fa92 f1a2 	rbit	r1, r2
 800584e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005852:	6011      	str	r1, [r2, #0]
  return result;
 8005854:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	fab2 f282 	clz	r2, r2
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	f002 021f 	and.w	r2, r2, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f202 	lsl.w	r2, r1, r2
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d099      	beq.n	80057aa <HAL_RCC_OscConfig+0x8c6>
 8005876:	e063      	b.n	8005940 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7fc fa20 	bl	8001cbc <HAL_GetTick>
 800587c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005880:	e00b      	b.n	800589a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fc fa1b 	bl	8001cbc <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e225      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 800589a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800589e:	2202      	movs	r2, #2
 80058a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058b6:	2202      	movs	r2, #2
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	fa93 f2a3 	rbit	r2, r3
 80058c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058c8:	601a      	str	r2, [r3, #0]
  return result;
 80058ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f043 0302 	orr.w	r3, r3, #2
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_OscConfig+0xa06>
 80058e4:	4b90      	ldr	r3, [pc, #576]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	e00d      	b.n	8005906 <HAL_RCC_OscConfig+0xa22>
 80058ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058ee:	2202      	movs	r2, #2
 80058f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	fa93 f2a3 	rbit	r2, r3
 80058fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	4b89      	ldr	r3, [pc, #548]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800590a:	2102      	movs	r1, #2
 800590c:	6011      	str	r1, [r2, #0]
 800590e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	fa92 f1a2 	rbit	r1, r2
 8005918:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800591c:	6011      	str	r1, [r2, #0]
  return result;
 800591e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	fab2 f282 	clz	r2, r2
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	f002 021f 	and.w	r2, r2, #31
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f202 	lsl.w	r2, r1, r2
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1a0      	bne.n	8005882 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005940:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005948:	4b77      	ldr	r3, [pc, #476]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	4a76      	ldr	r2, [pc, #472]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 800594e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005952:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 81c2 	beq.w	8005ce4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005960:	4b71      	ldr	r3, [pc, #452]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b08      	cmp	r3, #8
 800596a:	f000 819c 	beq.w	8005ca6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f040 8114 	bne.w	8005ba2 <HAL_RCC_OscConfig+0xcbe>
 800597a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800597e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005984:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	fa93 f2a3 	rbit	r2, r3
 800598e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005992:	601a      	str	r2, [r3, #0]
  return result;
 8005994:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005998:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	fab3 f383 	clz	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fc f984 	bl	8001cbc <HAL_GetTick>
 80059b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b8:	e009      	b.n	80059ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fc f97f 	bl	8001cbc <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e18b      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 80059ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059e6:	601a      	str	r2, [r3, #0]
  return result;
 80059e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_RCC_OscConfig+0xb24>
 8005a02:	4b49      	ldr	r3, [pc, #292]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	e01b      	b.n	8005a40 <HAL_RCC_OscConfig+0xb5c>
 8005a08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	fa93 f2a3 	rbit	r2, r3
 8005a1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	fa93 f2a3 	rbit	r2, r3
 8005a36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	fa92 f1a2 	rbit	r1, r2
 8005a54:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a58:	6011      	str	r1, [r2, #0]
  return result;
 8005a5a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	fab2 f282 	clz	r2, r2
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	f042 0220 	orr.w	r2, r2, #32
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	f002 021f 	and.w	r2, r2, #31
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f202 	lsl.w	r2, r1, r2
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d19e      	bne.n	80059ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	4925      	ldr	r1, [pc, #148]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	fa93 f2a3 	rbit	r2, r3
 8005aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ab0:	601a      	str	r2, [r3, #0]
  return result;
 8005ab2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ab6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab8:	fab3 f383 	clz	r3, r3
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ac2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2301      	movs	r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ace:	f7fc f8f5 	bl	8001cbc <HAL_GetTick>
 8005ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ad6:	e009      	b.n	8005aec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad8:	f7fc f8f0 	bl	8001cbc <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e0fc      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005aec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	fa93 f2a3 	rbit	r2, r3
 8005b00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b04:	601a      	str	r2, [r3, #0]
  return result;
 8005b06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCC_OscConfig+0xc48>
 8005b20:	4b01      	ldr	r3, [pc, #4]	; (8005b28 <HAL_RCC_OscConfig+0xc44>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	e01e      	b.n	8005b64 <HAL_RCC_OscConfig+0xc80>
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	fa93 f2a3 	rbit	r2, r3
 8005b40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	fa93 f2a3 	rbit	r2, r3
 8005b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	4b63      	ldr	r3, [pc, #396]	; (8005cf0 <HAL_RCC_OscConfig+0xe0c>)
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	fa92 f1a2 	rbit	r1, r2
 8005b78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b7c:	6011      	str	r1, [r2, #0]
  return result;
 8005b7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	fab2 f282 	clz	r2, r2
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	f042 0220 	orr.w	r2, r2, #32
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	f002 021f 	and.w	r2, r2, #31
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d09b      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xbf4>
 8005ba0:	e0a0      	b.n	8005ce4 <HAL_RCC_OscConfig+0xe00>
 8005ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	fa93 f2a3 	rbit	r2, r3
 8005bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bba:	601a      	str	r2, [r3, #0]
  return result;
 8005bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fc f870 	bl	8001cbc <HAL_GetTick>
 8005bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005be0:	e009      	b.n	8005bf6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fc f86b 	bl	8001cbc <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e077      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
 8005bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	fa93 f2a3 	rbit	r2, r3
 8005c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c0e:	601a      	str	r2, [r3, #0]
  return result;
 8005c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c16:	fab3 f383 	clz	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d102      	bne.n	8005c30 <HAL_RCC_OscConfig+0xd4c>
 8005c2a:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <HAL_RCC_OscConfig+0xe0c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	e01b      	b.n	8005c68 <HAL_RCC_OscConfig+0xd84>
 8005c30:	f107 0320 	add.w	r3, r7, #32
 8005c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3a:	f107 0320 	add.w	r3, r7, #32
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	fa93 f2a3 	rbit	r2, r3
 8005c44:	f107 031c 	add.w	r3, r7, #28
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f107 0318 	add.w	r3, r7, #24
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	fa93 f2a3 	rbit	r2, r3
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	4b22      	ldr	r3, [pc, #136]	; (8005cf0 <HAL_RCC_OscConfig+0xe0c>)
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f107 0210 	add.w	r2, r7, #16
 8005c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	f107 0210 	add.w	r2, r7, #16
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	fa92 f1a2 	rbit	r1, r2
 8005c7c:	f107 020c 	add.w	r2, r7, #12
 8005c80:	6011      	str	r1, [r2, #0]
  return result;
 8005c82:	f107 020c 	add.w	r2, r7, #12
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	fab2 f282 	clz	r2, r2
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f042 0220 	orr.w	r2, r2, #32
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	f002 021f 	and.w	r2, r2, #31
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d19e      	bne.n	8005be2 <HAL_RCC_OscConfig+0xcfe>
 8005ca4:	e01e      	b.n	8005ce4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e018      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <HAL_RCC_OscConfig+0xe0c>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d108      	bne.n	8005ce0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005cce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000

08005cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b09e      	sub	sp, #120	; 0x78
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e162      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d910      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b8d      	ldr	r3, [pc, #564]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 0207 	bic.w	r2, r3, #7
 8005d22:	498b      	ldr	r1, [pc, #556]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b89      	ldr	r3, [pc, #548]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e14a      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b82      	ldr	r3, [pc, #520]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	497f      	ldr	r1, [pc, #508]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80dc 	beq.w	8005f20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d13c      	bne.n	8005dea <HAL_RCC_ClockConfig+0xf6>
 8005d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d102      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xa6>
 8005d94:	4b6f      	ldr	r3, [pc, #444]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	e00f      	b.n	8005dba <HAL_RCC_ClockConfig+0xc6>
 8005d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da2:	fa93 f3a3 	rbit	r3, r3
 8005da6:	667b      	str	r3, [r7, #100]	; 0x64
 8005da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dac:	663b      	str	r3, [r7, #96]	; 0x60
 8005dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db6:	4b67      	ldr	r3, [pc, #412]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dc2:	fa92 f2a2 	rbit	r2, r2
 8005dc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dca:	fab2 f282 	clz	r2, r2
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	f042 0220 	orr.w	r2, r2, #32
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	f002 021f 	and.w	r2, r2, #31
 8005dda:	2101      	movs	r1, #1
 8005ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d17b      	bne.n	8005ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0f3      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d13c      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x178>
 8005df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	fa93 f3a3 	rbit	r3, r3
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e02:	fab3 f383 	clz	r3, r3
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x128>
 8005e16:	4b4f      	ldr	r3, [pc, #316]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	e00f      	b.n	8005e3c <HAL_RCC_ClockConfig+0x148>
 8005e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	fa93 f3a3 	rbit	r3, r3
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e38:	4b46      	ldr	r3, [pc, #280]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e40:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e44:	fa92 f2a2 	rbit	r2, r2
 8005e48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4c:	fab2 f282 	clz	r2, r2
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	f042 0220 	orr.w	r2, r2, #32
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	f002 021f 	and.w	r2, r2, #31
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d13a      	bne.n	8005ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0b2      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	fa93 f3a3 	rbit	r3, r3
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7a:	fab3 f383 	clz	r3, r3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <HAL_RCC_ClockConfig+0x1a0>
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	e00d      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x1bc>
 8005e94:	2302      	movs	r3, #2
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	fa93 f3a3 	rbit	r3, r3
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	fa93 f3a3 	rbit	r3, r3
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	61ba      	str	r2, [r7, #24]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	fa92 f2a2 	rbit	r2, r2
 8005eba:	617a      	str	r2, [r7, #20]
  return result;
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	fab2 f282 	clz	r2, r2
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	f042 0220 	orr.w	r2, r2, #32
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	f002 021f 	and.w	r2, r2, #31
 8005ece:	2101      	movs	r1, #1
 8005ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e079      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f023 0203 	bic.w	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	491a      	ldr	r1, [pc, #104]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef0:	f7fb fee4 	bl	8001cbc <HAL_GetTick>
 8005ef4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef8:	f7fb fee0 	bl	8001cbc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e061      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <HAL_RCC_ClockConfig+0x260>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 020c 	and.w	r2, r3, #12
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d1eb      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d214      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 0207 	bic.w	r2, r3, #7
 8005f36:	4906      	ldr	r1, [pc, #24]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <HAL_RCC_ClockConfig+0x25c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e040      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x2de>
 8005f50:	40022000 	.word	0x40022000
 8005f54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCC_ClockConfig+0x2e8>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	491a      	ldr	r1, [pc, #104]	; (8005fdc <HAL_RCC_ClockConfig+0x2e8>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f82:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <HAL_RCC_ClockConfig+0x2e8>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4912      	ldr	r1, [pc, #72]	; (8005fdc <HAL_RCC_ClockConfig+0x2e8>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f96:	f000 f829 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_RCC_ClockConfig+0x2e8>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa4:	22f0      	movs	r2, #240	; 0xf0
 8005fa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	fa92 f2a2 	rbit	r2, r2
 8005fae:	60fa      	str	r2, [r7, #12]
  return result;
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	fab2 f282 	clz	r2, r2
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	40d3      	lsrs	r3, r2
 8005fba:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8005fbc:	5cd3      	ldrb	r3, [r2, r3]
 8005fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <HAL_RCC_ClockConfig+0x2f0>)
 8005fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005fc6:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <HAL_RCC_ClockConfig+0x2f4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fb fe32 	bl	8001c34 <HAL_InitTick>
  
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3778      	adds	r7, #120	; 0x78
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	0800c7a0 	.word	0x0800c7a0
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	20000004 	.word	0x20000004

08005fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08b      	sub	sp, #44	; 0x2c
 8005ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006006:	4b29      	ldr	r3, [pc, #164]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b04      	cmp	r3, #4
 8006014:	d002      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x30>
 8006016:	2b08      	cmp	r3, #8
 8006018:	d003      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x36>
 800601a:	e03c      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800601c:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800601e:	623b      	str	r3, [r7, #32]
      break;
 8006020:	e03c      	b.n	800609c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006028:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800602c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	fa92 f2a2 	rbit	r2, r2
 8006034:	607a      	str	r2, [r7, #4]
  return result;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	fab2 f282 	clz	r2, r2
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	40d3      	lsrs	r3, r2
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006046:	4b19      	ldr	r3, [pc, #100]	; (80060ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	220f      	movs	r2, #15
 8006050:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	fa92 f2a2 	rbit	r2, r2
 8006058:	60fa      	str	r2, [r7, #12]
  return result;
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	fab2 f282 	clz	r2, r2
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	40d3      	lsrs	r3, r2
 8006064:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006066:	5cd3      	ldrb	r3, [r2, r3]
 8006068:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006074:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	fbb2 f2f3 	udiv	r2, r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	e004      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	623b      	str	r3, [r7, #32]
      break;
 8006094:	e002      	b.n	800609c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006098:	623b      	str	r3, [r7, #32]
      break;
 800609a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609c:	6a3b      	ldr	r3, [r7, #32]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	372c      	adds	r7, #44	; 0x2c
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	007a1200 	.word	0x007a1200
 80060b4:	0800c7b0 	.word	0x0800c7b0
 80060b8:	0800c7c0 	.word	0x0800c7c0
 80060bc:	003d0900 	.word	0x003d0900

080060c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060c6:	681b      	ldr	r3, [r3, #0]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000000 	.word	0x20000000

080060d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b092      	sub	sp, #72	; 0x48
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80d4 	beq.w	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fc:	4b4e      	ldr	r3, [pc, #312]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10e      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006108:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	4a4a      	ldr	r2, [pc, #296]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	61d3      	str	r3, [r2, #28]
 8006114:	4b48      	ldr	r3, [pc, #288]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006126:	4b45      	ldr	r3, [pc, #276]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612e:	2b00      	cmp	r3, #0
 8006130:	d118      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006132:	4b42      	ldr	r3, [pc, #264]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a41      	ldr	r2, [pc, #260]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800613e:	f7fb fdbd 	bl	8001cbc <HAL_GetTick>
 8006142:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006146:	f7fb fdb9 	bl	8001cbc <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b64      	cmp	r3, #100	; 0x64
 8006152:	d901      	bls.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e169      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006158:	4b38      	ldr	r3, [pc, #224]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006164:	4b34      	ldr	r3, [pc, #208]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8084 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006180:	429a      	cmp	r2, r3
 8006182:	d07c      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006184:	4b2c      	ldr	r3, [pc, #176]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800618e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	fa93 f3a3 	rbit	r3, r3
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800619e:	fab3 f383 	clz	r3, r3
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b26      	ldr	r3, [pc, #152]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	461a      	mov	r2, r3
 80061ae:	2301      	movs	r3, #1
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	fa93 f3a3 	rbit	r3, r3
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	461a      	mov	r2, r3
 80061d2:	2300      	movs	r3, #0
 80061d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d04b      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fb fd69 	bl	8001cbc <HAL_GetTick>
 80061ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ec:	e00a      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ee:	f7fb fd65 	bl	8001cbc <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d901      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e113      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006204:	2302      	movs	r3, #2
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	fa93 f3a3 	rbit	r3, r3
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
 8006210:	2302      	movs	r3, #2
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	fa93 f3a3 	rbit	r3, r3
 800621a:	61fb      	str	r3, [r7, #28]
  return result;
 800621c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	fab3 f383 	clz	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d108      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006232:	4b01      	ldr	r3, [pc, #4]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	e00d      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006238:	40021000 	.word	0x40021000
 800623c:	40007000 	.word	0x40007000
 8006240:	10908100 	.word	0x10908100
 8006244:	2302      	movs	r3, #2
 8006246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	4b78      	ldr	r3, [pc, #480]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2202      	movs	r2, #2
 8006256:	613a      	str	r2, [r7, #16]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	fa92 f2a2 	rbit	r2, r2
 800625e:	60fa      	str	r2, [r7, #12]
  return result;
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	fab2 f282 	clz	r2, r2
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	f002 021f 	and.w	r2, r2, #31
 8006272:	2101      	movs	r1, #1
 8006274:	fa01 f202 	lsl.w	r2, r1, r2
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0b7      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800627e:	4b6d      	ldr	r3, [pc, #436]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	496a      	ldr	r1, [pc, #424]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628c:	4313      	orrs	r3, r2
 800628e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006290:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006294:	2b01      	cmp	r3, #1
 8006296:	d105      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006298:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	4a65      	ldr	r2, [pc, #404]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b0:	4b60      	ldr	r3, [pc, #384]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f023 0203 	bic.w	r2, r3, #3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	495d      	ldr	r1, [pc, #372]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ce:	4b59      	ldr	r3, [pc, #356]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	4956      	ldr	r1, [pc, #344]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	494e      	ldr	r1, [pc, #312]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f023 0210 	bic.w	r2, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	4947      	ldr	r1, [pc, #284]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006318:	4313      	orrs	r3, r2
 800631a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006328:	4b42      	ldr	r3, [pc, #264]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	493f      	ldr	r1, [pc, #252]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006346:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f023 0220 	bic.w	r2, r3, #32
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	4938      	ldr	r1, [pc, #224]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006354:	4313      	orrs	r3, r2
 8006356:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006364:	4b33      	ldr	r3, [pc, #204]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	4930      	ldr	r1, [pc, #192]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006382:	4b2c      	ldr	r3, [pc, #176]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	4929      	ldr	r1, [pc, #164]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006390:	4313      	orrs	r3, r2
 8006392:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4921      	ldr	r1, [pc, #132]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063be:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	491a      	ldr	r1, [pc, #104]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80063dc:	4b15      	ldr	r3, [pc, #84]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	4912      	ldr	r1, [pc, #72]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	490b      	ldr	r1, [pc, #44]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	4903      	ldr	r1, [pc, #12]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3748      	adds	r7, #72	; 0x48
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40021000 	.word	0x40021000

08006438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e049      	b.n	80064de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb fb5a 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fb86 	bl	8006b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e042      	b.n	8006586 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a21      	ldr	r2, [pc, #132]	; (8006594 <HAL_TIM_Base_Start+0xac>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_TIM_Base_Start+0x5c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d013      	beq.n	8006544 <HAL_TIM_Base_Start+0x5c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <HAL_TIM_Base_Start+0xb0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_TIM_Base_Start+0x5c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1c      	ldr	r2, [pc, #112]	; (800659c <HAL_TIM_Base_Start+0xb4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_TIM_Base_Start+0x5c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1a      	ldr	r2, [pc, #104]	; (80065a0 <HAL_TIM_Base_Start+0xb8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_Base_Start+0x5c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_TIM_Base_Start+0xbc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d115      	bne.n	8006570 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <HAL_TIM_Base_Start+0xc0>)
 800654c:	4013      	ands	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d015      	beq.n	8006582 <HAL_TIM_Base_Start+0x9a>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d011      	beq.n	8006582 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	e008      	b.n	8006582 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e000      	b.n	8006584 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40000400 	.word	0x40000400
 800659c:	40000800 	.word	0x40000800
 80065a0:	40013400 	.word	0x40013400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	00010007 	.word	0x00010007

080065ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e049      	b.n	8006652 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f841 	bl	800665a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f000 facc 	bl	8006b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b02      	cmp	r3, #2
 8006682:	d122      	bne.n	80066ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d11b      	bne.n	80066ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0202 	mvn.w	r2, #2
 800669a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa4b 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 80066b6:	e005      	b.n	80066c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa3d 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa4e 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d122      	bne.n	800671e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d11b      	bne.n	800671e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0204 	mvn.w	r2, #4
 80066ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa21 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 800670a:	e005      	b.n	8006718 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa13 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa24 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b08      	cmp	r3, #8
 800672a:	d122      	bne.n	8006772 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b08      	cmp	r3, #8
 8006738:	d11b      	bne.n	8006772 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f06f 0208 	mvn.w	r2, #8
 8006742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2204      	movs	r2, #4
 8006748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f9f7 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 800675e:	e005      	b.n	800676c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9e9 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9fa 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b10      	cmp	r3, #16
 800677e:	d122      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b10      	cmp	r3, #16
 800678c:	d11b      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0210 	mvn.w	r2, #16
 8006796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2208      	movs	r2, #8
 800679c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9cd 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 80067b2:	e005      	b.n	80067c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f9bf 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9d0 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d10e      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d107      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f06f 0201 	mvn.w	r2, #1
 80067ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f999 	bl	8006b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	d10e      	bne.n	800681e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b80      	cmp	r3, #128	; 0x80
 800680c:	d107      	bne.n	800681e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fe3f 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682c:	d10e      	bne.n	800684c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d107      	bne.n	800684c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fe32 	bl	80074b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d10e      	bne.n	8006878 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d107      	bne.n	8006878 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f97e 	bl	8006b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b20      	cmp	r3, #32
 8006884:	d10e      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b20      	cmp	r3, #32
 8006892:	d107      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0220 	mvn.w	r2, #32
 800689c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fdf2 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e064      	b.n	8006990 <HAL_TIM_OC_ConfigChannel+0xe4>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b14      	cmp	r3, #20
 80068d2:	d857      	bhi.n	8006984 <HAL_TIM_OC_ConfigChannel+0xd8>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <HAL_TIM_OC_ConfigChannel+0x30>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006985 	.word	0x08006985
 80068e4:	08006985 	.word	0x08006985
 80068e8:	08006985 	.word	0x08006985
 80068ec:	0800693f 	.word	0x0800693f
 80068f0:	08006985 	.word	0x08006985
 80068f4:	08006985 	.word	0x08006985
 80068f8:	08006985 	.word	0x08006985
 80068fc:	0800694d 	.word	0x0800694d
 8006900:	08006985 	.word	0x08006985
 8006904:	08006985 	.word	0x08006985
 8006908:	08006985 	.word	0x08006985
 800690c:	0800695b 	.word	0x0800695b
 8006910:	08006985 	.word	0x08006985
 8006914:	08006985 	.word	0x08006985
 8006918:	08006985 	.word	0x08006985
 800691c:	08006969 	.word	0x08006969
 8006920:	08006985 	.word	0x08006985
 8006924:	08006985 	.word	0x08006985
 8006928:	08006985 	.word	0x08006985
 800692c:	08006977 	.word	0x08006977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f9b6 	bl	8006ca8 <TIM_OC1_SetConfig>
      break;
 800693c:	e023      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fa3f 	bl	8006dc8 <TIM_OC2_SetConfig>
      break;
 800694a:	e01c      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fac2 	bl	8006edc <TIM_OC3_SetConfig>
      break;
 8006958:	e015      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb43 	bl	8006fec <TIM_OC4_SetConfig>
      break;
 8006966:	e00e      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fba6 	bl	80070c0 <TIM_OC5_SetConfig>
      break;
 8006974:	e007      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fc03 	bl	8007188 <TIM_OC6_SetConfig>
      break;
 8006982:	e000      	b.n	8006986 <HAL_TIM_OC_ConfigChannel+0xda>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006984:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIM_ConfigClockSource+0x18>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e0b5      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x184>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ec:	d03e      	beq.n	8006a6c <HAL_TIM_ConfigClockSource+0xd4>
 80069ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f2:	f200 8087 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	f000 8085 	beq.w	8006b08 <HAL_TIM_ConfigClockSource+0x170>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d87f      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b70      	cmp	r3, #112	; 0x70
 8006a06:	d01a      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0xa6>
 8006a08:	2b70      	cmp	r3, #112	; 0x70
 8006a0a:	d87b      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b60      	cmp	r3, #96	; 0x60
 8006a0e:	d050      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8006a10:	2b60      	cmp	r3, #96	; 0x60
 8006a12:	d877      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	d03c      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0xfa>
 8006a18:	2b50      	cmp	r3, #80	; 0x50
 8006a1a:	d873      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d058      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d86f      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b30      	cmp	r3, #48	; 0x30
 8006a26:	d064      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d86b      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d060      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d867      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d05c      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x15a>
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d05a      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a3c:	e062      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f000 fc7b 	bl	8007348 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]
      break;
 8006a6a:	e04e      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6899      	ldr	r1, [r3, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f000 fc64 	bl	8007348 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a8e:	609a      	str	r2, [r3, #8]
      break;
 8006a90:	e03b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f000 fbd8 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2150      	movs	r1, #80	; 0x50
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fc31 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006ab0:	e02b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6859      	ldr	r1, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f000 fbf7 	bl	80072b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2160      	movs	r1, #96	; 0x60
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fc21 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006ad0:	e01b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f000 fbb8 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2140      	movs	r1, #64	; 0x40
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fc11 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006af0:	e00b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f000 fc08 	bl	8007312 <TIM_ITRx_SetConfig>
        break;
 8006b02:	e002      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006b08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <TIM_Base_SetConfig+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a39      	ldr	r2, [pc, #228]	; (8006c90 <TIM_Base_SetConfig+0x108>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a38      	ldr	r2, [pc, #224]	; (8006c94 <TIM_Base_SetConfig+0x10c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a37      	ldr	r2, [pc, #220]	; (8006c98 <TIM_Base_SetConfig+0x110>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2d      	ldr	r2, [pc, #180]	; (8006c8c <TIM_Base_SetConfig+0x104>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01b      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d017      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <TIM_Base_SetConfig+0x108>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a29      	ldr	r2, [pc, #164]	; (8006c94 <TIM_Base_SetConfig+0x10c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00f      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <TIM_Base_SetConfig+0x110>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <TIM_Base_SetConfig+0x114>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d007      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <TIM_Base_SetConfig+0x118>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a25      	ldr	r2, [pc, #148]	; (8006ca4 <TIM_Base_SetConfig+0x11c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a10      	ldr	r2, [pc, #64]	; (8006c8c <TIM_Base_SetConfig+0x104>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00f      	beq.n	8006c70 <TIM_Base_SetConfig+0xe8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a11      	ldr	r2, [pc, #68]	; (8006c98 <TIM_Base_SetConfig+0x110>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_Base_SetConfig+0xe8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <TIM_Base_SetConfig+0x114>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_Base_SetConfig+0xe8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <TIM_Base_SetConfig+0x118>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xe8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ca4 <TIM_Base_SetConfig+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40013400 	.word	0x40013400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800

08006ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 0302 	bic.w	r3, r3, #2
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <TIM_OC1_SetConfig+0x10c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00f      	beq.n	8006d28 <TIM_OC1_SetConfig+0x80>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2b      	ldr	r2, [pc, #172]	; (8006db8 <TIM_OC1_SetConfig+0x110>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <TIM_OC1_SetConfig+0x80>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <TIM_OC1_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC1_SetConfig+0x80>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a29      	ldr	r2, [pc, #164]	; (8006dc0 <TIM_OC1_SetConfig+0x118>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC1_SetConfig+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <TIM_OC1_SetConfig+0x11c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d10c      	bne.n	8006d42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0308 	bic.w	r3, r3, #8
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 0304 	bic.w	r3, r3, #4
 8006d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <TIM_OC1_SetConfig+0x10c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_OC1_SetConfig+0xc2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <TIM_OC1_SetConfig+0x110>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_OC1_SetConfig+0xc2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <TIM_OC1_SetConfig+0x114>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_OC1_SetConfig+0xc2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <TIM_OC1_SetConfig+0x118>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_OC1_SetConfig+0xc2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <TIM_OC1_SetConfig+0x11c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d111      	bne.n	8006d8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0210 	bic.w	r2, r3, #16
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <TIM_OC2_SetConfig+0x100>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC2_SetConfig+0x6c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <TIM_OC2_SetConfig+0x104>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d10d      	bne.n	8006e50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <TIM_OC2_SetConfig+0x100>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00f      	beq.n	8006e78 <TIM_OC2_SetConfig+0xb0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <TIM_OC2_SetConfig+0x104>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00b      	beq.n	8006e78 <TIM_OC2_SetConfig+0xb0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <TIM_OC2_SetConfig+0x108>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d007      	beq.n	8006e78 <TIM_OC2_SetConfig+0xb0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ed4 <TIM_OC2_SetConfig+0x10c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_OC2_SetConfig+0xb0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <TIM_OC2_SetConfig+0x110>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d113      	bne.n	8006ea0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e86:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40012c00 	.word	0x40012c00
 8006ecc:	40013400 	.word	0x40013400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40014400 	.word	0x40014400
 8006ed8:	40014800 	.word	0x40014800

08006edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <TIM_OC3_SetConfig+0xfc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC3_SetConfig+0x6a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <TIM_OC3_SetConfig+0x100>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d10d      	bne.n	8006f62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f60:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <TIM_OC3_SetConfig+0xfc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00f      	beq.n	8006f8a <TIM_OC3_SetConfig+0xae>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <TIM_OC3_SetConfig+0x100>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00b      	beq.n	8006f8a <TIM_OC3_SetConfig+0xae>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <TIM_OC3_SetConfig+0x104>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <TIM_OC3_SetConfig+0xae>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <TIM_OC3_SetConfig+0x108>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_OC3_SetConfig+0xae>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <TIM_OC3_SetConfig+0x10c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d113      	bne.n	8006fb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	621a      	str	r2, [r3, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40013400 	.word	0x40013400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800703a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	031b      	lsls	r3, r3, #12
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a18      	ldr	r2, [pc, #96]	; (80070ac <TIM_OC4_SetConfig+0xc0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00f      	beq.n	8007070 <TIM_OC4_SetConfig+0x84>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <TIM_OC4_SetConfig+0xc4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_OC4_SetConfig+0x84>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <TIM_OC4_SetConfig+0xc8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_OC4_SetConfig+0x84>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <TIM_OC4_SetConfig+0xcc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_OC4_SetConfig+0x84>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <TIM_OC4_SetConfig+0xd0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d109      	bne.n	8007084 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	019b      	lsls	r3, r3, #6
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40013400 	.word	0x40013400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800

080070c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007104:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a17      	ldr	r2, [pc, #92]	; (8007174 <TIM_OC5_SetConfig+0xb4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00f      	beq.n	800713a <TIM_OC5_SetConfig+0x7a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <TIM_OC5_SetConfig+0xb8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_OC5_SetConfig+0x7a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <TIM_OC5_SetConfig+0xbc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_OC5_SetConfig+0x7a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a14      	ldr	r2, [pc, #80]	; (8007180 <TIM_OC5_SetConfig+0xc0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC5_SetConfig+0x7a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <TIM_OC5_SetConfig+0xc4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d109      	bne.n	800714e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	051b      	lsls	r3, r3, #20
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a18      	ldr	r2, [pc, #96]	; (8007240 <TIM_OC6_SetConfig+0xb8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00f      	beq.n	8007204 <TIM_OC6_SetConfig+0x7c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a17      	ldr	r2, [pc, #92]	; (8007244 <TIM_OC6_SetConfig+0xbc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00b      	beq.n	8007204 <TIM_OC6_SetConfig+0x7c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a16      	ldr	r2, [pc, #88]	; (8007248 <TIM_OC6_SetConfig+0xc0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <TIM_OC6_SetConfig+0x7c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a15      	ldr	r2, [pc, #84]	; (800724c <TIM_OC6_SetConfig+0xc4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC6_SetConfig+0x7c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a14      	ldr	r2, [pc, #80]	; (8007250 <TIM_OC6_SetConfig+0xc8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d109      	bne.n	8007218 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800720a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	029b      	lsls	r3, r3, #10
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40013400 	.word	0x40013400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800

08007254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 030a 	bic.w	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	031b      	lsls	r3, r3, #12
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	f043 0307 	orr.w	r3, r3, #7
 8007334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	431a      	orrs	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4313      	orrs	r3, r2
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800739c:	2302      	movs	r3, #2
 800739e:	e063      	b.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a2b      	ldr	r2, [pc, #172]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a2a      	ldr	r2, [pc, #168]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007412:	d013      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a17      	ldr	r2, [pc, #92]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a12      	ldr	r2, [pc, #72]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40013400 	.word	0x40013400
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40014000 	.word	0x40014000

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074fa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	b29b      	uxth	r3, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	4013      	ands	r3, r2
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007528:	b084      	sub	sp, #16
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	f107 0014 	add.w	r0, r7, #20
 8007536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	b004      	add	sp, #16
 8007568:	4770      	bx	lr
	...

0800756c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b09b      	sub	sp, #108	; 0x6c
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d81f      	bhi.n	80075de <USB_ActivateEndpoint+0x72>
 800759e:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <USB_ActivateEndpoint+0x38>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075b5 	.word	0x080075b5
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075e7 	.word	0x080075e7
 80075b0:	080075c3 	.word	0x080075c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075c0:	e012      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075ce:	e00b      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075dc:	e004      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075e4:	e000      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>
      break;
 80075e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	441a      	add	r2, r3
 80075f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	b21b      	sxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	b21a      	sxth	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b21b      	sxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b21b      	sxth	r3, r3
 800762e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	441a      	add	r2, r3
 800763c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 8149 	bne.w	80078f0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8084 	beq.w	8007770 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	011a      	lsls	r2, r3, #4
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	b29b      	uxth	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	81fb      	strh	r3, [r7, #14]
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <USB_ActivateEndpoint+0x180>
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	81bb      	strh	r3, [r7, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	89bb      	ldrh	r3, [r7, #12]
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d020      	beq.n	8007736 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770a:	813b      	strh	r3, [r7, #8]
 800770c:	893b      	ldrh	r3, [r7, #8]
 800770e:	f083 0320 	eor.w	r3, r3, #32
 8007712:	813b      	strh	r3, [r7, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	893b      	ldrh	r3, [r7, #8]
 8007720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007730:	b29b      	uxth	r3, r3
 8007732:	8013      	strh	r3, [r2, #0]
 8007734:	e27f      	b.n	8007c36 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	897b      	ldrh	r3, [r7, #10]
 800775a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800775e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776a:	b29b      	uxth	r3, r3
 800776c:	8013      	strh	r3, [r2, #0]
 800776e:	e262      	b.n	8007c36 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	4413      	add	r3, r2
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	011a      	lsls	r2, r3, #4
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	4413      	add	r3, r2
 800778e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88db      	ldrh	r3, [r3, #6]
 8007798:	085b      	lsrs	r3, r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	4413      	add	r3, r2
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	011a      	lsls	r2, r3, #4
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077c6:	623b      	str	r3, [r7, #32]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d112      	bne.n	80077f6 <USB_ActivateEndpoint+0x28a>
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077da:	b29a      	uxth	r2, r3
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e02f      	b.n	8007856 <USB_ActivateEndpoint+0x2ea>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b3e      	cmp	r3, #62	; 0x3e
 80077fc:	d813      	bhi.n	8007826 <USB_ActivateEndpoint+0x2ba>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	663b      	str	r3, [r7, #96]	; 0x60
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <USB_ActivateEndpoint+0x2ac>
 8007812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007814:	3301      	adds	r3, #1
 8007816:	663b      	str	r3, [r7, #96]	; 0x60
 8007818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781a:	b29b      	uxth	r3, r3
 800781c:	029b      	lsls	r3, r3, #10
 800781e:	b29a      	uxth	r2, r3
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e017      	b.n	8007856 <USB_ActivateEndpoint+0x2ea>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	663b      	str	r3, [r7, #96]	; 0x60
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <USB_ActivateEndpoint+0x2d4>
 800783a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800783c:	3b01      	subs	r3, #1
 800783e:	663b      	str	r3, [r7, #96]	; 0x60
 8007840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007842:	b29b      	uxth	r3, r3
 8007844:	029b      	lsls	r3, r3, #10
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007850:	b29a      	uxth	r2, r3
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	83fb      	strh	r3, [r7, #30]
 8007864:	8bfb      	ldrh	r3, [r7, #30]
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01b      	beq.n	80078a6 <USB_ActivateEndpoint+0x33a>
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007884:	83bb      	strh	r3, [r7, #28]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	441a      	add	r2, r3
 8007890:	8bbb      	ldrh	r3, [r7, #28]
 8007892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078bc:	837b      	strh	r3, [r7, #26]
 80078be:	8b7b      	ldrh	r3, [r7, #26]
 80078c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078c4:	837b      	strh	r3, [r7, #26]
 80078c6:	8b7b      	ldrh	r3, [r7, #26]
 80078c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078cc:	837b      	strh	r3, [r7, #26]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	8b7b      	ldrh	r3, [r7, #26]
 80078da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8013      	strh	r3, [r2, #0]
 80078ee:	e1a2      	b.n	8007c36 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007920:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007928:	b29b      	uxth	r3, r3
 800792a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800793c:	4413      	add	r3, r2
 800793e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	011a      	lsls	r2, r3, #4
 8007946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007948:	4413      	add	r3, r2
 800794a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794e:	657b      	str	r3, [r7, #84]	; 0x54
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	b29b      	uxth	r3, r3
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	653b      	str	r3, [r7, #80]	; 0x50
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007970:	4413      	add	r3, r2
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797c:	4413      	add	r3, r2
 800797e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	895b      	ldrh	r3, [r3, #10]
 8007988:	085b      	lsrs	r3, r3, #1
 800798a:	b29b      	uxth	r3, r3
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007992:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 8091 	bne.w	8007ac0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80079ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01b      	beq.n	80079ee <USB_ActivateEndpoint+0x482>
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80079fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01b      	beq.n	8007a3e <USB_ActivateEndpoint+0x4d2>
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	441a      	add	r2, r3
 8007a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	441a      	add	r2, r3
 8007a70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	8013      	strh	r3, [r2, #0]
 8007abe:	e0ba      	b.n	8007c36 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ad0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01d      	beq.n	8007b18 <USB_ActivateEndpoint+0x5ac>
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01d      	beq.n	8007b70 <USB_ActivateEndpoint+0x604>
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d024      	beq.n	8007bc2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b96:	f083 0320 	eor.w	r3, r3, #32
 8007b9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8013      	strh	r3, [r2, #0]
 8007bc0:	e01d      	b.n	8007bfe <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	441a      	add	r2, r3
 8007c20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	376c      	adds	r7, #108	; 0x6c
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b08d      	sub	sp, #52	; 0x34
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	7b1b      	ldrb	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f040 808e 	bne.w	8007d78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d044      	beq.n	8007cee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	81bb      	strh	r3, [r7, #12]
 8007c72:	89bb      	ldrh	r3, [r7, #12]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01b      	beq.n	8007cb4 <USB_DeactivateEndpoint+0x6c>
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c92:	817b      	strh	r3, [r7, #10]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	441a      	add	r2, r3
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cca:	813b      	strh	r3, [r7, #8]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	893b      	ldrh	r3, [r7, #8]
 8007cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	8013      	strh	r3, [r2, #0]
 8007cec:	e192      	b.n	8008014 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	827b      	strh	r3, [r7, #18]
 8007cfc:	8a7b      	ldrh	r3, [r7, #18]
 8007cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01b      	beq.n	8007d3e <USB_DeactivateEndpoint+0xf6>
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1c:	823b      	strh	r3, [r7, #16]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	441a      	add	r2, r3
 8007d28:	8a3b      	ldrh	r3, [r7, #16]
 8007d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d54:	81fb      	strh	r3, [r7, #14]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	89fb      	ldrh	r3, [r7, #14]
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
 8007d76:	e14d      	b.n	8008014 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 80a5 	bne.w	8007ecc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	843b      	strh	r3, [r7, #32]
 8007d90:	8c3b      	ldrh	r3, [r7, #32]
 8007d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01b      	beq.n	8007dd2 <USB_DeactivateEndpoint+0x18a>
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db0:	83fb      	strh	r3, [r7, #30]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	441a      	add	r2, r3
 8007dbc:	8bfb      	ldrh	r3, [r7, #30]
 8007dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	83bb      	strh	r3, [r7, #28]
 8007de0:	8bbb      	ldrh	r3, [r7, #28]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <USB_DeactivateEndpoint+0x1da>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	837b      	strh	r3, [r7, #26]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	8b7b      	ldrh	r3, [r7, #26]
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	833b      	strh	r3, [r7, #24]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	8b3b      	ldrh	r3, [r7, #24]
 8007e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e70:	82fb      	strh	r3, [r7, #22]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	8afb      	ldrh	r3, [r7, #22]
 8007e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea8:	82bb      	strh	r3, [r7, #20]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	441a      	add	r2, r3
 8007eb4:	8abb      	ldrh	r3, [r7, #20]
 8007eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
 8007eca:	e0a3      	b.n	8008014 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01b      	beq.n	8007f1c <USB_DeactivateEndpoint+0x2d4>
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01b      	beq.n	8007f6c <USB_DeactivateEndpoint+0x324>
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	441a      	add	r2, r3
 8007f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	441a      	add	r2, r3
 8007ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008010:	b29b      	uxth	r3, r3
 8008012:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3734      	adds	r7, #52	; 0x34
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b0c4      	sub	sp, #272	; 0x110
 8008026:	af00      	add	r7, sp, #0
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	6018      	str	r0, [r3, #0]
 800802c:	463b      	mov	r3, r7
 800802e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b01      	cmp	r3, #1
 8008038:	f040 8557 	bne.w	8008aea <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800803c:	463b      	mov	r3, r7
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	463b      	mov	r3, r7
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	429a      	cmp	r2, r3
 800804a:	d905      	bls.n	8008058 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008056:	e004      	b.n	8008062 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008058:	463b      	mov	r3, r7
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	7b1b      	ldrb	r3, [r3, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d12c      	bne.n	80080c6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800806c:	463b      	mov	r3, r7
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6959      	ldr	r1, [r3, #20]
 8008072:	463b      	mov	r3, r7
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	88da      	ldrh	r2, [r3, #6]
 8008078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800807c:	b29b      	uxth	r3, r3
 800807e:	1d38      	adds	r0, r7, #4
 8008080:	6800      	ldr	r0, [r0, #0]
 8008082:	f001 fa1c 	bl	80094be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008094:	b29b      	uxth	r3, r3
 8008096:	461a      	mov	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	4413      	add	r3, r2
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	463b      	mov	r3, r7
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	011a      	lsls	r2, r3, #4
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f107 0310 	add.w	r3, r7, #16
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	f000 bcdd 	b.w	8008a80 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080c6:	463b      	mov	r3, r7
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	78db      	ldrb	r3, [r3, #3]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	f040 8347 	bne.w	8008760 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	463b      	mov	r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	429a      	cmp	r2, r3
 80080e0:	f240 82eb 	bls.w	80086ba <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80080e4:	1d3b      	adds	r3, r7, #4
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	463b      	mov	r3, r7
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	441a      	add	r2, r3
 8008110:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008124:	b29b      	uxth	r3, r3
 8008126:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008128:	463b      	mov	r3, r7
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8159 	beq.w	8008408 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008156:	1d3b      	adds	r3, r7, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
 800815c:	463b      	mov	r3, r7
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d164      	bne.n	8008230 <USB_EPStartXfer+0x20e>
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008174:	b29b      	uxth	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	4413      	add	r3, r2
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800817e:	463b      	mov	r3, r7
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	011a      	lsls	r2, r3, #4
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	4413      	add	r3, r2
 800818a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d112      	bne.n	80081be <USB_EPStartXfer+0x19c>
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	801a      	strh	r2, [r3, #0]
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	e054      	b.n	8008268 <USB_EPStartXfer+0x246>
 80081be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c2:	2b3e      	cmp	r3, #62	; 0x3e
 80081c4:	d817      	bhi.n	80081f6 <USB_EPStartXfer+0x1d4>
 80081c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <USB_EPStartXfer+0x1c4>
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e0:	3301      	adds	r3, #1
 80081e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e038      	b.n	8008268 <USB_EPStartXfer+0x246>
 80081f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USB_EPStartXfer+0x1f4>
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008210:	3b01      	subs	r3, #1
 8008212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	b29b      	uxth	r3, r3
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	e01b      	b.n	8008268 <USB_EPStartXfer+0x246>
 8008230:	463b      	mov	r3, r7
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d116      	bne.n	8008268 <USB_EPStartXfer+0x246>
 800823a:	1d3b      	adds	r3, r7, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	4413      	add	r3, r2
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	011a      	lsls	r2, r3, #4
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	4413      	add	r3, r2
 8008258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800825c:	633b      	str	r3, [r7, #48]	; 0x30
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008262:	b29a      	uxth	r2, r3
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008268:	463b      	mov	r3, r7
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008272:	463b      	mov	r3, r7
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6959      	ldr	r1, [r3, #20]
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800827c:	b29b      	uxth	r3, r3
 800827e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008282:	1d38      	adds	r0, r7, #4
 8008284:	6800      	ldr	r0, [r0, #0]
 8008286:	f001 f91a 	bl	80094be <USB_WritePMA>
            ep->xfer_buff += len;
 800828a:	463b      	mov	r3, r7
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008294:	441a      	add	r2, r3
 8008296:	463b      	mov	r3, r7
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a1a      	ldr	r2, [r3, #32]
 80082a2:	463b      	mov	r3, r7
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d909      	bls.n	80082c0 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80082ac:	463b      	mov	r3, r7
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a1a      	ldr	r2, [r3, #32]
 80082b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	463b      	mov	r3, r7
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	621a      	str	r2, [r3, #32]
 80082be:	e008      	b.n	80082d2 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80082c0:	463b      	mov	r3, r7
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80082ca:	463b      	mov	r3, r7
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d164      	bne.n	80083a6 <USB_EPStartXfer+0x384>
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	011a      	lsls	r2, r3, #4
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d112      	bne.n	8008334 <USB_EPStartXfer+0x312>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008318:	b29a      	uxth	r2, r3
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e057      	b.n	80083e4 <USB_EPStartXfer+0x3c2>
 8008334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008338:	2b3e      	cmp	r3, #62	; 0x3e
 800833a:	d817      	bhi.n	800836c <USB_EPStartXfer+0x34a>
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008340:	085b      	lsrs	r3, r3, #1
 8008342:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <USB_EPStartXfer+0x33a>
 8008352:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008356:	3301      	adds	r3, #1
 8008358:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800835c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008360:	b29b      	uxth	r3, r3
 8008362:	029b      	lsls	r3, r3, #10
 8008364:	b29a      	uxth	r2, r3
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	801a      	strh	r2, [r3, #0]
 800836a:	e03b      	b.n	80083e4 <USB_EPStartXfer+0x3c2>
 800836c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <USB_EPStartXfer+0x36a>
 8008382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008386:	3b01      	subs	r3, #1
 8008388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800838c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008390:	b29b      	uxth	r3, r3
 8008392:	029b      	lsls	r3, r3, #10
 8008394:	b29b      	uxth	r3, r3
 8008396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839e:	b29a      	uxth	r2, r3
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	801a      	strh	r2, [r3, #0]
 80083a4:	e01e      	b.n	80083e4 <USB_EPStartXfer+0x3c2>
 80083a6:	463b      	mov	r3, r7
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d119      	bne.n	80083e4 <USB_EPStartXfer+0x3c2>
 80083b0:	1d3b      	adds	r3, r7, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	4413      	add	r3, r2
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	011a      	lsls	r2, r3, #4
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	4413      	add	r3, r2
 80083d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	891b      	ldrh	r3, [r3, #8]
 80083ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ee:	463b      	mov	r3, r7
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6959      	ldr	r1, [r3, #20]
 80083f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80083fe:	1d38      	adds	r0, r7, #4
 8008400:	6800      	ldr	r0, [r0, #0]
 8008402:	f001 f85c 	bl	80094be <USB_WritePMA>
 8008406:	e33b      	b.n	8008a80 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d164      	bne.n	80084dc <USB_EPStartXfer+0x4ba>
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008418:	1d3b      	adds	r3, r7, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008420:	b29b      	uxth	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008426:	4413      	add	r3, r2
 8008428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800842a:	463b      	mov	r3, r7
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	011a      	lsls	r2, r3, #4
 8008432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008434:	4413      	add	r3, r2
 8008436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800843a:	64bb      	str	r3, [r7, #72]	; 0x48
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008440:	2b00      	cmp	r3, #0
 8008442:	d112      	bne.n	800846a <USB_EPStartXfer+0x448>
 8008444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800844e:	b29a      	uxth	r2, r3
 8008450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008462:	b29a      	uxth	r2, r3
 8008464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	e057      	b.n	800851a <USB_EPStartXfer+0x4f8>
 800846a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800846e:	2b3e      	cmp	r3, #62	; 0x3e
 8008470:	d817      	bhi.n	80084a2 <USB_EPStartXfer+0x480>
 8008472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800847c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <USB_EPStartXfer+0x470>
 8008488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800848c:	3301      	adds	r3, #1
 800848e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008496:	b29b      	uxth	r3, r3
 8008498:	029b      	lsls	r3, r3, #10
 800849a:	b29a      	uxth	r2, r3
 800849c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	e03b      	b.n	800851a <USB_EPStartXfer+0x4f8>
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084a6:	095b      	lsrs	r3, r3, #5
 80084a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b0:	f003 031f 	and.w	r3, r3, #31
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <USB_EPStartXfer+0x4a0>
 80084b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084bc:	3b01      	subs	r3, #1
 80084be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e01e      	b.n	800851a <USB_EPStartXfer+0x4f8>
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d119      	bne.n	800851a <USB_EPStartXfer+0x4f8>
 80084e6:	1d3b      	adds	r3, r7, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	657b      	str	r3, [r7, #84]	; 0x54
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084fa:	4413      	add	r3, r2
 80084fc:	657b      	str	r3, [r7, #84]	; 0x54
 80084fe:	463b      	mov	r3, r7
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	011a      	lsls	r2, r3, #4
 8008506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008508:	4413      	add	r3, r2
 800850a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800850e:	653b      	str	r3, [r7, #80]	; 0x50
 8008510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008514:	b29a      	uxth	r2, r3
 8008516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008518:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800851a:	463b      	mov	r3, r7
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	891b      	ldrh	r3, [r3, #8]
 8008520:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008524:	463b      	mov	r3, r7
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6959      	ldr	r1, [r3, #20]
 800852a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800852e:	b29b      	uxth	r3, r3
 8008530:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008534:	1d38      	adds	r0, r7, #4
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	f000 ffc1 	bl	80094be <USB_WritePMA>
            ep->xfer_buff += len;
 800853c:	463b      	mov	r3, r7
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008546:	441a      	add	r2, r3
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800854e:	463b      	mov	r3, r7
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	463b      	mov	r3, r7
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	d909      	bls.n	8008572 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008568:	1ad2      	subs	r2, r2, r3
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	621a      	str	r2, [r3, #32]
 8008570:	e008      	b.n	8008584 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008572:	463b      	mov	r3, r7
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800857c:	463b      	mov	r3, r7
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008584:	1d3b      	adds	r3, r7, #4
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	647b      	str	r3, [r7, #68]	; 0x44
 800858a:	463b      	mov	r3, r7
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d164      	bne.n	800865e <USB_EPStartXfer+0x63c>
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	4413      	add	r3, r2
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	011a      	lsls	r2, r3, #4
 80085b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b6:	4413      	add	r3, r2
 80085b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80085be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d112      	bne.n	80085ec <USB_EPStartXfer+0x5ca>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e054      	b.n	8008696 <USB_EPStartXfer+0x674>
 80085ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f0:	2b3e      	cmp	r3, #62	; 0x3e
 80085f2:	d817      	bhi.n	8008624 <USB_EPStartXfer+0x602>
 80085f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USB_EPStartXfer+0x5f2>
 800860a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800860e:	3301      	adds	r3, #1
 8008610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008618:	b29b      	uxth	r3, r3
 800861a:	029b      	lsls	r3, r3, #10
 800861c:	b29a      	uxth	r2, r3
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	801a      	strh	r2, [r3, #0]
 8008622:	e038      	b.n	8008696 <USB_EPStartXfer+0x674>
 8008624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800862e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <USB_EPStartXfer+0x622>
 800863a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800863e:	3b01      	subs	r3, #1
 8008640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008644:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008648:	b29b      	uxth	r3, r3
 800864a:	029b      	lsls	r3, r3, #10
 800864c:	b29b      	uxth	r3, r3
 800864e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008656:	b29a      	uxth	r2, r3
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	e01b      	b.n	8008696 <USB_EPStartXfer+0x674>
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d116      	bne.n	8008696 <USB_EPStartXfer+0x674>
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008670:	b29b      	uxth	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008676:	4413      	add	r3, r2
 8008678:	647b      	str	r3, [r7, #68]	; 0x44
 800867a:	463b      	mov	r3, r7
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	011a      	lsls	r2, r3, #4
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	4413      	add	r3, r2
 8008686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800868a:	643b      	str	r3, [r7, #64]	; 0x40
 800868c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008690:	b29a      	uxth	r2, r3
 8008692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	895b      	ldrh	r3, [r3, #10]
 800869c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086a0:	463b      	mov	r3, r7
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6959      	ldr	r1, [r3, #20]
 80086a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80086b0:	1d38      	adds	r0, r7, #4
 80086b2:	6800      	ldr	r0, [r0, #0]
 80086b4:	f000 ff03 	bl	80094be <USB_WritePMA>
 80086b8:	e1e2      	b.n	8008a80 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086ba:	463b      	mov	r3, r7
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	463b      	mov	r3, r7
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80086da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80086e2:	1d3b      	adds	r3, r7, #4
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	463b      	mov	r3, r7
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80086f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008704:	b29b      	uxth	r3, r3
 8008706:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008708:	1d3b      	adds	r3, r7, #4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	663b      	str	r3, [r7, #96]	; 0x60
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008716:	b29b      	uxth	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800871c:	4413      	add	r3, r2
 800871e:	663b      	str	r3, [r7, #96]	; 0x60
 8008720:	463b      	mov	r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	011a      	lsls	r2, r3, #4
 8008728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800872a:	4413      	add	r3, r2
 800872c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008736:	b29a      	uxth	r2, r3
 8008738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800873a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800873c:	463b      	mov	r3, r7
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	891b      	ldrh	r3, [r3, #8]
 8008742:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008746:	463b      	mov	r3, r7
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6959      	ldr	r1, [r3, #20]
 800874c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008750:	b29b      	uxth	r3, r3
 8008752:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008756:	1d38      	adds	r0, r7, #4
 8008758:	6800      	ldr	r0, [r0, #0]
 800875a:	f000 feb0 	bl	80094be <USB_WritePMA>
 800875e:	e18f      	b.n	8008a80 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 808f 	beq.w	800889a <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800877c:	1d3b      	adds	r3, r7, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	67bb      	str	r3, [r7, #120]	; 0x78
 8008782:	463b      	mov	r3, r7
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d164      	bne.n	8008856 <USB_EPStartXfer+0x834>
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	673b      	str	r3, [r7, #112]	; 0x70
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879a:	b29b      	uxth	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a0:	4413      	add	r3, r2
 80087a2:	673b      	str	r3, [r7, #112]	; 0x70
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	011a      	lsls	r2, r3, #4
 80087ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ae:	4413      	add	r3, r2
 80087b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d112      	bne.n	80087e4 <USB_EPStartXfer+0x7c2>
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	801a      	strh	r2, [r3, #0]
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087dc:	b29a      	uxth	r2, r3
 80087de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e0:	801a      	strh	r2, [r3, #0]
 80087e2:	e054      	b.n	800888e <USB_EPStartXfer+0x86c>
 80087e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087e8:	2b3e      	cmp	r3, #62	; 0x3e
 80087ea:	d817      	bhi.n	800881c <USB_EPStartXfer+0x7fa>
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d004      	beq.n	800880c <USB_EPStartXfer+0x7ea>
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	3301      	adds	r3, #1
 8008808:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008810:	b29b      	uxth	r3, r3
 8008812:	029b      	lsls	r3, r3, #10
 8008814:	b29a      	uxth	r2, r3
 8008816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	e038      	b.n	800888e <USB_EPStartXfer+0x86c>
 800881c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800882a:	f003 031f 	and.w	r3, r3, #31
 800882e:	2b00      	cmp	r3, #0
 8008830:	d104      	bne.n	800883c <USB_EPStartXfer+0x81a>
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	3b01      	subs	r3, #1
 8008838:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008840:	b29b      	uxth	r3, r3
 8008842:	029b      	lsls	r3, r3, #10
 8008844:	b29b      	uxth	r3, r3
 8008846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800884a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884e:	b29a      	uxth	r2, r3
 8008850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	e01b      	b.n	800888e <USB_EPStartXfer+0x86c>
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d116      	bne.n	800888e <USB_EPStartXfer+0x86c>
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008868:	b29b      	uxth	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800886e:	4413      	add	r3, r2
 8008870:	67bb      	str	r3, [r7, #120]	; 0x78
 8008872:	463b      	mov	r3, r7
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	011a      	lsls	r2, r3, #4
 800887a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800887c:	4413      	add	r3, r2
 800887e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008882:	677b      	str	r3, [r7, #116]	; 0x74
 8008884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008888:	b29a      	uxth	r2, r3
 800888a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800888c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800888e:	463b      	mov	r3, r7
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	895b      	ldrh	r3, [r3, #10]
 8008894:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8008898:	e097      	b.n	80089ca <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d168      	bne.n	8008976 <USB_EPStartXfer+0x954>
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ac:	1d3b      	adds	r3, r7, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088bc:	4413      	add	r3, r2
 80088be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088c2:	463b      	mov	r3, r7
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	011a      	lsls	r2, r3, #4
 80088ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088ce:	4413      	add	r3, r2
 80088d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d112      	bne.n	8008904 <USB_EPStartXfer+0x8e2>
 80088de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ec:	801a      	strh	r2, [r3, #0]
 80088ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	e05d      	b.n	80089c0 <USB_EPStartXfer+0x99e>
 8008904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008908:	2b3e      	cmp	r3, #62	; 0x3e
 800890a:	d817      	bhi.n	800893c <USB_EPStartXfer+0x91a>
 800890c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008910:	085b      	lsrs	r3, r3, #1
 8008912:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d004      	beq.n	800892c <USB_EPStartXfer+0x90a>
 8008922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008926:	3301      	adds	r3, #1
 8008928:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800892c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008930:	b29b      	uxth	r3, r3
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	b29a      	uxth	r2, r3
 8008936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e041      	b.n	80089c0 <USB_EPStartXfer+0x99e>
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <USB_EPStartXfer+0x93a>
 8008952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008956:	3b01      	subs	r3, #1
 8008958:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800895c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008960:	b29b      	uxth	r3, r3
 8008962:	029b      	lsls	r3, r3, #10
 8008964:	b29b      	uxth	r3, r3
 8008966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896e:	b29a      	uxth	r2, r3
 8008970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e024      	b.n	80089c0 <USB_EPStartXfer+0x99e>
 8008976:	463b      	mov	r3, r7
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d11f      	bne.n	80089c0 <USB_EPStartXfer+0x99e>
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008988:	1d3b      	adds	r3, r7, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008990:	b29b      	uxth	r3, r3
 8008992:	461a      	mov	r2, r3
 8008994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008998:	4413      	add	r3, r2
 800899a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800899e:	463b      	mov	r3, r7
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	011a      	lsls	r2, r3, #4
 80089a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089aa:	4413      	add	r3, r2
 80089ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	891b      	ldrh	r3, [r3, #8]
 80089c6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089ca:	463b      	mov	r3, r7
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6959      	ldr	r1, [r3, #20]
 80089d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80089da:	1d38      	adds	r0, r7, #4
 80089dc:	6800      	ldr	r0, [r0, #0]
 80089de:	f000 fd6e 	bl	80094be <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80089e2:	463b      	mov	r3, r7
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d122      	bne.n	8008a32 <USB_EPStartXfer+0xa10>
 80089ec:	1d3b      	adds	r3, r7, #4
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a06:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	463b      	mov	r3, r7
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	441a      	add	r2, r3
 8008a18:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	8013      	strh	r3, [r2, #0]
 8008a30:	e026      	b.n	8008a80 <USB_EPStartXfer+0xa5e>
 8008a32:	463b      	mov	r3, r7
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d121      	bne.n	8008a80 <USB_EPStartXfer+0xa5e>
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	463b      	mov	r3, r7
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	463b      	mov	r3, r7
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f107 020e 	add.w	r2, r7, #14
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9e:	8013      	strh	r3, [r2, #0]
 8008aa0:	f107 030e 	add.w	r3, r7, #14
 8008aa4:	f107 020e 	add.w	r2, r7, #14
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	f082 0210 	eor.w	r2, r2, #16
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	f107 030e 	add.w	r3, r7, #14
 8008ab4:	f107 020e 	add.w	r2, r7, #14
 8008ab8:	8812      	ldrh	r2, [r2, #0]
 8008aba:	f082 0220 	eor.w	r2, r2, #32
 8008abe:	801a      	strh	r2, [r3, #0]
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	f107 030e 	add.w	r3, r7, #14
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	8013      	strh	r3, [r2, #0]
 8008ae8:	e3b5      	b.n	8009256 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008aea:	463b      	mov	r3, r7
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	7b1b      	ldrb	r3, [r3, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8090 	bne.w	8008c16 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	463b      	mov	r3, r7
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d90e      	bls.n	8008b24 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008b06:	463b      	mov	r3, r7
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008b10:	463b      	mov	r3, r7
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	619a      	str	r2, [r3, #24]
 8008b22:	e008      	b.n	8008b36 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008b24:	463b      	mov	r3, r7
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008b2e:	463b      	mov	r3, r7
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b4e:	4413      	add	r3, r2
 8008b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b54:	463b      	mov	r3, r7
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	011a      	lsls	r2, r3, #4
 8008b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d116      	bne.n	8008ba0 <USB_EPStartXfer+0xb7e>
 8008b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e32c      	b.n	80091fa <USB_EPStartXfer+0x11d8>
 8008ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ba6:	d818      	bhi.n	8008bda <USB_EPStartXfer+0xbb8>
 8008ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <USB_EPStartXfer+0xba6>
 8008bbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e30f      	b.n	80091fa <USB_EPStartXfer+0x11d8>
 8008bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <USB_EPStartXfer+0xbd8>
 8008bf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	029b      	lsls	r3, r3, #10
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	e2f1      	b.n	80091fa <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c16:	463b      	mov	r3, r7
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	78db      	ldrb	r3, [r3, #3]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	f040 818f 	bne.w	8008f40 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c22:	463b      	mov	r3, r7
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d175      	bne.n	8008d18 <USB_EPStartXfer+0xcf6>
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c44:	4413      	add	r3, r2
 8008c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	011a      	lsls	r2, r3, #4
 8008c52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c56:	4413      	add	r3, r2
 8008c58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c60:	463b      	mov	r3, r7
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d116      	bne.n	8008c98 <USB_EPStartXfer+0xc76>
 8008c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	e065      	b.n	8008d64 <USB_EPStartXfer+0xd42>
 8008c98:	463b      	mov	r3, r7
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca0:	d81a      	bhi.n	8008cd8 <USB_EPStartXfer+0xcb6>
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cae:	463b      	mov	r3, r7
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <USB_EPStartXfer+0xca4>
 8008cbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	029b      	lsls	r3, r3, #10
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	e045      	b.n	8008d64 <USB_EPStartXfer+0xd42>
 8008cd8:	463b      	mov	r3, r7
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <USB_EPStartXfer+0xcda>
 8008cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	029b      	lsls	r3, r3, #10
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d14:	801a      	strh	r2, [r3, #0]
 8008d16:	e025      	b.n	8008d64 <USB_EPStartXfer+0xd42>
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d120      	bne.n	8008d64 <USB_EPStartXfer+0xd42>
 8008d22:	1d3b      	adds	r3, r7, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d40:	463b      	mov	r3, r7
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	011a      	lsls	r2, r3, #4
 8008d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d56:	463b      	mov	r3, r7
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d62:	801a      	strh	r2, [r3, #0]
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d175      	bne.n	8008e62 <USB_EPStartXfer+0xe40>
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d8e:	4413      	add	r3, r2
 8008d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d94:	463b      	mov	r3, r7
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	011a      	lsls	r2, r3, #4
 8008d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da0:	4413      	add	r3, r2
 8008da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008daa:	463b      	mov	r3, r7
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d116      	bne.n	8008de2 <USB_EPStartXfer+0xdc0>
 8008db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dc6:	801a      	strh	r2, [r3, #0]
 8008dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e061      	b.n	8008ea6 <USB_EPStartXfer+0xe84>
 8008de2:	463b      	mov	r3, r7
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dea:	d81a      	bhi.n	8008e22 <USB_EPStartXfer+0xe00>
 8008dec:	463b      	mov	r3, r7
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008df8:	463b      	mov	r3, r7
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <USB_EPStartXfer+0xdee>
 8008e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	029b      	lsls	r3, r3, #10
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	e041      	b.n	8008ea6 <USB_EPStartXfer+0xe84>
 8008e22:	463b      	mov	r3, r7
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e2e:	463b      	mov	r3, r7
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <USB_EPStartXfer+0xe24>
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e40:	3b01      	subs	r3, #1
 8008e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	029b      	lsls	r3, r3, #10
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	e021      	b.n	8008ea6 <USB_EPStartXfer+0xe84>
 8008e62:	463b      	mov	r3, r7
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d11c      	bne.n	8008ea6 <USB_EPStartXfer+0xe84>
 8008e6c:	1d3b      	adds	r3, r7, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e82:	463b      	mov	r3, r7
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	011a      	lsls	r2, r3, #4
 8008e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e8e:	4413      	add	r3, r2
 8008e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ea4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 81a4 	beq.w	80091fa <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ec6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <USB_EPStartXfer+0xebc>
 8008ed2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10d      	bne.n	8008efa <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ede:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 8187 	bne.w	80091fa <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008eec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f040 8180 	bne.w	80091fa <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008f18:	1d3b      	adds	r3, r7, #4
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	441a      	add	r2, r3
 8008f26:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	8013      	strh	r3, [r2, #0]
 8008f3e:	e15c      	b.n	80091fa <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f40:	463b      	mov	r3, r7
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	78db      	ldrb	r3, [r3, #3]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	f040 8155 	bne.w	80091f6 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d90e      	bls.n	8008f7a <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008f66:	463b      	mov	r3, r7
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f70:	1ad2      	subs	r2, r2, r3
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	619a      	str	r2, [r3, #24]
 8008f78:	e008      	b.n	8008f8c <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008f84:	463b      	mov	r3, r7
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d16f      	bne.n	8009076 <USB_EPStartXfer+0x1054>
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f9e:	1d3b      	adds	r3, r7, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fae:	4413      	add	r3, r2
 8008fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	011a      	lsls	r2, r3, #4
 8008fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d116      	bne.n	8009000 <USB_EPStartXfer+0xfde>
 8008fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	e05f      	b.n	80090c0 <USB_EPStartXfer+0x109e>
 8009000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009004:	2b3e      	cmp	r3, #62	; 0x3e
 8009006:	d818      	bhi.n	800903a <USB_EPStartXfer+0x1018>
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <USB_EPStartXfer+0x1006>
 800901e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009022:	3301      	adds	r3, #1
 8009024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800902c:	b29b      	uxth	r3, r3
 800902e:	029b      	lsls	r3, r3, #10
 8009030:	b29a      	uxth	r2, r3
 8009032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e042      	b.n	80090c0 <USB_EPStartXfer+0x109e>
 800903a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <USB_EPStartXfer+0x1038>
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009054:	3b01      	subs	r3, #1
 8009056:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800905a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905e:	b29b      	uxth	r3, r3
 8009060:	029b      	lsls	r3, r3, #10
 8009062:	b29b      	uxth	r3, r3
 8009064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	e024      	b.n	80090c0 <USB_EPStartXfer+0x109e>
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	785b      	ldrb	r3, [r3, #1]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d11f      	bne.n	80090c0 <USB_EPStartXfer+0x109e>
 8009080:	1d3b      	adds	r3, r7, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009090:	b29b      	uxth	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009098:	4413      	add	r3, r2
 800909a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800909e:	463b      	mov	r3, r7
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	011a      	lsls	r2, r3, #4
 80090a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090aa:	4413      	add	r3, r2
 80090ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	1d3b      	adds	r3, r7, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090c8:	463b      	mov	r3, r7
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d16f      	bne.n	80091b2 <USB_EPStartXfer+0x1190>
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090ea:	4413      	add	r3, r2
 80090ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090f0:	463b      	mov	r3, r7
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	011a      	lsls	r2, r3, #4
 80090f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090fc:	4413      	add	r3, r2
 80090fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d116      	bne.n	800913c <USB_EPStartXfer+0x111a>
 800910e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800911a:	b29a      	uxth	r2, r3
 800911c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009120:	801a      	strh	r2, [r3, #0]
 8009122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009132:	b29a      	uxth	r2, r3
 8009134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009138:	801a      	strh	r2, [r3, #0]
 800913a:	e05e      	b.n	80091fa <USB_EPStartXfer+0x11d8>
 800913c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009140:	2b3e      	cmp	r3, #62	; 0x3e
 8009142:	d818      	bhi.n	8009176 <USB_EPStartXfer+0x1154>
 8009144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800914e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d004      	beq.n	8009164 <USB_EPStartXfer+0x1142>
 800915a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800915e:	3301      	adds	r3, #1
 8009160:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009168:	b29b      	uxth	r3, r3
 800916a:	029b      	lsls	r3, r3, #10
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e041      	b.n	80091fa <USB_EPStartXfer+0x11d8>
 8009176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800917a:	095b      	lsrs	r3, r3, #5
 800917c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	2b00      	cmp	r3, #0
 800918a:	d104      	bne.n	8009196 <USB_EPStartXfer+0x1174>
 800918c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009190:	3b01      	subs	r3, #1
 8009192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800919a:	b29b      	uxth	r3, r3
 800919c:	029b      	lsls	r3, r3, #10
 800919e:	b29b      	uxth	r3, r3
 80091a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80091ae:	801a      	strh	r2, [r3, #0]
 80091b0:	e023      	b.n	80091fa <USB_EPStartXfer+0x11d8>
 80091b2:	463b      	mov	r3, r7
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d11e      	bne.n	80091fa <USB_EPStartXfer+0x11d8>
 80091bc:	1d3b      	adds	r3, r7, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091cc:	4413      	add	r3, r2
 80091ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091d2:	463b      	mov	r3, r7
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	011a      	lsls	r2, r3, #4
 80091da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091de:	4413      	add	r3, r2
 80091e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	e001      	b.n	80091fa <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e02e      	b.n	8009258 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091fa:	1d3b      	adds	r3, r7, #4
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	463b      	mov	r3, r7
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009214:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009218:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800921c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009220:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009224:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800922c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009230:	1d3b      	adds	r3, r7, #4
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	463b      	mov	r3, r7
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	441a      	add	r2, r3
 800923e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009252:	b29b      	uxth	r3, r3
 8009254:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d020      	beq.n	80092b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800928a:	81bb      	strh	r3, [r7, #12]
 800928c:	89bb      	ldrh	r3, [r7, #12]
 800928e:	f083 0310 	eor.w	r3, r3, #16
 8009292:	81bb      	strh	r3, [r7, #12]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	441a      	add	r2, r3
 800929e:	89bb      	ldrh	r3, [r7, #12]
 80092a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	8013      	strh	r3, [r2, #0]
 80092b4:	e01f      	b.n	80092f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092cc:	81fb      	strh	r3, [r7, #14]
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092d4:	81fb      	strh	r3, [r7, #14]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	441a      	add	r2, r3
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	7b1b      	ldrb	r3, [r3, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f040 809d 	bne.w	8009452 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d04c      	beq.n	80093ba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	823b      	strh	r3, [r7, #16]
 800932e:	8a3b      	ldrh	r3, [r7, #16]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01b      	beq.n	8009370 <USB_EPClearStall+0x6c>
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	81fb      	strh	r3, [r7, #14]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	89fb      	ldrh	r3, [r7, #14]
 800935c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800936c:	b29b      	uxth	r3, r3
 800936e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	78db      	ldrb	r3, [r3, #3]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d06c      	beq.n	8009452 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938e:	81bb      	strh	r3, [r7, #12]
 8009390:	89bb      	ldrh	r3, [r7, #12]
 8009392:	f083 0320 	eor.w	r3, r3, #32
 8009396:	81bb      	strh	r3, [r7, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	441a      	add	r2, r3
 80093a2:	89bb      	ldrh	r3, [r7, #12]
 80093a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	8013      	strh	r3, [r2, #0]
 80093b8:	e04b      	b.n	8009452 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	82fb      	strh	r3, [r7, #22]
 80093c8:	8afb      	ldrh	r3, [r7, #22]
 80093ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01b      	beq.n	800940a <USB_EPClearStall+0x106>
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e8:	82bb      	strh	r3, [r7, #20]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	441a      	add	r2, r3
 80093f4:	8abb      	ldrh	r3, [r7, #20]
 80093f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009406:	b29b      	uxth	r3, r3
 8009408:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29b      	uxth	r3, r3
 8009418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800941c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009420:	827b      	strh	r3, [r7, #18]
 8009422:	8a7b      	ldrh	r3, [r7, #18]
 8009424:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009428:	827b      	strh	r3, [r7, #18]
 800942a:	8a7b      	ldrh	r3, [r7, #18]
 800942c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009430:	827b      	strh	r3, [r7, #18]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	441a      	add	r2, r3
 800943c:	8a7b      	ldrh	r3, [r7, #18]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800944a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	371c      	adds	r7, #28
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800949e:	b480      	push	{r7}
 80094a0:	b085      	sub	sp, #20
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094b0:	68fb      	ldr	r3, [r7, #12]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094be:	b480      	push	{r7}
 80094c0:	b08d      	sub	sp, #52	; 0x34
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	80fb      	strh	r3, [r7, #6]
 80094d0:	4613      	mov	r3, r2
 80094d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80094d4:	88bb      	ldrh	r3, [r7, #4]
 80094d6:	3301      	adds	r3, #1
 80094d8:	085b      	lsrs	r3, r3, #1
 80094da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	005a      	lsls	r2, r3, #1
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f6:	e01e      	b.n	8009536 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	3301      	adds	r3, #1
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	b29b      	uxth	r3, r3
 800950e:	461a      	mov	r2, r3
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	4313      	orrs	r3, r2
 8009514:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	b29a      	uxth	r2, r3
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	3302      	adds	r3, #2
 8009522:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	3302      	adds	r3, #2
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	3301      	adds	r3, #1
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	3b01      	subs	r3, #1
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1dd      	bne.n	80094f8 <USB_WritePMA+0x3a>
  }
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop
 8009540:	3734      	adds	r7, #52	; 0x34
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800954a:	b480      	push	{r7}
 800954c:	b08b      	sub	sp, #44	; 0x2c
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	4611      	mov	r1, r2
 8009556:	461a      	mov	r2, r3
 8009558:	460b      	mov	r3, r1
 800955a:	80fb      	strh	r3, [r7, #6]
 800955c:	4613      	mov	r3, r2
 800955e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009560:	88bb      	ldrh	r3, [r7, #4]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	b29b      	uxth	r3, r3
 8009566:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	005a      	lsls	r2, r3, #1
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800957c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	e01b      	b.n	80095bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	3302      	adds	r3, #2
 8009590:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	3301      	adds	r3, #1
 800959e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	3301      	adds	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	3302      	adds	r3, #2
 80095b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	3b01      	subs	r3, #1
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e0      	bne.n	8009584 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095c2:	88bb      	ldrh	r3, [r7, #4]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	701a      	strb	r2, [r3, #0]
  }
}
 80095de:	bf00      	nop
 80095e0:	372c      	adds	r7, #44	; 0x2c
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1b      	ldrb	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d115      	bne.n	800962e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009606:	2202      	movs	r2, #2
 8009608:	2181      	movs	r1, #129	; 0x81
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 febf 	bl	800b38e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800961a:	2202      	movs	r2, #2
 800961c:	2101      	movs	r1, #1
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f001 feb5 	bl	800b38e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800962c:	e012      	b.n	8009654 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	2202      	movs	r2, #2
 8009632:	2181      	movs	r1, #129	; 0x81
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 feaa 	bl	800b38e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009640:	2340      	movs	r3, #64	; 0x40
 8009642:	2202      	movs	r2, #2
 8009644:	2101      	movs	r1, #1
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 fea1 	bl	800b38e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009654:	2308      	movs	r3, #8
 8009656:	2203      	movs	r2, #3
 8009658:	2182      	movs	r1, #130	; 0x82
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fe97 	bl	800b38e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009666:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800966a:	f001 ffb9 	bl	800b5e0 <USBD_static_malloc>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
 8009684:	e026      	b.n	80096d4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	7c1b      	ldrb	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ba:	2101      	movs	r1, #1
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 ff58 	bl	800b572 <USBD_LL_PrepareReceive>
 80096c2:	e007      	b.n	80096d4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	2101      	movs	r1, #1
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 ff4f 	bl	800b572 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80096ee:	2181      	movs	r1, #129	; 0x81
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 fe72 	bl	800b3da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fe6b 	bl	800b3da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800970c:	2182      	movs	r1, #130	; 0x82
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fe63 	bl	800b3da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00e      	beq.n	8009742 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009734:	4618      	mov	r0, r3
 8009736:	f001 ff61 	bl	800b5fc <USBD_static_free>
    pdev->pClassData = NULL;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009772:	2b00      	cmp	r3, #0
 8009774:	d039      	beq.n	80097ea <USBD_CDC_Setup+0x9e>
 8009776:	2b20      	cmp	r3, #32
 8009778:	d17f      	bne.n	800987a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	88db      	ldrh	r3, [r3, #6]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d029      	beq.n	80097d6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b25b      	sxtb	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	da11      	bge.n	80097b0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009798:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	88d2      	ldrh	r2, [r2, #6]
 800979e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097a0:	6939      	ldr	r1, [r7, #16]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	88db      	ldrh	r3, [r3, #6]
 80097a6:	461a      	mov	r2, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fa14 	bl	800abd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80097ae:	e06b      	b.n	8009888 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	785a      	ldrb	r2, [r3, #1]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097c6:	6939      	ldr	r1, [r7, #16]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	88db      	ldrh	r3, [r3, #6]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fa2f 	bl	800ac32 <USBD_CtlPrepareRx>
      break;
 80097d4:	e058      	b.n	8009888 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	7850      	ldrb	r0, [r2, #1]
 80097e2:	2200      	movs	r2, #0
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	4798      	blx	r3
      break;
 80097e8:	e04e      	b.n	8009888 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	2b0b      	cmp	r3, #11
 80097f0:	d02e      	beq.n	8009850 <USBD_CDC_Setup+0x104>
 80097f2:	2b0b      	cmp	r3, #11
 80097f4:	dc38      	bgt.n	8009868 <USBD_CDC_Setup+0x11c>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <USBD_CDC_Setup+0xb4>
 80097fa:	2b0a      	cmp	r3, #10
 80097fc:	d014      	beq.n	8009828 <USBD_CDC_Setup+0xdc>
 80097fe:	e033      	b.n	8009868 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009806:	2b03      	cmp	r3, #3
 8009808:	d107      	bne.n	800981a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800980a:	f107 030c 	add.w	r3, r7, #12
 800980e:	2202      	movs	r2, #2
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 f9df 	bl	800abd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009818:	e02e      	b.n	8009878 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 f96f 	bl	800ab00 <USBD_CtlError>
            ret = USBD_FAIL;
 8009822:	2302      	movs	r3, #2
 8009824:	75fb      	strb	r3, [r7, #23]
          break;
 8009826:	e027      	b.n	8009878 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	2b03      	cmp	r3, #3
 8009830:	d107      	bne.n	8009842 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009832:	f107 030f 	add.w	r3, r7, #15
 8009836:	2201      	movs	r2, #1
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 f9cb 	bl	800abd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009840:	e01a      	b.n	8009878 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 f95b 	bl	800ab00 <USBD_CtlError>
            ret = USBD_FAIL;
 800984a:	2302      	movs	r3, #2
 800984c:	75fb      	strb	r3, [r7, #23]
          break;
 800984e:	e013      	b.n	8009878 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009856:	2b03      	cmp	r3, #3
 8009858:	d00d      	beq.n	8009876 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 f94f 	bl	800ab00 <USBD_CtlError>
            ret = USBD_FAIL;
 8009862:	2302      	movs	r3, #2
 8009864:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009866:	e006      	b.n	8009876 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f948 	bl	800ab00 <USBD_CtlError>
          ret = USBD_FAIL;
 8009870:	2302      	movs	r3, #2
 8009872:	75fb      	strb	r3, [r7, #23]
          break;
 8009874:	e000      	b.n	8009878 <USBD_CDC_Setup+0x12c>
          break;
 8009876:	bf00      	nop
      }
      break;
 8009878:	e006      	b.n	8009888 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 f93f 	bl	800ab00 <USBD_CtlError>
      ret = USBD_FAIL;
 8009882:	2302      	movs	r3, #2
 8009884:	75fb      	strb	r3, [r7, #23]
      break;
 8009886:	bf00      	nop
  }

  return ret;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d03a      	beq.n	800992e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	331c      	adds	r3, #28
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d029      	beq.n	8009922 <USBD_CDC_DataIn+0x90>
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	331c      	adds	r3, #28
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	78f9      	ldrb	r1, [r7, #3]
 80098e2:	68b8      	ldr	r0, [r7, #8]
 80098e4:	460b      	mov	r3, r1
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	4403      	add	r3, r0
 80098ee:	3338      	adds	r3, #56	; 0x38
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80098f6:	fb03 f301 	mul.w	r3, r3, r1
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d110      	bne.n	8009922 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	331c      	adds	r3, #28
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009914:	78f9      	ldrb	r1, [r7, #3]
 8009916:	2300      	movs	r3, #0
 8009918:	2200      	movs	r2, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 fe06 	bl	800b52c <USBD_LL_Transmit>
 8009920:	e003      	b.n	800992a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800992e:	2302      	movs	r3, #2
  }
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 fe31 	bl	800b5b8 <USBD_LL_GetRxDataSize>
 8009956:	4602      	mov	r2, r0
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00d      	beq.n	8009984 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800997c:	4611      	mov	r1, r2
 800997e:	4798      	blx	r3

    return USBD_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	e000      	b.n	8009986 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009984:	2302      	movs	r3, #2
  }
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <USBD_CDC_EP0_RxReady+0x46>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099ae:	2bff      	cmp	r3, #255	; 0xff
 80099b0:	d010      	beq.n	80099d4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80099c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099c8:	b292      	uxth	r2, r2
 80099ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	22ff      	movs	r2, #255	; 0xff
 80099d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2243      	movs	r2, #67	; 0x43
 80099ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000094 	.word	0x20000094

08009a00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2243      	movs	r2, #67	; 0x43
 8009a0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000050 	.word	0x20000050

08009a20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2243      	movs	r2, #67	; 0x43
 8009a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a2e:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	200000d8 	.word	0x200000d8

08009a40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a4e:	4b03      	ldr	r3, [pc, #12]	; (8009a5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	2000000c 	.word	0x2000000c

08009a60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b087      	sub	sp, #28
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009aac:	88fa      	ldrh	r2, [r7, #6]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01c      	beq.n	8009b3e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d115      	bne.n	8009b3a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2181      	movs	r1, #129	; 0x81
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fcfb 	bl	800b52c <USBD_LL_Transmit>

      return USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e002      	b.n	8009b40 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b3e:	2302      	movs	r3, #2
  }
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d017      	beq.n	8009b92 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7c1b      	ldrb	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b74:	2101      	movs	r1, #1
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fcfb 	bl	800b572 <USBD_LL_PrepareReceive>
 8009b7c:	e007      	b.n	8009b8e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	2101      	movs	r1, #1
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 fcf2 	bl	800b572 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e000      	b.n	8009b94 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009b92:	2302      	movs	r3, #2
  }
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	e01a      	b.n	8009bea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f001 fb5e 	bl	800b2a4 <USBD_LL_Init>

  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d006      	beq.n	8009c14 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
 8009c12:	e001      	b.n	8009c18 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c14:	2302      	movs	r3, #2
 8009c16:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fb92 	bl	800b358 <USBD_LL_Start>

  return USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c60:	2302      	movs	r3, #2
 8009c62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00c      	beq.n	8009c88 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	78fa      	ldrb	r2, [r7, #3]
 8009c78:	4611      	mov	r1, r2
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b082      	sub	sp, #8
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3

  return USBD_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fedb 	bl	800aa86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d016      	beq.n	8009d22 <USBD_LL_SetupStage+0x6a>
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d81c      	bhi.n	8009d32 <USBD_LL_SetupStage+0x7a>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <USBD_LL_SetupStage+0x4a>
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d008      	beq.n	8009d12 <USBD_LL_SetupStage+0x5a>
 8009d00:	e017      	b.n	8009d32 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f9ce 	bl	800a0ac <USBD_StdDevReq>
      break;
 8009d10:	e01a      	b.n	8009d48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa30 	bl	800a180 <USBD_StdItfReq>
      break;
 8009d20:	e012      	b.n	8009d48 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa70 	bl	800a210 <USBD_StdEPReq>
      break;
 8009d30:	e00a      	b.n	8009d48 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 fb69 	bl	800b418 <USBD_LL_StallEP>
      break;
 8009d46:	bf00      	nop
  }

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b086      	sub	sp, #24
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d14b      	bne.n	8009dfe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d134      	bne.n	8009de2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d919      	bls.n	8009db8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	1ad2      	subs	r2, r2, r3
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d203      	bcs.n	8009da6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	e002      	b.n	8009dac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 ff5c 	bl	800ac6e <USBD_CtlContinueRx>
 8009db6:	e038      	b.n	8009e2a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d105      	bne.n	8009dda <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 ff59 	bl	800ac92 <USBD_CtlSendStatus>
 8009de0:	e023      	b.n	8009e2a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d11e      	bne.n	8009e2a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009df4:	2100      	movs	r1, #0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f001 fb0e 	bl	800b418 <USBD_LL_StallEP>
 8009dfc:	e015      	b.n	8009e2a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00d      	beq.n	8009e26 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d108      	bne.n	8009e26 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	7afa      	ldrb	r2, [r7, #11]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	4798      	blx	r3
 8009e24:	e001      	b.n	8009e2a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e26:	2302      	movs	r3, #2
 8009e28:	e000      	b.n	8009e2c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d17f      	bne.n	8009f48 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3314      	adds	r3, #20
 8009e4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d15c      	bne.n	8009f12 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d915      	bls.n	8009e90 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	1ad2      	subs	r2, r2, r3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fec6 	bl	800ac0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e82:	2300      	movs	r3, #0
 8009e84:	2200      	movs	r2, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f001 fb72 	bl	800b572 <USBD_LL_PrepareReceive>
 8009e8e:	e04e      	b.n	8009f2e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	6912      	ldr	r2, [r2, #16]
 8009e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e9c:	fb02 f201 	mul.w	r2, r2, r1
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d11c      	bne.n	8009ee0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	689a      	ldr	r2, [r3, #8]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d316      	bcc.n	8009ee0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d20f      	bcs.n	8009ee0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 fea2 	bl	800ac0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f001 fb4a 	bl	800b572 <USBD_LL_PrepareReceive>
 8009ede:	e026      	b.n	8009f2e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00a      	beq.n	8009f02 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d105      	bne.n	8009f02 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009f02:	2180      	movs	r1, #128	; 0x80
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f001 fa87 	bl	800b418 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fed4 	bl	800acb8 <USBD_CtlReceiveStatus>
 8009f10:	e00d      	b.n	8009f2e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d004      	beq.n	8009f26 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d103      	bne.n	8009f2e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f26:	2180      	movs	r1, #128	; 0x80
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f001 fa75 	bl	800b418 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d11d      	bne.n	8009f74 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fe80 	bl	8009c3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f46:	e015      	b.n	8009f74 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00d      	beq.n	8009f70 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d108      	bne.n	8009f70 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	7afa      	ldrb	r2, [r7, #11]
 8009f68:	4611      	mov	r1, r2
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	4798      	blx	r3
 8009f6e:	e001      	b.n	8009f74 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f70:	2302      	movs	r3, #2
 8009f72:	e000      	b.n	8009f76 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f86:	2340      	movs	r3, #64	; 0x40
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f9fe 	bl	800b38e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2240      	movs	r2, #64	; 0x40
 8009f9e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2180      	movs	r1, #128	; 0x80
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f9f0 	bl	800b38e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2240      	movs	r2, #64	; 0x40
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6852      	ldr	r2, [r2, #4]
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
  }

  return USBD_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2204      	movs	r2, #4
 800a038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d105      	bne.n	800a068 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a084:	2b03      	cmp	r3, #3
 800a086:	d10b      	bne.n	800a0a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0c2:	2b40      	cmp	r3, #64	; 0x40
 800a0c4:	d005      	beq.n	800a0d2 <USBD_StdDevReq+0x26>
 800a0c6:	2b40      	cmp	r3, #64	; 0x40
 800a0c8:	d84f      	bhi.n	800a16a <USBD_StdDevReq+0xbe>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <USBD_StdDevReq+0x36>
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	d14b      	bne.n	800a16a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	4798      	blx	r3
      break;
 800a0e0:	e048      	b.n	800a174 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b09      	cmp	r3, #9
 800a0e8:	d839      	bhi.n	800a15e <USBD_StdDevReq+0xb2>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <USBD_StdDevReq+0x44>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a141 	.word	0x0800a141
 800a0f4:	0800a155 	.word	0x0800a155
 800a0f8:	0800a15f 	.word	0x0800a15f
 800a0fc:	0800a14b 	.word	0x0800a14b
 800a100:	0800a15f 	.word	0x0800a15f
 800a104:	0800a123 	.word	0x0800a123
 800a108:	0800a119 	.word	0x0800a119
 800a10c:	0800a15f 	.word	0x0800a15f
 800a110:	0800a137 	.word	0x0800a137
 800a114:	0800a12d 	.word	0x0800a12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f9dc 	bl	800a4d8 <USBD_GetDescriptor>
          break;
 800a120:	e022      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fb3f 	bl	800a7a8 <USBD_SetAddress>
          break;
 800a12a:	e01d      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fb7e 	bl	800a830 <USBD_SetConfig>
          break;
 800a134:	e018      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fc07 	bl	800a94c <USBD_GetConfig>
          break;
 800a13e:	e013      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc37 	bl	800a9b6 <USBD_GetStatus>
          break;
 800a148:	e00e      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fc65 	bl	800aa1c <USBD_SetFeature>
          break;
 800a152:	e009      	b.n	800a168 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fc74 	bl	800aa44 <USBD_ClrFeature>
          break;
 800a15c:	e004      	b.n	800a168 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fccd 	bl	800ab00 <USBD_CtlError>
          break;
 800a166:	bf00      	nop
      }
      break;
 800a168:	e004      	b.n	800a174 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fcc7 	bl	800ab00 <USBD_CtlError>
      break;
 800a172:	bf00      	nop
  }

  return ret;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop

0800a180 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d005      	beq.n	800a1a6 <USBD_StdItfReq+0x26>
 800a19a:	2b40      	cmp	r3, #64	; 0x40
 800a19c:	d82e      	bhi.n	800a1fc <USBD_StdItfReq+0x7c>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <USBD_StdItfReq+0x26>
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d12a      	bne.n	800a1fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d81d      	bhi.n	800a1ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	889b      	ldrh	r3, [r3, #4]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d813      	bhi.n	800a1e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	4798      	blx	r3
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	88db      	ldrh	r3, [r3, #6]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d110      	bne.n	800a1f8 <USBD_StdItfReq+0x78>
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10d      	bne.n	800a1f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fd58 	bl	800ac92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1e2:	e009      	b.n	800a1f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fc8a 	bl	800ab00 <USBD_CtlError>
          break;
 800a1ec:	e004      	b.n	800a1f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc85 	bl	800ab00 <USBD_CtlError>
          break;
 800a1f6:	e000      	b.n	800a1fa <USBD_StdItfReq+0x7a>
          break;
 800a1f8:	bf00      	nop
      }
      break;
 800a1fa:	e004      	b.n	800a206 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fc7e 	bl	800ab00 <USBD_CtlError>
      break;
 800a204:	bf00      	nop
  }

  return USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	889b      	ldrh	r3, [r3, #4]
 800a222:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a22c:	2b40      	cmp	r3, #64	; 0x40
 800a22e:	d007      	beq.n	800a240 <USBD_StdEPReq+0x30>
 800a230:	2b40      	cmp	r3, #64	; 0x40
 800a232:	f200 8146 	bhi.w	800a4c2 <USBD_StdEPReq+0x2b2>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <USBD_StdEPReq+0x40>
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	f040 8141 	bne.w	800a4c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
      break;
 800a24e:	e13d      	b.n	800a4cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a258:	2b20      	cmp	r3, #32
 800a25a:	d10a      	bne.n	800a272 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	4798      	blx	r3
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	e12d      	b.n	800a4ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b03      	cmp	r3, #3
 800a278:	d007      	beq.n	800a28a <USBD_StdEPReq+0x7a>
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	f300 811b 	bgt.w	800a4b6 <USBD_StdEPReq+0x2a6>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d072      	beq.n	800a36a <USBD_StdEPReq+0x15a>
 800a284:	2b01      	cmp	r3, #1
 800a286:	d03a      	beq.n	800a2fe <USBD_StdEPReq+0xee>
 800a288:	e115      	b.n	800a4b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a290:	2b02      	cmp	r3, #2
 800a292:	d002      	beq.n	800a29a <USBD_StdEPReq+0x8a>
 800a294:	2b03      	cmp	r3, #3
 800a296:	d015      	beq.n	800a2c4 <USBD_StdEPReq+0xb4>
 800a298:	e02b      	b.n	800a2f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00c      	beq.n	800a2ba <USBD_StdEPReq+0xaa>
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	2b80      	cmp	r3, #128	; 0x80
 800a2a4:	d009      	beq.n	800a2ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f8b4 	bl	800b418 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a2b0:	2180      	movs	r1, #128	; 0x80
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 f8b0 	bl	800b418 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2b8:	e020      	b.n	800a2fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc1f 	bl	800ab00 <USBD_CtlError>
              break;
 800a2c2:	e01b      	b.n	800a2fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	885b      	ldrh	r3, [r3, #2]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10e      	bne.n	800a2ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <USBD_StdEPReq+0xda>
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b80      	cmp	r3, #128	; 0x80
 800a2d6:	d008      	beq.n	800a2ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	88db      	ldrh	r3, [r3, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d104      	bne.n	800a2ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f001 f897 	bl	800b418 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fcd1 	bl	800ac92 <USBD_CtlSendStatus>

              break;
 800a2f0:	e004      	b.n	800a2fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fc03 	bl	800ab00 <USBD_CtlError>
              break;
 800a2fa:	bf00      	nop
          }
          break;
 800a2fc:	e0e0      	b.n	800a4c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a304:	2b02      	cmp	r3, #2
 800a306:	d002      	beq.n	800a30e <USBD_StdEPReq+0xfe>
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d015      	beq.n	800a338 <USBD_StdEPReq+0x128>
 800a30c:	e026      	b.n	800a35c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00c      	beq.n	800a32e <USBD_StdEPReq+0x11e>
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b80      	cmp	r3, #128	; 0x80
 800a318:	d009      	beq.n	800a32e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 f87a 	bl	800b418 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a324:	2180      	movs	r1, #128	; 0x80
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 f876 	bl	800b418 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a32c:	e01c      	b.n	800a368 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fbe5 	bl	800ab00 <USBD_CtlError>
              break;
 800a336:	e017      	b.n	800a368 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	885b      	ldrh	r3, [r3, #2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d112      	bne.n	800a366 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 f881 	bl	800b456 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fc9c 	bl	800ac92 <USBD_CtlSendStatus>
              }
              break;
 800a35a:	e004      	b.n	800a366 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fbce 	bl	800ab00 <USBD_CtlError>
              break;
 800a364:	e000      	b.n	800a368 <USBD_StdEPReq+0x158>
              break;
 800a366:	bf00      	nop
          }
          break;
 800a368:	e0aa      	b.n	800a4c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a370:	2b02      	cmp	r3, #2
 800a372:	d002      	beq.n	800a37a <USBD_StdEPReq+0x16a>
 800a374:	2b03      	cmp	r3, #3
 800a376:	d032      	beq.n	800a3de <USBD_StdEPReq+0x1ce>
 800a378:	e097      	b.n	800a4aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <USBD_StdEPReq+0x180>
 800a380:	7bbb      	ldrb	r3, [r7, #14]
 800a382:	2b80      	cmp	r3, #128	; 0x80
 800a384:	d004      	beq.n	800a390 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fbb9 	bl	800ab00 <USBD_CtlError>
                break;
 800a38e:	e091      	b.n	800a4b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a394:	2b00      	cmp	r3, #0
 800a396:	da0b      	bge.n	800a3b0 <USBD_StdEPReq+0x1a0>
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a39e:	4613      	mov	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	3310      	adds	r3, #16
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	e00b      	b.n	800a3c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fbfd 	bl	800abd6 <USBD_CtlSendData>
              break;
 800a3dc:	e06a      	b.n	800a4b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da11      	bge.n	800a40a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	f003 020f 	and.w	r2, r3, #15
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3318      	adds	r3, #24
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d117      	bne.n	800a430 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fb7c 	bl	800ab00 <USBD_CtlError>
                  break;
 800a408:	e054      	b.n	800a4b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	f003 020f 	and.w	r2, r3, #15
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d104      	bne.n	800a430 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb69 	bl	800ab00 <USBD_CtlError>
                  break;
 800a42e:	e041      	b.n	800a4b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a434:	2b00      	cmp	r3, #0
 800a436:	da0b      	bge.n	800a450 <USBD_StdEPReq+0x240>
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	3310      	adds	r3, #16
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	4413      	add	r3, r2
 800a44c:	3304      	adds	r3, #4
 800a44e:	e00b      	b.n	800a468 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a456:	4613      	mov	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	4413      	add	r3, r2
 800a466:	3304      	adds	r3, #4
 800a468:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <USBD_StdEPReq+0x266>
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	2b80      	cmp	r3, #128	; 0x80
 800a474:	d103      	bne.n	800a47e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	e00e      	b.n	800a49c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f806 	bl	800b494 <USBD_LL_IsStallEP>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2201      	movs	r2, #1
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e002      	b.n	800a49c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fb97 	bl	800abd6 <USBD_CtlSendData>
              break;
 800a4a8:	e004      	b.n	800a4b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fb27 	bl	800ab00 <USBD_CtlError>
              break;
 800a4b2:	bf00      	nop
          }
          break;
 800a4b4:	e004      	b.n	800a4c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb21 	bl	800ab00 <USBD_CtlError>
          break;
 800a4be:	bf00      	nop
      }
      break;
 800a4c0:	e004      	b.n	800a4cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fb1b 	bl	800ab00 <USBD_CtlError>
      break;
 800a4ca:	bf00      	nop
  }

  return ret;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	0a1b      	lsrs	r3, r3, #8
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	f200 8128 	bhi.w	800a74e <USBD_GetDescriptor+0x276>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <USBD_GetDescriptor+0x2c>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a539 	.word	0x0800a539
 800a50c:	0800a579 	.word	0x0800a579
 800a510:	0800a74f 	.word	0x0800a74f
 800a514:	0800a74f 	.word	0x0800a74f
 800a518:	0800a6ef 	.word	0x0800a6ef
 800a51c:	0800a71b 	.word	0x0800a71b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	7c12      	ldrb	r2, [r2, #16]
 800a52c:	f107 0108 	add.w	r1, r7, #8
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	60f8      	str	r0, [r7, #12]
      break;
 800a536:	e112      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7c1b      	ldrb	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10d      	bne.n	800a55c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f107 0208 	add.w	r2, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	2202      	movs	r2, #2
 800a558:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a55a:	e100      	b.n	800a75e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	f107 0208 	add.w	r2, r7, #8
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
      break;
 800a576:	e0f2      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b05      	cmp	r3, #5
 800a580:	f200 80ac 	bhi.w	800a6dc <USBD_GetDescriptor+0x204>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <USBD_GetDescriptor+0xb4>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5a5 	.word	0x0800a5a5
 800a590:	0800a5d9 	.word	0x0800a5d9
 800a594:	0800a60d 	.word	0x0800a60d
 800a598:	0800a641 	.word	0x0800a641
 800a59c:	0800a675 	.word	0x0800a675
 800a5a0:	0800a6a9 	.word	0x0800a6a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c6:	e091      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fa98 	bl	800ab00 <USBD_CtlError>
            err++;
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d6:	e089      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e077      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa7e 	bl	800ab00 <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e06f      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e05d      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa64 	bl	800ab00 <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e055      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	f107 0108 	add.w	r1, r7, #8
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a662:	e043      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa4a 	bl	800ab00 <USBD_CtlError>
            err++;
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	3301      	adds	r3, #1
 800a670:	72fb      	strb	r3, [r7, #11]
          break;
 800a672:	e03b      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	7c12      	ldrb	r2, [r2, #16]
 800a68c:	f107 0108 	add.w	r1, r7, #8
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
 800a694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a696:	e029      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa30 	bl	800ab00 <USBD_CtlError>
            err++;
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a6:	e021      	b.n	800a6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ca:	e00f      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa16 	bl	800ab00 <USBD_CtlError>
            err++;
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6da:	e007      	b.n	800a6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa0e 	bl	800ab00 <USBD_CtlError>
          err++;
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a6ea:	e038      	b.n	800a75e <USBD_GetDescriptor+0x286>
 800a6ec:	e037      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7c1b      	ldrb	r3, [r3, #16]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	f107 0208 	add.w	r2, r7, #8
 800a702:	4610      	mov	r0, r2
 800a704:	4798      	blx	r3
 800a706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a708:	e029      	b.n	800a75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f9f7 	bl	800ab00 <USBD_CtlError>
        err++;
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	3301      	adds	r3, #1
 800a716:	72fb      	strb	r3, [r7, #11]
      break;
 800a718:	e021      	b.n	800a75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7c1b      	ldrb	r3, [r3, #16]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	f107 0208 	add.w	r2, r7, #8
 800a72e:	4610      	mov	r0, r2
 800a730:	4798      	blx	r3
 800a732:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3301      	adds	r3, #1
 800a738:	2207      	movs	r2, #7
 800a73a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a73c:	e00f      	b.n	800a75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f9dd 	bl	800ab00 <USBD_CtlError>
        err++;
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	3301      	adds	r3, #1
 800a74a:	72fb      	strb	r3, [r7, #11]
      break;
 800a74c:	e007      	b.n	800a75e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f9d5 	bl	800ab00 <USBD_CtlError>
      err++;
 800a756:	7afb      	ldrb	r3, [r7, #11]
 800a758:	3301      	adds	r3, #1
 800a75a:	72fb      	strb	r3, [r7, #11]
      break;
 800a75c:	bf00      	nop
  }

  if (err != 0U)
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d11c      	bne.n	800a79e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a764:	893b      	ldrh	r3, [r7, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d011      	beq.n	800a78e <USBD_GetDescriptor+0x2b6>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	88db      	ldrh	r3, [r3, #6]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00d      	beq.n	800a78e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	88da      	ldrh	r2, [r3, #6]
 800a776:	893b      	ldrh	r3, [r7, #8]
 800a778:	4293      	cmp	r3, r2
 800a77a:	bf28      	it	cs
 800a77c:	4613      	movcs	r3, r2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a782:	893b      	ldrh	r3, [r7, #8]
 800a784:	461a      	mov	r2, r3
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fa24 	bl	800abd6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	88db      	ldrh	r3, [r3, #6]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa7b 	bl	800ac92 <USBD_CtlSendStatus>
 800a79c:	e000      	b.n	800a7a0 <USBD_GetDescriptor+0x2c8>
    return;
 800a79e:	bf00      	nop
    }
  }
}
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop

0800a7a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	889b      	ldrh	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d130      	bne.n	800a81c <USBD_SetAddress+0x74>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	88db      	ldrh	r3, [r3, #6]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d12c      	bne.n	800a81c <USBD_SetAddress+0x74>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	885b      	ldrh	r3, [r3, #2]
 800a7c6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7c8:	d828      	bhi.n	800a81c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d104      	bne.n	800a7ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f98c 	bl	800ab00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e8:	e01d      	b.n	800a826 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7bfa      	ldrb	r2, [r7, #15]
 800a7ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fe79 	bl	800b4ee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fa48 	bl	800ac92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d004      	beq.n	800a812 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a810:	e009      	b.n	800a826 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	e004      	b.n	800a826 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f96e 	bl	800ab00 <USBD_CtlError>
  }
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	885b      	ldrh	r3, [r3, #2]
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	4b41      	ldr	r3, [pc, #260]	; (800a948 <USBD_SetConfig+0x118>)
 800a842:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a844:	4b40      	ldr	r3, [pc, #256]	; (800a948 <USBD_SetConfig+0x118>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d904      	bls.n	800a856 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f956 	bl	800ab00 <USBD_CtlError>
 800a854:	e075      	b.n	800a942 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d002      	beq.n	800a866 <USBD_SetConfig+0x36>
 800a860:	2b03      	cmp	r3, #3
 800a862:	d023      	beq.n	800a8ac <USBD_SetConfig+0x7c>
 800a864:	e062      	b.n	800a92c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a866:	4b38      	ldr	r3, [pc, #224]	; (800a948 <USBD_SetConfig+0x118>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01a      	beq.n	800a8a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a86e:	4b36      	ldr	r3, [pc, #216]	; (800a948 <USBD_SetConfig+0x118>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2203      	movs	r2, #3
 800a87c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a880:	4b31      	ldr	r3, [pc, #196]	; (800a948 <USBD_SetConfig+0x118>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	4619      	mov	r1, r3
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff f9e4 	bl	8009c54 <USBD_SetClassConfig>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d104      	bne.n	800a89c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f933 	bl	800ab00 <USBD_CtlError>
            return;
 800a89a:	e052      	b.n	800a942 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f9f8 	bl	800ac92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8a2:	e04e      	b.n	800a942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9f4 	bl	800ac92 <USBD_CtlSendStatus>
        break;
 800a8aa:	e04a      	b.n	800a942 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a8ac:	4b26      	ldr	r3, [pc, #152]	; (800a948 <USBD_SetConfig+0x118>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d112      	bne.n	800a8da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a8bc:	4b22      	ldr	r3, [pc, #136]	; (800a948 <USBD_SetConfig+0x118>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a8c6:	4b20      	ldr	r3, [pc, #128]	; (800a948 <USBD_SetConfig+0x118>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff f9e0 	bl	8009c92 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f9dd 	bl	800ac92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8d8:	e033      	b.n	800a942 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a8da:	4b1b      	ldr	r3, [pc, #108]	; (800a948 <USBD_SetConfig+0x118>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d01d      	beq.n	800a924 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff f9ce 	bl	8009c92 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a8f6:	4b14      	ldr	r3, [pc, #80]	; (800a948 <USBD_SetConfig+0x118>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a900:	4b11      	ldr	r3, [pc, #68]	; (800a948 <USBD_SetConfig+0x118>)
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff f9a4 	bl	8009c54 <USBD_SetClassConfig>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d104      	bne.n	800a91c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f8f3 	bl	800ab00 <USBD_CtlError>
            return;
 800a91a:	e012      	b.n	800a942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9b8 	bl	800ac92 <USBD_CtlSendStatus>
        break;
 800a922:	e00e      	b.n	800a942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f9b4 	bl	800ac92 <USBD_CtlSendStatus>
        break;
 800a92a:	e00a      	b.n	800a942 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f8e6 	bl	800ab00 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <USBD_SetConfig+0x118>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff f9a9 	bl	8009c92 <USBD_ClrClassConfig>
        break;
 800a940:	bf00      	nop
    }
  }
}
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	2000019d 	.word	0x2000019d

0800a94c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d004      	beq.n	800a968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f8cd 	bl	800ab00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a966:	e022      	b.n	800a9ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96e:	2b02      	cmp	r3, #2
 800a970:	dc02      	bgt.n	800a978 <USBD_GetConfig+0x2c>
 800a972:	2b00      	cmp	r3, #0
 800a974:	dc03      	bgt.n	800a97e <USBD_GetConfig+0x32>
 800a976:	e015      	b.n	800a9a4 <USBD_GetConfig+0x58>
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d00b      	beq.n	800a994 <USBD_GetConfig+0x48>
 800a97c:	e012      	b.n	800a9a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3308      	adds	r3, #8
 800a988:	2201      	movs	r2, #1
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f922 	bl	800abd6 <USBD_CtlSendData>
        break;
 800a992:	e00c      	b.n	800a9ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3304      	adds	r3, #4
 800a998:	2201      	movs	r2, #1
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f91a 	bl	800abd6 <USBD_CtlSendData>
        break;
 800a9a2:	e004      	b.n	800a9ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f8aa 	bl	800ab00 <USBD_CtlError>
        break;
 800a9ac:	bf00      	nop
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d81e      	bhi.n	800aa0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d004      	beq.n	800a9de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f892 	bl	800ab00 <USBD_CtlError>
        break;
 800a9dc:	e01a      	b.n	800aa14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f043 0202 	orr.w	r2, r3, #2
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	2202      	movs	r2, #2
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f8e7 	bl	800abd6 <USBD_CtlSendData>
      break;
 800aa08:	e004      	b.n	800aa14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f877 	bl	800ab00 <USBD_CtlError>
      break;
 800aa12:	bf00      	nop
  }
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	885b      	ldrh	r3, [r3, #2]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d106      	bne.n	800aa3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f92b 	bl	800ac92 <USBD_CtlSendStatus>
  }
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa54:	3b01      	subs	r3, #1
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d80b      	bhi.n	800aa72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	885b      	ldrh	r3, [r3, #2]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10c      	bne.n	800aa7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f911 	bl	800ac92 <USBD_CtlSendStatus>
      }
      break;
 800aa70:	e004      	b.n	800aa7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f843 	bl	800ab00 <USBD_CtlError>
      break;
 800aa7a:	e000      	b.n	800aa7e <USBD_ClrFeature+0x3a>
      break;
 800aa7c:	bf00      	nop
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781a      	ldrb	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	785a      	ldrb	r2, [r3, #1]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3303      	adds	r3, #3
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	4413      	add	r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3305      	adds	r3, #5
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	b29b      	uxth	r3, r3
 800aad0:	4413      	add	r3, r2
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	3306      	adds	r3, #6
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b29a      	uxth	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	3307      	adds	r3, #7
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4413      	add	r3, r2
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	80da      	strh	r2, [r3, #6]

}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ab0a:	2180      	movs	r1, #128	; 0x80
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fc83 	bl	800b418 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ab12:	2100      	movs	r1, #0
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fc7f 	bl	800b418 <USBD_LL_StallEP>
}
 800ab1a:	bf00      	nop
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b086      	sub	sp, #24
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d032      	beq.n	800ab9e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f834 	bl	800aba6 <USBD_GetLen>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	3301      	adds	r3, #1
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	75fa      	strb	r2, [r7, #23]
 800ab52:	461a      	mov	r2, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	4413      	add	r3, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	75fa      	strb	r2, [r7, #23]
 800ab64:	461a      	mov	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4413      	add	r3, r2
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab6e:	e012      	b.n	800ab96 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	60fa      	str	r2, [r7, #12]
 800ab76:	7dfa      	ldrb	r2, [r7, #23]
 800ab78:	1c51      	adds	r1, r2, #1
 800ab7a:	75f9      	strb	r1, [r7, #23]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	440a      	add	r2, r1
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	75fa      	strb	r2, [r7, #23]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	4413      	add	r3, r2
 800ab92:	2200      	movs	r2, #0
 800ab94:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e8      	bne.n	800ab70 <USBD_GetString+0x4e>
    }
  }
}
 800ab9e:	bf00      	nop
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b085      	sub	sp, #20
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800abb2:	e005      	b.n	800abc0 <USBD_GetLen+0x1a>
  {
    len++;
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	3301      	adds	r3, #1
 800abb8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3301      	adds	r3, #1
 800abbe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1f5      	bne.n	800abb4 <USBD_GetLen+0xe>
  }

  return len;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	4613      	mov	r3, r2
 800abe2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abec:	88fa      	ldrh	r2, [r7, #6]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800abf2:	88fa      	ldrh	r2, [r7, #6]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	2100      	movs	r1, #0
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 fc94 	bl	800b52c <USBD_LL_Transmit>

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	2100      	movs	r1, #0
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 fc82 	bl	800b52c <USBD_LL_Transmit>

  return USBD_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2203      	movs	r2, #3
 800ac44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac48:	88fa      	ldrh	r2, [r7, #6]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ac50:	88fa      	ldrh	r2, [r7, #6]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fc87 	bl	800b572 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	2100      	movs	r1, #0
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 fc75 	bl	800b572 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aca2:	2300      	movs	r3, #0
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc3f 	bl	800b52c <USBD_LL_Transmit>

  return USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2205      	movs	r2, #5
 800acc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acc8:	2300      	movs	r3, #0
 800acca:	2200      	movs	r2, #0
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fc4f 	bl	800b572 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ace4:	2200      	movs	r2, #0
 800ace6:	4912      	ldr	r1, [pc, #72]	; (800ad30 <MX_USB_DEVICE_Init+0x50>)
 800ace8:	4812      	ldr	r0, [pc, #72]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800acea:	f7fe ff57 	bl	8009b9c <USBD_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acf4:	f7f6 fd92 	bl	800181c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800acf8:	490f      	ldr	r1, [pc, #60]	; (800ad38 <MX_USB_DEVICE_Init+0x58>)
 800acfa:	480e      	ldr	r0, [pc, #56]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800acfc:	f7fe ff79 	bl	8009bf2 <USBD_RegisterClass>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad06:	f7f6 fd89 	bl	800181c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad0a:	490c      	ldr	r1, [pc, #48]	; (800ad3c <MX_USB_DEVICE_Init+0x5c>)
 800ad0c:	4809      	ldr	r0, [pc, #36]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800ad0e:	f7fe fea7 	bl	8009a60 <USBD_CDC_RegisterInterface>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad18:	f7f6 fd80 	bl	800181c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad1c:	4805      	ldr	r0, [pc, #20]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800ad1e:	f7fe ff82 	bl	8009c26 <USBD_Start>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad28:	f7f6 fd78 	bl	800181c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad2c:	bf00      	nop
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	2000012c 	.word	0x2000012c
 800ad34:	200005b8 	.word	0x200005b8
 800ad38:	20000018 	.word	0x20000018
 800ad3c:	2000011c 	.word	0x2000011c

0800ad40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad44:	2200      	movs	r2, #0
 800ad46:	4905      	ldr	r1, [pc, #20]	; (800ad5c <CDC_Init_FS+0x1c>)
 800ad48:	4805      	ldr	r0, [pc, #20]	; (800ad60 <CDC_Init_FS+0x20>)
 800ad4a:	f7fe fea0 	bl	8009a8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad4e:	4905      	ldr	r1, [pc, #20]	; (800ad64 <CDC_Init_FS+0x24>)
 800ad50:	4803      	ldr	r0, [pc, #12]	; (800ad60 <CDC_Init_FS+0x20>)
 800ad52:	f7fe feb6 	bl	8009ac2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000c64 	.word	0x20000c64
 800ad60:	200005b8 	.word	0x200005b8
 800ad64:	2000087c 	.word	0x2000087c

0800ad68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b23      	cmp	r3, #35	; 0x23
 800ad8c:	d84a      	bhi.n	800ae24 <CDC_Control_FS+0xac>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <CDC_Control_FS+0x1c>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae25 	.word	0x0800ae25
 800ad98:	0800ae25 	.word	0x0800ae25
 800ad9c:	0800ae25 	.word	0x0800ae25
 800ada0:	0800ae25 	.word	0x0800ae25
 800ada4:	0800ae25 	.word	0x0800ae25
 800ada8:	0800ae25 	.word	0x0800ae25
 800adac:	0800ae25 	.word	0x0800ae25
 800adb0:	0800ae25 	.word	0x0800ae25
 800adb4:	0800ae25 	.word	0x0800ae25
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800ae25 	.word	0x0800ae25
 800adc4:	0800ae25 	.word	0x0800ae25
 800adc8:	0800ae25 	.word	0x0800ae25
 800adcc:	0800ae25 	.word	0x0800ae25
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ae25 	.word	0x0800ae25
 800addc:	0800ae25 	.word	0x0800ae25
 800ade0:	0800ae25 	.word	0x0800ae25
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae25 	.word	0x0800ae25
 800adec:	0800ae25 	.word	0x0800ae25
 800adf0:	0800ae25 	.word	0x0800ae25
 800adf4:	0800ae25 	.word	0x0800ae25
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	0800ae25 	.word	0x0800ae25
 800ae00:	0800ae25 	.word	0x0800ae25
 800ae04:	0800ae25 	.word	0x0800ae25
 800ae08:	0800ae25 	.word	0x0800ae25
 800ae0c:	0800ae25 	.word	0x0800ae25
 800ae10:	0800ae25 	.word	0x0800ae25
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae25 	.word	0x0800ae25
 800ae1c:	0800ae25 	.word	0x0800ae25
 800ae20:	0800ae25 	.word	0x0800ae25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae24:	bf00      	nop
  }

  return (USBD_OK);
 800ae26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4808      	ldr	r0, [pc, #32]	; (800ae64 <CDC_Receive_FS+0x30>)
 800ae42:	f7fe fe3e 	bl	8009ac2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae46:	4807      	ldr	r0, [pc, #28]	; (800ae64 <CDC_Receive_FS+0x30>)
 800ae48:	f7fe fe7e 	bl	8009b48 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,*Len);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7f6 f936 	bl	80010c4 <CDC_ReceiveCallback>
  return (USBD_OK);
 800ae58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	200005b8 	.word	0x200005b8

0800ae68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <CDC_Transmit_FS+0x48>)
 800ae7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e00b      	b.n	800aea6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae8e:	887b      	ldrh	r3, [r7, #2]
 800ae90:	461a      	mov	r2, r3
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4806      	ldr	r0, [pc, #24]	; (800aeb0 <CDC_Transmit_FS+0x48>)
 800ae96:	f7fe fdfa 	bl	8009a8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae9a:	4805      	ldr	r0, [pc, #20]	; (800aeb0 <CDC_Transmit_FS+0x48>)
 800ae9c:	f7fe fe25 	bl	8009aea <USBD_CDC_TransmitPacket>
 800aea0:	4603      	mov	r3, r0
 800aea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	200005b8 	.word	0x200005b8

0800aeb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2212      	movs	r2, #18
 800aec4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aec6:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	20000148 	.word	0x20000148

0800aed8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	6039      	str	r1, [r7, #0]
 800aee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2204      	movs	r2, #4
 800aee8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aeea:	4b03      	ldr	r3, [pc, #12]	; (800aef8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	2000015c 	.word	0x2000015c

0800aefc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	6039      	str	r1, [r7, #0]
 800af06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d105      	bne.n	800af1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	4907      	ldr	r1, [pc, #28]	; (800af30 <USBD_FS_ProductStrDescriptor+0x34>)
 800af12:	4808      	ldr	r0, [pc, #32]	; (800af34 <USBD_FS_ProductStrDescriptor+0x38>)
 800af14:	f7ff fe05 	bl	800ab22 <USBD_GetString>
 800af18:	e004      	b.n	800af24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	4904      	ldr	r1, [pc, #16]	; (800af30 <USBD_FS_ProductStrDescriptor+0x34>)
 800af1e:	4805      	ldr	r0, [pc, #20]	; (800af34 <USBD_FS_ProductStrDescriptor+0x38>)
 800af20:	f7ff fdff 	bl	800ab22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af24:	4b02      	ldr	r3, [pc, #8]	; (800af30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	2000104c 	.word	0x2000104c
 800af34:	0800c760 	.word	0x0800c760

0800af38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	6039      	str	r1, [r7, #0]
 800af42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	4904      	ldr	r1, [pc, #16]	; (800af58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af48:	4804      	ldr	r0, [pc, #16]	; (800af5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af4a:	f7ff fdea 	bl	800ab22 <USBD_GetString>
  return USBD_StrDesc;
 800af4e:	4b02      	ldr	r3, [pc, #8]	; (800af58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	2000104c 	.word	0x2000104c
 800af5c:	0800c770 	.word	0x0800c770

0800af60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	6039      	str	r1, [r7, #0]
 800af6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	221a      	movs	r2, #26
 800af70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af72:	f000 f843 	bl	800affc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af76:	4b02      	ldr	r3, [pc, #8]	; (800af80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20000160 	.word	0x20000160

0800af84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	6039      	str	r1, [r7, #0]
 800af8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af90:	79fb      	ldrb	r3, [r7, #7]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d105      	bne.n	800afa2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4907      	ldr	r1, [pc, #28]	; (800afb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af9a:	4808      	ldr	r0, [pc, #32]	; (800afbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800af9c:	f7ff fdc1 	bl	800ab22 <USBD_GetString>
 800afa0:	e004      	b.n	800afac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	4904      	ldr	r1, [pc, #16]	; (800afb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afa6:	4805      	ldr	r0, [pc, #20]	; (800afbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800afa8:	f7ff fdbb 	bl	800ab22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afac:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	2000104c 	.word	0x2000104c
 800afbc:	0800c784 	.word	0x0800c784

0800afc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	6039      	str	r1, [r7, #0]
 800afca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	4907      	ldr	r1, [pc, #28]	; (800aff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afd6:	4808      	ldr	r0, [pc, #32]	; (800aff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afd8:	f7ff fda3 	bl	800ab22 <USBD_GetString>
 800afdc:	e004      	b.n	800afe8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	4904      	ldr	r1, [pc, #16]	; (800aff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afe2:	4805      	ldr	r0, [pc, #20]	; (800aff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afe4:	f7ff fd9d 	bl	800ab22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	2000104c 	.word	0x2000104c
 800aff8:	0800c790 	.word	0x0800c790

0800affc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <Get_SerialNum+0x44>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b008:	4b0e      	ldr	r3, [pc, #56]	; (800b044 <Get_SerialNum+0x48>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <Get_SerialNum+0x4c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4413      	add	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d009      	beq.n	800b036 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b022:	2208      	movs	r2, #8
 800b024:	4909      	ldr	r1, [pc, #36]	; (800b04c <Get_SerialNum+0x50>)
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 f814 	bl	800b054 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b02c:	2204      	movs	r2, #4
 800b02e:	4908      	ldr	r1, [pc, #32]	; (800b050 <Get_SerialNum+0x54>)
 800b030:	68b8      	ldr	r0, [r7, #8]
 800b032:	f000 f80f 	bl	800b054 <IntToUnicode>
  }
}
 800b036:	bf00      	nop
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	1ffff7ac 	.word	0x1ffff7ac
 800b044:	1ffff7b0 	.word	0x1ffff7b0
 800b048:	1ffff7b4 	.word	0x1ffff7b4
 800b04c:	20000162 	.word	0x20000162
 800b050:	20000172 	.word	0x20000172

0800b054 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	4613      	mov	r3, r2
 800b060:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
 800b06a:	e027      	b.n	800b0bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	0f1b      	lsrs	r3, r3, #28
 800b070:	2b09      	cmp	r3, #9
 800b072:	d80b      	bhi.n	800b08c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	0f1b      	lsrs	r3, r3, #28
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	4619      	mov	r1, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	440b      	add	r3, r1
 800b084:	3230      	adds	r2, #48	; 0x30
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	e00a      	b.n	800b0a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0f1b      	lsrs	r3, r3, #28
 800b090:	b2da      	uxtb	r2, r3
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	4619      	mov	r1, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	440b      	add	r3, r1
 800b09c:	3237      	adds	r2, #55	; 0x37
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	75fb      	strb	r3, [r7, #23]
 800b0bc:	7dfa      	ldrb	r2, [r7, #23]
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d3d3      	bcc.n	800b06c <IntToUnicode+0x18>
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	605a      	str	r2, [r3, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a1c      	ldr	r2, [pc, #112]	; (800b164 <HAL_PCD_MspInit+0x90>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d131      	bne.n	800b15a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0f6:	4b1c      	ldr	r3, [pc, #112]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	4a1b      	ldr	r2, [pc, #108]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b0fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b100:	6153      	str	r3, [r2, #20]
 800b102:	4b19      	ldr	r3, [pc, #100]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b10e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b114:	2302      	movs	r3, #2
 800b116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b118:	2300      	movs	r3, #0
 800b11a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b11c:	2303      	movs	r3, #3
 800b11e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b120:	230e      	movs	r3, #14
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b124:	f107 0314 	add.w	r3, r7, #20
 800b128:	4619      	mov	r1, r3
 800b12a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b12e:	f7f8 fa1b 	bl	8003568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b132:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	4a0c      	ldr	r2, [pc, #48]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b13c:	61d3      	str	r3, [r2, #28]
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <HAL_PCD_MspInit+0x94>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b14a:	2200      	movs	r2, #0
 800b14c:	2100      	movs	r1, #0
 800b14e:	2014      	movs	r0, #20
 800b150:	f7f7 fddf 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b154:	2014      	movs	r0, #20
 800b156:	f7f7 fdf8 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b15a:	bf00      	nop
 800b15c:	3728      	adds	r7, #40	; 0x28
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	40005c00 	.word	0x40005c00
 800b168:	40021000 	.word	0x40021000

0800b16c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b180:	4619      	mov	r1, r3
 800b182:	4610      	mov	r0, r2
 800b184:	f7fe fd98 	bl	8009cb8 <USBD_LL_SetupStage>
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	440b      	add	r3, r1
 800b1b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	f7fe fdca 	bl	8009d52 <USBD_LL_DataOutStage>
}
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b1d8:	78fa      	ldrb	r2, [r7, #3]
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	440b      	add	r3, r1
 800b1e6:	333c      	adds	r3, #60	; 0x3c
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f7fe fe21 	bl	8009e34 <USBD_LL_DataInStage>
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe ff34 	bl	800a076 <USBD_LL_SOF>
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b21e:	2301      	movs	r3, #1
 800b220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d001      	beq.n	800b22e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b22a:	f7f6 faf7 	bl	800181c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b234:	7bfa      	ldrb	r2, [r7, #15]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fee1 	bl	800a000 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe fe9a 	bl	8009f7e <USBD_LL_Reset>
}
 800b24a:	bf00      	nop
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fedc 	bl	800a020 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <HAL_PCD_SuspendCallback+0x30>)
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	4a03      	ldr	r2, [pc, #12]	; (800b284 <HAL_PCD_SuspendCallback+0x30>)
 800b276:	f043 0306 	orr.w	r3, r3, #6
 800b27a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	e000ed00 	.word	0xe000ed00

0800b288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe fed7 	bl	800a04a <USBD_LL_Resume>
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b2ac:	4a28      	ldr	r2, [pc, #160]	; (800b350 <USBD_LL_Init+0xac>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a26      	ldr	r2, [pc, #152]	; (800b350 <USBD_LL_Init+0xac>)
 800b2b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b2bc:	4b24      	ldr	r3, [pc, #144]	; (800b350 <USBD_LL_Init+0xac>)
 800b2be:	4a25      	ldr	r2, [pc, #148]	; (800b354 <USBD_LL_Init+0xb0>)
 800b2c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <USBD_LL_Init+0xac>)
 800b2c4:	2208      	movs	r2, #8
 800b2c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2c8:	4b21      	ldr	r3, [pc, #132]	; (800b350 <USBD_LL_Init+0xac>)
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2ce:	4b20      	ldr	r3, [pc, #128]	; (800b350 <USBD_LL_Init+0xac>)
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2d4:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <USBD_LL_Init+0xac>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b2da:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <USBD_LL_Init+0xac>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b2e0:	481b      	ldr	r0, [pc, #108]	; (800b350 <USBD_LL_Init+0xac>)
 800b2e2:	f7f8 fb05 	bl	80038f0 <HAL_PCD_Init>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b2ec:	f7f6 fa96 	bl	800181c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2f6:	2318      	movs	r3, #24
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	f7f9 fdaf 	bl	8004e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b306:	2358      	movs	r3, #88	; 0x58
 800b308:	2200      	movs	r2, #0
 800b30a:	2180      	movs	r1, #128	; 0x80
 800b30c:	f7f9 fda7 	bl	8004e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b316:	23c0      	movs	r3, #192	; 0xc0
 800b318:	2200      	movs	r2, #0
 800b31a:	2181      	movs	r1, #129	; 0x81
 800b31c:	f7f9 fd9f 	bl	8004e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b326:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b32a:	2200      	movs	r2, #0
 800b32c:	2101      	movs	r1, #1
 800b32e:	f7f9 fd96 	bl	8004e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b33c:	2200      	movs	r2, #0
 800b33e:	2182      	movs	r1, #130	; 0x82
 800b340:	f7f9 fd8d 	bl	8004e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	2000124c 	.word	0x2000124c
 800b354:	40005c00 	.word	0x40005c00

0800b358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f8 fb9c 	bl	8003aac <HAL_PCD_Start>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 f954 	bl	800b628 <USBD_Get_USB_Status>
 800b380:	4603      	mov	r3, r0
 800b382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b384:	7bbb      	ldrb	r3, [r7, #14]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	461a      	mov	r2, r3
 800b39c:	4603      	mov	r3, r0
 800b39e:	70fb      	strb	r3, [r7, #3]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70bb      	strb	r3, [r7, #2]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3b6:	78bb      	ldrb	r3, [r7, #2]
 800b3b8:	883a      	ldrh	r2, [r7, #0]
 800b3ba:	78f9      	ldrb	r1, [r7, #3]
 800b3bc:	f7f8 fcb8 	bl	8003d30 <HAL_PCD_EP_Open>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 f92e 	bl	800b628 <USBD_Get_USB_Status>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3f4:	78fa      	ldrb	r2, [r7, #3]
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f8 fcff 	bl	8003dfc <HAL_PCD_EP_Close>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f90f 	bl	800b628 <USBD_Get_USB_Status>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7f8 fdc0 	bl	8003fbc <HAL_PCD_EP_SetStall>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f8f0 	bl	800b628 <USBD_Get_USB_Status>
 800b448:	4603      	mov	r3, r0
 800b44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	460b      	mov	r3, r1
 800b460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b470:	78fa      	ldrb	r2, [r7, #3]
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7f8 fdf3 	bl	8004060 <HAL_PCD_EP_ClrStall>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f8d1 	bl	800b628 <USBD_Get_USB_Status>
 800b486:	4603      	mov	r3, r0
 800b488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da0c      	bge.n	800b4ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b6:	68f9      	ldr	r1, [r7, #12]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	440b      	add	r3, r1
 800b4c4:	3302      	adds	r3, #2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	e00b      	b.n	800b4e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	440b      	add	r3, r1
 800b4dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b4e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	4611      	mov	r1, r2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7f8 fbea 	bl	8003ce6 <HAL_PCD_SetAddress>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 f885 	bl	800b628 <USBD_Get_USB_Status>
 800b51e:	4603      	mov	r3, r0
 800b520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b522:	7bbb      	ldrb	r3, [r7, #14]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	607a      	str	r2, [r7, #4]
 800b536:	461a      	mov	r2, r3
 800b538:	460b      	mov	r3, r1
 800b53a:	72fb      	strb	r3, [r7, #11]
 800b53c:	4613      	mov	r3, r2
 800b53e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b54e:	893b      	ldrh	r3, [r7, #8]
 800b550:	7af9      	ldrb	r1, [r7, #11]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	f7f8 fcef 	bl	8003f36 <HAL_PCD_EP_Transmit>
 800b558:	4603      	mov	r3, r0
 800b55a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 f862 	bl	800b628 <USBD_Get_USB_Status>
 800b564:	4603      	mov	r3, r0
 800b566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b568:	7dbb      	ldrb	r3, [r7, #22]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b086      	sub	sp, #24
 800b576:	af00      	add	r7, sp, #0
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	461a      	mov	r2, r3
 800b57e:	460b      	mov	r3, r1
 800b580:	72fb      	strb	r3, [r7, #11]
 800b582:	4613      	mov	r3, r2
 800b584:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b594:	893b      	ldrh	r3, [r7, #8]
 800b596:	7af9      	ldrb	r1, [r7, #11]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	f7f8 fc77 	bl	8003e8c <HAL_PCD_EP_Receive>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f83f 	bl	800b628 <USBD_Get_USB_Status>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f8 fc99 	bl	8003f06 <HAL_PCD_EP_GetRxCount>
 800b5d4:	4603      	mov	r3, r0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5e8:	4b03      	ldr	r3, [pc, #12]	; (800b5f8 <USBD_static_malloc+0x18>)
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	200001a0 	.word	0x200001a0

0800b5fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]

}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	2b03      	cmp	r3, #3
 800b63a:	d817      	bhi.n	800b66c <USBD_Get_USB_Status+0x44>
 800b63c:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <USBD_Get_USB_Status+0x1c>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b655 	.word	0x0800b655
 800b648:	0800b65b 	.word	0x0800b65b
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b667 	.word	0x0800b667
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73fb      	strb	r3, [r7, #15]
    break;
 800b658:	e00b      	b.n	800b672 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b65a:	2302      	movs	r3, #2
 800b65c:	73fb      	strb	r3, [r7, #15]
    break;
 800b65e:	e008      	b.n	800b672 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b660:	2301      	movs	r3, #1
 800b662:	73fb      	strb	r3, [r7, #15]
    break;
 800b664:	e005      	b.n	800b672 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b666:	2302      	movs	r3, #2
 800b668:	73fb      	strb	r3, [r7, #15]
    break;
 800b66a:	e002      	b.n	800b672 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b66c:	2302      	movs	r3, #2
 800b66e:	73fb      	strb	r3, [r7, #15]
    break;
 800b670:	bf00      	nop
  }
  return usb_status;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <__libc_init_array>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4d0d      	ldr	r5, [pc, #52]	; (800b6b8 <__libc_init_array+0x38>)
 800b684:	4c0d      	ldr	r4, [pc, #52]	; (800b6bc <__libc_init_array+0x3c>)
 800b686:	1b64      	subs	r4, r4, r5
 800b688:	10a4      	asrs	r4, r4, #2
 800b68a:	2600      	movs	r6, #0
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	d109      	bne.n	800b6a4 <__libc_init_array+0x24>
 800b690:	4d0b      	ldr	r5, [pc, #44]	; (800b6c0 <__libc_init_array+0x40>)
 800b692:	4c0c      	ldr	r4, [pc, #48]	; (800b6c4 <__libc_init_array+0x44>)
 800b694:	f001 f856 	bl	800c744 <_init>
 800b698:	1b64      	subs	r4, r4, r5
 800b69a:	10a4      	asrs	r4, r4, #2
 800b69c:	2600      	movs	r6, #0
 800b69e:	42a6      	cmp	r6, r4
 800b6a0:	d105      	bne.n	800b6ae <__libc_init_array+0x2e>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a8:	4798      	blx	r3
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7ee      	b.n	800b68c <__libc_init_array+0xc>
 800b6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b2:	4798      	blx	r3
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	e7f2      	b.n	800b69e <__libc_init_array+0x1e>
 800b6b8:	0800c9a8 	.word	0x0800c9a8
 800b6bc:	0800c9a8 	.word	0x0800c9a8
 800b6c0:	0800c9a8 	.word	0x0800c9a8
 800b6c4:	0800c9ac 	.word	0x0800c9ac

0800b6c8 <memset>:
 800b6c8:	4402      	add	r2, r0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d100      	bne.n	800b6d2 <memset+0xa>
 800b6d0:	4770      	bx	lr
 800b6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d6:	e7f9      	b.n	800b6cc <memset+0x4>

0800b6d8 <sin>:
 800b6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6da:	ec53 2b10 	vmov	r2, r3, d0
 800b6de:	4826      	ldr	r0, [pc, #152]	; (800b778 <sin+0xa0>)
 800b6e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6e4:	4281      	cmp	r1, r0
 800b6e6:	dc07      	bgt.n	800b6f8 <sin+0x20>
 800b6e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b770 <sin+0x98>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f000 fe5b 	bl	800c3a8 <__kernel_sin>
 800b6f2:	ec51 0b10 	vmov	r0, r1, d0
 800b6f6:	e007      	b.n	800b708 <sin+0x30>
 800b6f8:	4820      	ldr	r0, [pc, #128]	; (800b77c <sin+0xa4>)
 800b6fa:	4281      	cmp	r1, r0
 800b6fc:	dd09      	ble.n	800b712 <sin+0x3a>
 800b6fe:	ee10 0a10 	vmov	r0, s0
 800b702:	4619      	mov	r1, r3
 800b704:	f7f4 fd64 	bl	80001d0 <__aeabi_dsub>
 800b708:	ec41 0b10 	vmov	d0, r0, r1
 800b70c:	b005      	add	sp, #20
 800b70e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b712:	4668      	mov	r0, sp
 800b714:	f000 f834 	bl	800b780 <__ieee754_rem_pio2>
 800b718:	f000 0003 	and.w	r0, r0, #3
 800b71c:	2801      	cmp	r0, #1
 800b71e:	d008      	beq.n	800b732 <sin+0x5a>
 800b720:	2802      	cmp	r0, #2
 800b722:	d00d      	beq.n	800b740 <sin+0x68>
 800b724:	b9d0      	cbnz	r0, 800b75c <sin+0x84>
 800b726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b72a:	ed9d 0b00 	vldr	d0, [sp]
 800b72e:	2001      	movs	r0, #1
 800b730:	e7dd      	b.n	800b6ee <sin+0x16>
 800b732:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b736:	ed9d 0b00 	vldr	d0, [sp]
 800b73a:	f000 fa2d 	bl	800bb98 <__kernel_cos>
 800b73e:	e7d8      	b.n	800b6f2 <sin+0x1a>
 800b740:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b744:	ed9d 0b00 	vldr	d0, [sp]
 800b748:	2001      	movs	r0, #1
 800b74a:	f000 fe2d 	bl	800c3a8 <__kernel_sin>
 800b74e:	ec53 2b10 	vmov	r2, r3, d0
 800b752:	ee10 0a10 	vmov	r0, s0
 800b756:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b75a:	e7d5      	b.n	800b708 <sin+0x30>
 800b75c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b760:	ed9d 0b00 	vldr	d0, [sp]
 800b764:	f000 fa18 	bl	800bb98 <__kernel_cos>
 800b768:	e7f1      	b.n	800b74e <sin+0x76>
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w
	...
 800b778:	3fe921fb 	.word	0x3fe921fb
 800b77c:	7fefffff 	.word	0x7fefffff

0800b780 <__ieee754_rem_pio2>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	ed2d 8b02 	vpush	{d8}
 800b788:	ec55 4b10 	vmov	r4, r5, d0
 800b78c:	4bca      	ldr	r3, [pc, #808]	; (800bab8 <__ieee754_rem_pio2+0x338>)
 800b78e:	b08b      	sub	sp, #44	; 0x2c
 800b790:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b794:	4598      	cmp	r8, r3
 800b796:	4682      	mov	sl, r0
 800b798:	9502      	str	r5, [sp, #8]
 800b79a:	dc08      	bgt.n	800b7ae <__ieee754_rem_pio2+0x2e>
 800b79c:	2200      	movs	r2, #0
 800b79e:	2300      	movs	r3, #0
 800b7a0:	ed80 0b00 	vstr	d0, [r0]
 800b7a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7a8:	f04f 0b00 	mov.w	fp, #0
 800b7ac:	e028      	b.n	800b800 <__ieee754_rem_pio2+0x80>
 800b7ae:	4bc3      	ldr	r3, [pc, #780]	; (800babc <__ieee754_rem_pio2+0x33c>)
 800b7b0:	4598      	cmp	r8, r3
 800b7b2:	dc78      	bgt.n	800b8a6 <__ieee754_rem_pio2+0x126>
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	4ec2      	ldr	r6, [pc, #776]	; (800bac0 <__ieee754_rem_pio2+0x340>)
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	ee10 0a10 	vmov	r0, s0
 800b7be:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	dd39      	ble.n	800b83c <__ieee754_rem_pio2+0xbc>
 800b7c8:	f7f4 fd02 	bl	80001d0 <__aeabi_dsub>
 800b7cc:	45b0      	cmp	r8, r6
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	d01b      	beq.n	800b80c <__ieee754_rem_pio2+0x8c>
 800b7d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	f7f4 fcf9 	bl	80001d0 <__aeabi_dsub>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	e9ca 2300 	strd	r2, r3, [sl]
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f4 fcf1 	bl	80001d0 <__aeabi_dsub>
 800b7ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f4 fcec 	bl	80001d0 <__aeabi_dsub>
 800b7f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7fc:	f04f 0b01 	mov.w	fp, #1
 800b800:	4658      	mov	r0, fp
 800b802:	b00b      	add	sp, #44	; 0x2c
 800b804:	ecbd 8b02 	vpop	{d8}
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x310>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f7f4 fcdd 	bl	80001d0 <__aeabi_dsub>
 800b816:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4604      	mov	r4, r0
 800b81e:	460d      	mov	r5, r1
 800b820:	f7f4 fcd6 	bl	80001d0 <__aeabi_dsub>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	e9ca 2300 	strd	r2, r3, [sl]
 800b82c:	4620      	mov	r0, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	f7f4 fcce 	bl	80001d0 <__aeabi_dsub>
 800b834:	a398      	add	r3, pc, #608	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	e7db      	b.n	800b7f4 <__ieee754_rem_pio2+0x74>
 800b83c:	f7f4 fcca 	bl	80001d4 <__adddf3>
 800b840:	45b0      	cmp	r8, r6
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	d016      	beq.n	800b876 <__ieee754_rem_pio2+0xf6>
 800b848:	a38f      	add	r3, pc, #572	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fcc1 	bl	80001d4 <__adddf3>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	e9ca 2300 	strd	r2, r3, [sl]
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fcb7 	bl	80001d0 <__aeabi_dsub>
 800b862:	a389      	add	r3, pc, #548	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fcb4 	bl	80001d4 <__adddf3>
 800b86c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b870:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b874:	e7c4      	b.n	800b800 <__ieee754_rem_pio2+0x80>
 800b876:	a386      	add	r3, pc, #536	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x310>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f7f4 fcaa 	bl	80001d4 <__adddf3>
 800b880:	a385      	add	r3, pc, #532	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	f7f4 fca3 	bl	80001d4 <__adddf3>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	e9ca 2300 	strd	r2, r3, [sl]
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f4 fc99 	bl	80001d0 <__aeabi_dsub>
 800b89e:	a37e      	add	r3, pc, #504	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	e7e0      	b.n	800b868 <__ieee754_rem_pio2+0xe8>
 800b8a6:	4b87      	ldr	r3, [pc, #540]	; (800bac4 <__ieee754_rem_pio2+0x344>)
 800b8a8:	4598      	cmp	r8, r3
 800b8aa:	f300 80d9 	bgt.w	800ba60 <__ieee754_rem_pio2+0x2e0>
 800b8ae:	f000 fe39 	bl	800c524 <fabs>
 800b8b2:	ec55 4b10 	vmov	r4, r5, d0
 800b8b6:	ee10 0a10 	vmov	r0, s0
 800b8ba:	a379      	add	r3, pc, #484	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x320>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7f4 fe3d 	bl	8000540 <__aeabi_dmul>
 800b8c6:	4b80      	ldr	r3, [pc, #512]	; (800bac8 <__ieee754_rem_pio2+0x348>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f7f4 fc83 	bl	80001d4 <__adddf3>
 800b8ce:	f7f5 f8d1 	bl	8000a74 <__aeabi_d2iz>
 800b8d2:	4683      	mov	fp, r0
 800b8d4:	f7f4 fdca 	bl	800046c <__aeabi_i2d>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	ec43 2b18 	vmov	d8, r2, r3
 800b8e0:	a367      	add	r3, pc, #412	; (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7f4 fe2b 	bl	8000540 <__aeabi_dmul>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	f7f4 fc6d 	bl	80001d0 <__aeabi_dsub>
 800b8f6:	a364      	add	r3, pc, #400	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	460f      	mov	r7, r1
 800b900:	ec51 0b18 	vmov	r0, r1, d8
 800b904:	f7f4 fe1c 	bl	8000540 <__aeabi_dmul>
 800b908:	f1bb 0f1f 	cmp.w	fp, #31
 800b90c:	4604      	mov	r4, r0
 800b90e:	460d      	mov	r5, r1
 800b910:	dc0d      	bgt.n	800b92e <__ieee754_rem_pio2+0x1ae>
 800b912:	4b6e      	ldr	r3, [pc, #440]	; (800bacc <__ieee754_rem_pio2+0x34c>)
 800b914:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	4543      	cmp	r3, r8
 800b91e:	d006      	beq.n	800b92e <__ieee754_rem_pio2+0x1ae>
 800b920:	4622      	mov	r2, r4
 800b922:	462b      	mov	r3, r5
 800b924:	4630      	mov	r0, r6
 800b926:	4639      	mov	r1, r7
 800b928:	f7f4 fc52 	bl	80001d0 <__aeabi_dsub>
 800b92c:	e00f      	b.n	800b94e <__ieee754_rem_pio2+0x1ce>
 800b92e:	462b      	mov	r3, r5
 800b930:	4622      	mov	r2, r4
 800b932:	4630      	mov	r0, r6
 800b934:	4639      	mov	r1, r7
 800b936:	f7f4 fc4b 	bl	80001d0 <__aeabi_dsub>
 800b93a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b944:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b948:	f1b8 0f10 	cmp.w	r8, #16
 800b94c:	dc02      	bgt.n	800b954 <__ieee754_rem_pio2+0x1d4>
 800b94e:	e9ca 0100 	strd	r0, r1, [sl]
 800b952:	e039      	b.n	800b9c8 <__ieee754_rem_pio2+0x248>
 800b954:	a34e      	add	r3, pc, #312	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x310>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	ec51 0b18 	vmov	r0, r1, d8
 800b95e:	f7f4 fdef 	bl	8000540 <__aeabi_dmul>
 800b962:	4604      	mov	r4, r0
 800b964:	460d      	mov	r5, r1
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f4 fc2f 	bl	80001d0 <__aeabi_dsub>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4680      	mov	r8, r0
 800b978:	4689      	mov	r9, r1
 800b97a:	4630      	mov	r0, r6
 800b97c:	4639      	mov	r1, r7
 800b97e:	f7f4 fc27 	bl	80001d0 <__aeabi_dsub>
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	f7f4 fc23 	bl	80001d0 <__aeabi_dsub>
 800b98a:	a343      	add	r3, pc, #268	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	ec51 0b18 	vmov	r0, r1, d8
 800b998:	f7f4 fdd2 	bl	8000540 <__aeabi_dmul>
 800b99c:	4622      	mov	r2, r4
 800b99e:	462b      	mov	r3, r5
 800b9a0:	f7f4 fc16 	bl	80001d0 <__aeabi_dsub>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	f7f4 fc0e 	bl	80001d0 <__aeabi_dsub>
 800b9b4:	9a03      	ldr	r2, [sp, #12]
 800b9b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	2b31      	cmp	r3, #49	; 0x31
 800b9be:	dc24      	bgt.n	800ba0a <__ieee754_rem_pio2+0x28a>
 800b9c0:	e9ca 0100 	strd	r0, r1, [sl]
 800b9c4:	4646      	mov	r6, r8
 800b9c6:	464f      	mov	r7, r9
 800b9c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4642      	mov	r2, r8
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fbfc 	bl	80001d0 <__aeabi_dsub>
 800b9d8:	462b      	mov	r3, r5
 800b9da:	4622      	mov	r2, r4
 800b9dc:	f7f4 fbf8 	bl	80001d0 <__aeabi_dsub>
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9e8:	f6bf af0a 	bge.w	800b800 <__ieee754_rem_pio2+0x80>
 800b9ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9f4:	f8ca 8000 	str.w	r8, [sl]
 800b9f8:	f8ca 0008 	str.w	r0, [sl, #8]
 800b9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba00:	f8ca 300c 	str.w	r3, [sl, #12]
 800ba04:	f1cb 0b00 	rsb	fp, fp, #0
 800ba08:	e6fa      	b.n	800b800 <__ieee754_rem_pio2+0x80>
 800ba0a:	a327      	add	r3, pc, #156	; (adr r3, 800baa8 <__ieee754_rem_pio2+0x328>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	ec51 0b18 	vmov	r0, r1, d8
 800ba14:	f7f4 fd94 	bl	8000540 <__aeabi_dmul>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4640      	mov	r0, r8
 800ba22:	4649      	mov	r1, r9
 800ba24:	f7f4 fbd4 	bl	80001d0 <__aeabi_dsub>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	4640      	mov	r0, r8
 800ba32:	4649      	mov	r1, r9
 800ba34:	f7f4 fbcc 	bl	80001d0 <__aeabi_dsub>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	f7f4 fbc8 	bl	80001d0 <__aeabi_dsub>
 800ba40:	a31b      	add	r3, pc, #108	; (adr r3, 800bab0 <__ieee754_rem_pio2+0x330>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	4604      	mov	r4, r0
 800ba48:	460d      	mov	r5, r1
 800ba4a:	ec51 0b18 	vmov	r0, r1, d8
 800ba4e:	f7f4 fd77 	bl	8000540 <__aeabi_dmul>
 800ba52:	4622      	mov	r2, r4
 800ba54:	462b      	mov	r3, r5
 800ba56:	f7f4 fbbb 	bl	80001d0 <__aeabi_dsub>
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	e75f      	b.n	800b920 <__ieee754_rem_pio2+0x1a0>
 800ba60:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <__ieee754_rem_pio2+0x350>)
 800ba62:	4598      	cmp	r8, r3
 800ba64:	dd36      	ble.n	800bad4 <__ieee754_rem_pio2+0x354>
 800ba66:	ee10 2a10 	vmov	r2, s0
 800ba6a:	462b      	mov	r3, r5
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7f4 fbae 	bl	80001d0 <__aeabi_dsub>
 800ba74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba78:	e9ca 0100 	strd	r0, r1, [sl]
 800ba7c:	e694      	b.n	800b7a8 <__ieee754_rem_pio2+0x28>
 800ba7e:	bf00      	nop
 800ba80:	54400000 	.word	0x54400000
 800ba84:	3ff921fb 	.word	0x3ff921fb
 800ba88:	1a626331 	.word	0x1a626331
 800ba8c:	3dd0b461 	.word	0x3dd0b461
 800ba90:	1a600000 	.word	0x1a600000
 800ba94:	3dd0b461 	.word	0x3dd0b461
 800ba98:	2e037073 	.word	0x2e037073
 800ba9c:	3ba3198a 	.word	0x3ba3198a
 800baa0:	6dc9c883 	.word	0x6dc9c883
 800baa4:	3fe45f30 	.word	0x3fe45f30
 800baa8:	2e000000 	.word	0x2e000000
 800baac:	3ba3198a 	.word	0x3ba3198a
 800bab0:	252049c1 	.word	0x252049c1
 800bab4:	397b839a 	.word	0x397b839a
 800bab8:	3fe921fb 	.word	0x3fe921fb
 800babc:	4002d97b 	.word	0x4002d97b
 800bac0:	3ff921fb 	.word	0x3ff921fb
 800bac4:	413921fb 	.word	0x413921fb
 800bac8:	3fe00000 	.word	0x3fe00000
 800bacc:	0800c7d0 	.word	0x0800c7d0
 800bad0:	7fefffff 	.word	0x7fefffff
 800bad4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bad8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800badc:	ee10 0a10 	vmov	r0, s0
 800bae0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bae4:	ee10 6a10 	vmov	r6, s0
 800bae8:	460f      	mov	r7, r1
 800baea:	f7f4 ffc3 	bl	8000a74 <__aeabi_d2iz>
 800baee:	f7f4 fcbd 	bl	800046c <__aeabi_i2d>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bafe:	f7f4 fb67 	bl	80001d0 <__aeabi_dsub>
 800bb02:	4b22      	ldr	r3, [pc, #136]	; (800bb8c <__ieee754_rem_pio2+0x40c>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	f7f4 fd1b 	bl	8000540 <__aeabi_dmul>
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	f7f4 ffb1 	bl	8000a74 <__aeabi_d2iz>
 800bb12:	f7f4 fcab 	bl	800046c <__aeabi_i2d>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb22:	f7f4 fb55 	bl	80001d0 <__aeabi_dsub>
 800bb26:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <__ieee754_rem_pio2+0x40c>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f7f4 fd09 	bl	8000540 <__aeabi_dmul>
 800bb2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb32:	ad04      	add	r5, sp, #16
 800bb34:	f04f 0803 	mov.w	r8, #3
 800bb38:	46a9      	mov	r9, r5
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	2700      	movs	r7, #0
 800bb3e:	4632      	mov	r2, r6
 800bb40:	463b      	mov	r3, r7
 800bb42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb46:	46c3      	mov	fp, r8
 800bb48:	3d08      	subs	r5, #8
 800bb4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb4e:	f7f4 ff5f 	bl	8000a10 <__aeabi_dcmpeq>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1f3      	bne.n	800bb3e <__ieee754_rem_pio2+0x3be>
 800bb56:	4b0e      	ldr	r3, [pc, #56]	; (800bb90 <__ieee754_rem_pio2+0x410>)
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	4622      	mov	r2, r4
 800bb60:	465b      	mov	r3, fp
 800bb62:	4651      	mov	r1, sl
 800bb64:	4648      	mov	r0, r9
 800bb66:	f000 f8df 	bl	800bd28 <__kernel_rem_pio2>
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	4683      	mov	fp, r0
 800bb70:	f6bf ae46 	bge.w	800b800 <__ieee754_rem_pio2+0x80>
 800bb74:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bb78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb7c:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb80:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bb84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb88:	e73a      	b.n	800ba00 <__ieee754_rem_pio2+0x280>
 800bb8a:	bf00      	nop
 800bb8c:	41700000 	.word	0x41700000
 800bb90:	0800c850 	.word	0x0800c850
 800bb94:	00000000 	.word	0x00000000

0800bb98 <__kernel_cos>:
 800bb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	ec57 6b10 	vmov	r6, r7, d0
 800bba0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bba4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bba8:	ed8d 1b00 	vstr	d1, [sp]
 800bbac:	da07      	bge.n	800bbbe <__kernel_cos+0x26>
 800bbae:	ee10 0a10 	vmov	r0, s0
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 ff5e 	bl	8000a74 <__aeabi_d2iz>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	f000 8088 	beq.w	800bcce <__kernel_cos+0x136>
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	f7f4 fcbb 	bl	8000540 <__aeabi_dmul>
 800bbca:	4b51      	ldr	r3, [pc, #324]	; (800bd10 <__kernel_cos+0x178>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	f7f4 fcb5 	bl	8000540 <__aeabi_dmul>
 800bbd6:	a340      	add	r3, pc, #256	; (adr r3, 800bcd8 <__kernel_cos+0x140>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	4682      	mov	sl, r0
 800bbde:	468b      	mov	fp, r1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f7f4 fcac 	bl	8000540 <__aeabi_dmul>
 800bbe8:	a33d      	add	r3, pc, #244	; (adr r3, 800bce0 <__kernel_cos+0x148>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 faf1 	bl	80001d4 <__adddf3>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	f7f4 fca3 	bl	8000540 <__aeabi_dmul>
 800bbfa:	a33b      	add	r3, pc, #236	; (adr r3, 800bce8 <__kernel_cos+0x150>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fae6 	bl	80001d0 <__aeabi_dsub>
 800bc04:	4622      	mov	r2, r4
 800bc06:	462b      	mov	r3, r5
 800bc08:	f7f4 fc9a 	bl	8000540 <__aeabi_dmul>
 800bc0c:	a338      	add	r3, pc, #224	; (adr r3, 800bcf0 <__kernel_cos+0x158>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f7f4 fadf 	bl	80001d4 <__adddf3>
 800bc16:	4622      	mov	r2, r4
 800bc18:	462b      	mov	r3, r5
 800bc1a:	f7f4 fc91 	bl	8000540 <__aeabi_dmul>
 800bc1e:	a336      	add	r3, pc, #216	; (adr r3, 800bcf8 <__kernel_cos+0x160>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f7f4 fad4 	bl	80001d0 <__aeabi_dsub>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	f7f4 fc88 	bl	8000540 <__aeabi_dmul>
 800bc30:	a333      	add	r3, pc, #204	; (adr r3, 800bd00 <__kernel_cos+0x168>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 facd 	bl	80001d4 <__adddf3>
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f7f4 fc7f 	bl	8000540 <__aeabi_dmul>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	f7f4 fc7b 	bl	8000540 <__aeabi_dmul>
 800bc4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	4630      	mov	r0, r6
 800bc54:	4639      	mov	r1, r7
 800bc56:	f7f4 fc73 	bl	8000540 <__aeabi_dmul>
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7f4 fab5 	bl	80001d0 <__aeabi_dsub>
 800bc66:	4b2b      	ldr	r3, [pc, #172]	; (800bd14 <__kernel_cos+0x17c>)
 800bc68:	4598      	cmp	r8, r3
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	460f      	mov	r7, r1
 800bc6e:	dc10      	bgt.n	800bc92 <__kernel_cos+0xfa>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4650      	mov	r0, sl
 800bc76:	4659      	mov	r1, fp
 800bc78:	f7f4 faaa 	bl	80001d0 <__aeabi_dsub>
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4926      	ldr	r1, [pc, #152]	; (800bd18 <__kernel_cos+0x180>)
 800bc80:	4602      	mov	r2, r0
 800bc82:	2000      	movs	r0, #0
 800bc84:	f7f4 faa4 	bl	80001d0 <__aeabi_dsub>
 800bc88:	ec41 0b10 	vmov	d0, r0, r1
 800bc8c:	b003      	add	sp, #12
 800bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc92:	4b22      	ldr	r3, [pc, #136]	; (800bd1c <__kernel_cos+0x184>)
 800bc94:	4920      	ldr	r1, [pc, #128]	; (800bd18 <__kernel_cos+0x180>)
 800bc96:	4598      	cmp	r8, r3
 800bc98:	bfcc      	ite	gt
 800bc9a:	4d21      	ldrgt	r5, [pc, #132]	; (800bd20 <__kernel_cos+0x188>)
 800bc9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bca0:	2400      	movs	r4, #0
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7f4 fa92 	bl	80001d0 <__aeabi_dsub>
 800bcac:	4622      	mov	r2, r4
 800bcae:	4680      	mov	r8, r0
 800bcb0:	4689      	mov	r9, r1
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	4650      	mov	r0, sl
 800bcb6:	4659      	mov	r1, fp
 800bcb8:	f7f4 fa8a 	bl	80001d0 <__aeabi_dsub>
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	f7f4 fa86 	bl	80001d0 <__aeabi_dsub>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4640      	mov	r0, r8
 800bcca:	4649      	mov	r1, r9
 800bccc:	e7da      	b.n	800bc84 <__kernel_cos+0xec>
 800bcce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bd08 <__kernel_cos+0x170>
 800bcd2:	e7db      	b.n	800bc8c <__kernel_cos+0xf4>
 800bcd4:	f3af 8000 	nop.w
 800bcd8:	be8838d4 	.word	0xbe8838d4
 800bcdc:	bda8fae9 	.word	0xbda8fae9
 800bce0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bce4:	3e21ee9e 	.word	0x3e21ee9e
 800bce8:	809c52ad 	.word	0x809c52ad
 800bcec:	3e927e4f 	.word	0x3e927e4f
 800bcf0:	19cb1590 	.word	0x19cb1590
 800bcf4:	3efa01a0 	.word	0x3efa01a0
 800bcf8:	16c15177 	.word	0x16c15177
 800bcfc:	3f56c16c 	.word	0x3f56c16c
 800bd00:	5555554c 	.word	0x5555554c
 800bd04:	3fa55555 	.word	0x3fa55555
 800bd08:	00000000 	.word	0x00000000
 800bd0c:	3ff00000 	.word	0x3ff00000
 800bd10:	3fe00000 	.word	0x3fe00000
 800bd14:	3fd33332 	.word	0x3fd33332
 800bd18:	3ff00000 	.word	0x3ff00000
 800bd1c:	3fe90000 	.word	0x3fe90000
 800bd20:	3fd20000 	.word	0x3fd20000
 800bd24:	00000000 	.word	0x00000000

0800bd28 <__kernel_rem_pio2>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	ed2d 8b02 	vpush	{d8}
 800bd30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bd34:	f112 0f14 	cmn.w	r2, #20
 800bd38:	9308      	str	r3, [sp, #32]
 800bd3a:	9101      	str	r1, [sp, #4]
 800bd3c:	4bc6      	ldr	r3, [pc, #792]	; (800c058 <__kernel_rem_pio2+0x330>)
 800bd3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bd40:	9009      	str	r0, [sp, #36]	; 0x24
 800bd42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	9b08      	ldr	r3, [sp, #32]
 800bd4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bd4e:	bfa8      	it	ge
 800bd50:	1ed4      	subge	r4, r2, #3
 800bd52:	9306      	str	r3, [sp, #24]
 800bd54:	bfb2      	itee	lt
 800bd56:	2400      	movlt	r4, #0
 800bd58:	2318      	movge	r3, #24
 800bd5a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd5e:	f06f 0317 	mvn.w	r3, #23
 800bd62:	fb04 3303 	mla	r3, r4, r3, r3
 800bd66:	eb03 0a02 	add.w	sl, r3, r2
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	9a06      	ldr	r2, [sp, #24]
 800bd6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c048 <__kernel_rem_pio2+0x320>
 800bd72:	eb03 0802 	add.w	r8, r3, r2
 800bd76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd78:	1aa7      	subs	r7, r4, r2
 800bd7a:	ae20      	add	r6, sp, #128	; 0x80
 800bd7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd80:	2500      	movs	r5, #0
 800bd82:	4545      	cmp	r5, r8
 800bd84:	dd18      	ble.n	800bdb8 <__kernel_rem_pio2+0x90>
 800bd86:	9b08      	ldr	r3, [sp, #32]
 800bd88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bd8c:	aa20      	add	r2, sp, #128	; 0x80
 800bd8e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c048 <__kernel_rem_pio2+0x320>
 800bd92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd96:	f1c3 0301 	rsb	r3, r3, #1
 800bd9a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	4443      	add	r3, r8
 800bda6:	429a      	cmp	r2, r3
 800bda8:	db2f      	blt.n	800be0a <__kernel_rem_pio2+0xe2>
 800bdaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bdb2:	462f      	mov	r7, r5
 800bdb4:	2600      	movs	r6, #0
 800bdb6:	e01b      	b.n	800bdf0 <__kernel_rem_pio2+0xc8>
 800bdb8:	42ef      	cmn	r7, r5
 800bdba:	d407      	bmi.n	800bdcc <__kernel_rem_pio2+0xa4>
 800bdbc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdc0:	f7f4 fb54 	bl	800046c <__aeabi_i2d>
 800bdc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdc8:	3501      	adds	r5, #1
 800bdca:	e7da      	b.n	800bd82 <__kernel_rem_pio2+0x5a>
 800bdcc:	ec51 0b18 	vmov	r0, r1, d8
 800bdd0:	e7f8      	b.n	800bdc4 <__kernel_rem_pio2+0x9c>
 800bdd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bdda:	f7f4 fbb1 	bl	8000540 <__aeabi_dmul>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde6:	f7f4 f9f5 	bl	80001d4 <__adddf3>
 800bdea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdee:	3601      	adds	r6, #1
 800bdf0:	9b06      	ldr	r3, [sp, #24]
 800bdf2:	429e      	cmp	r6, r3
 800bdf4:	f1a7 0708 	sub.w	r7, r7, #8
 800bdf8:	ddeb      	ble.n	800bdd2 <__kernel_rem_pio2+0xaa>
 800bdfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdfe:	3508      	adds	r5, #8
 800be00:	ecab 7b02 	vstmia	fp!, {d7}
 800be04:	f108 0801 	add.w	r8, r8, #1
 800be08:	e7ca      	b.n	800bda0 <__kernel_rem_pio2+0x78>
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	aa0c      	add	r2, sp, #48	; 0x30
 800be0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be12:	930b      	str	r3, [sp, #44]	; 0x2c
 800be14:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800be16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be1a:	9c04      	ldr	r4, [sp, #16]
 800be1c:	930a      	str	r3, [sp, #40]	; 0x28
 800be1e:	ab98      	add	r3, sp, #608	; 0x260
 800be20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be24:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800be28:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800be2c:	f8cd b008 	str.w	fp, [sp, #8]
 800be30:	4625      	mov	r5, r4
 800be32:	2d00      	cmp	r5, #0
 800be34:	dc78      	bgt.n	800bf28 <__kernel_rem_pio2+0x200>
 800be36:	ec47 6b10 	vmov	d0, r6, r7
 800be3a:	4650      	mov	r0, sl
 800be3c:	f000 fbfc 	bl	800c638 <scalbn>
 800be40:	ec57 6b10 	vmov	r6, r7, d0
 800be44:	2200      	movs	r2, #0
 800be46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800be4a:	ee10 0a10 	vmov	r0, s0
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fb76 	bl	8000540 <__aeabi_dmul>
 800be54:	ec41 0b10 	vmov	d0, r0, r1
 800be58:	f000 fb6e 	bl	800c538 <floor>
 800be5c:	4b7f      	ldr	r3, [pc, #508]	; (800c05c <__kernel_rem_pio2+0x334>)
 800be5e:	ec51 0b10 	vmov	r0, r1, d0
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fb6c 	bl	8000540 <__aeabi_dmul>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4630      	mov	r0, r6
 800be6e:	4639      	mov	r1, r7
 800be70:	f7f4 f9ae 	bl	80001d0 <__aeabi_dsub>
 800be74:	460f      	mov	r7, r1
 800be76:	4606      	mov	r6, r0
 800be78:	f7f4 fdfc 	bl	8000a74 <__aeabi_d2iz>
 800be7c:	9007      	str	r0, [sp, #28]
 800be7e:	f7f4 faf5 	bl	800046c <__aeabi_i2d>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 f9a1 	bl	80001d0 <__aeabi_dsub>
 800be8e:	f1ba 0f00 	cmp.w	sl, #0
 800be92:	4606      	mov	r6, r0
 800be94:	460f      	mov	r7, r1
 800be96:	dd70      	ble.n	800bf7a <__kernel_rem_pio2+0x252>
 800be98:	1e62      	subs	r2, r4, #1
 800be9a:	ab0c      	add	r3, sp, #48	; 0x30
 800be9c:	9d07      	ldr	r5, [sp, #28]
 800be9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bea2:	f1ca 0118 	rsb	r1, sl, #24
 800bea6:	fa40 f301 	asr.w	r3, r0, r1
 800beaa:	441d      	add	r5, r3
 800beac:	408b      	lsls	r3, r1
 800beae:	1ac0      	subs	r0, r0, r3
 800beb0:	ab0c      	add	r3, sp, #48	; 0x30
 800beb2:	9507      	str	r5, [sp, #28]
 800beb4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800beb8:	f1ca 0317 	rsb	r3, sl, #23
 800bebc:	fa40 f303 	asr.w	r3, r0, r3
 800bec0:	9302      	str	r3, [sp, #8]
 800bec2:	9b02      	ldr	r3, [sp, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dd66      	ble.n	800bf96 <__kernel_rem_pio2+0x26e>
 800bec8:	9b07      	ldr	r3, [sp, #28]
 800beca:	2200      	movs	r2, #0
 800becc:	3301      	adds	r3, #1
 800bece:	9307      	str	r3, [sp, #28]
 800bed0:	4615      	mov	r5, r2
 800bed2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bed6:	4294      	cmp	r4, r2
 800bed8:	f300 8099 	bgt.w	800c00e <__kernel_rem_pio2+0x2e6>
 800bedc:	f1ba 0f00 	cmp.w	sl, #0
 800bee0:	dd07      	ble.n	800bef2 <__kernel_rem_pio2+0x1ca>
 800bee2:	f1ba 0f01 	cmp.w	sl, #1
 800bee6:	f000 80a5 	beq.w	800c034 <__kernel_rem_pio2+0x30c>
 800beea:	f1ba 0f02 	cmp.w	sl, #2
 800beee:	f000 80c1 	beq.w	800c074 <__kernel_rem_pio2+0x34c>
 800bef2:	9b02      	ldr	r3, [sp, #8]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d14e      	bne.n	800bf96 <__kernel_rem_pio2+0x26e>
 800bef8:	4632      	mov	r2, r6
 800befa:	463b      	mov	r3, r7
 800befc:	4958      	ldr	r1, [pc, #352]	; (800c060 <__kernel_rem_pio2+0x338>)
 800befe:	2000      	movs	r0, #0
 800bf00:	f7f4 f966 	bl	80001d0 <__aeabi_dsub>
 800bf04:	4606      	mov	r6, r0
 800bf06:	460f      	mov	r7, r1
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	d044      	beq.n	800bf96 <__kernel_rem_pio2+0x26e>
 800bf0c:	4650      	mov	r0, sl
 800bf0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c050 <__kernel_rem_pio2+0x328>
 800bf12:	f000 fb91 	bl	800c638 <scalbn>
 800bf16:	4630      	mov	r0, r6
 800bf18:	4639      	mov	r1, r7
 800bf1a:	ec53 2b10 	vmov	r2, r3, d0
 800bf1e:	f7f4 f957 	bl	80001d0 <__aeabi_dsub>
 800bf22:	4606      	mov	r6, r0
 800bf24:	460f      	mov	r7, r1
 800bf26:	e036      	b.n	800bf96 <__kernel_rem_pio2+0x26e>
 800bf28:	4b4e      	ldr	r3, [pc, #312]	; (800c064 <__kernel_rem_pio2+0x33c>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	4639      	mov	r1, r7
 800bf30:	f7f4 fb06 	bl	8000540 <__aeabi_dmul>
 800bf34:	f7f4 fd9e 	bl	8000a74 <__aeabi_d2iz>
 800bf38:	f7f4 fa98 	bl	800046c <__aeabi_i2d>
 800bf3c:	4b4a      	ldr	r3, [pc, #296]	; (800c068 <__kernel_rem_pio2+0x340>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4680      	mov	r8, r0
 800bf42:	4689      	mov	r9, r1
 800bf44:	f7f4 fafc 	bl	8000540 <__aeabi_dmul>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 f93e 	bl	80001d0 <__aeabi_dsub>
 800bf54:	f7f4 fd8e 	bl	8000a74 <__aeabi_d2iz>
 800bf58:	9b02      	ldr	r3, [sp, #8]
 800bf5a:	f843 0b04 	str.w	r0, [r3], #4
 800bf5e:	3d01      	subs	r5, #1
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	ab70      	add	r3, sp, #448	; 0x1c0
 800bf64:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	4649      	mov	r1, r9
 800bf70:	f7f4 f930 	bl	80001d4 <__adddf3>
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	e75b      	b.n	800be32 <__kernel_rem_pio2+0x10a>
 800bf7a:	d105      	bne.n	800bf88 <__kernel_rem_pio2+0x260>
 800bf7c:	1e63      	subs	r3, r4, #1
 800bf7e:	aa0c      	add	r2, sp, #48	; 0x30
 800bf80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf84:	15c3      	asrs	r3, r0, #23
 800bf86:	e79b      	b.n	800bec0 <__kernel_rem_pio2+0x198>
 800bf88:	4b38      	ldr	r3, [pc, #224]	; (800c06c <__kernel_rem_pio2+0x344>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f7f4 fd5e 	bl	8000a4c <__aeabi_dcmpge>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d139      	bne.n	800c008 <__kernel_rem_pio2+0x2e0>
 800bf94:	9002      	str	r0, [sp, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	4639      	mov	r1, r7
 800bf9e:	f7f4 fd37 	bl	8000a10 <__aeabi_dcmpeq>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f000 80b4 	beq.w	800c110 <__kernel_rem_pio2+0x3e8>
 800bfa8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800bfac:	465b      	mov	r3, fp
 800bfae:	2200      	movs	r2, #0
 800bfb0:	9904      	ldr	r1, [sp, #16]
 800bfb2:	428b      	cmp	r3, r1
 800bfb4:	da65      	bge.n	800c082 <__kernel_rem_pio2+0x35a>
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	d07b      	beq.n	800c0b2 <__kernel_rem_pio2+0x38a>
 800bfba:	ab0c      	add	r3, sp, #48	; 0x30
 800bfbc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bfc0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 80a0 	beq.w	800c10a <__kernel_rem_pio2+0x3e2>
 800bfca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c050 <__kernel_rem_pio2+0x328>
 800bfce:	4650      	mov	r0, sl
 800bfd0:	f000 fb32 	bl	800c638 <scalbn>
 800bfd4:	4f23      	ldr	r7, [pc, #140]	; (800c064 <__kernel_rem_pio2+0x33c>)
 800bfd6:	ec55 4b10 	vmov	r4, r5, d0
 800bfda:	46d8      	mov	r8, fp
 800bfdc:	2600      	movs	r6, #0
 800bfde:	f1b8 0f00 	cmp.w	r8, #0
 800bfe2:	f280 80cf 	bge.w	800c184 <__kernel_rem_pio2+0x45c>
 800bfe6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c048 <__kernel_rem_pio2+0x320>
 800bfea:	465f      	mov	r7, fp
 800bfec:	f04f 0800 	mov.w	r8, #0
 800bff0:	2f00      	cmp	r7, #0
 800bff2:	f2c0 80fd 	blt.w	800c1f0 <__kernel_rem_pio2+0x4c8>
 800bff6:	ab70      	add	r3, sp, #448	; 0x1c0
 800bff8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c070 <__kernel_rem_pio2+0x348>
 800bffc:	ec55 4b18 	vmov	r4, r5, d8
 800c000:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c004:	2600      	movs	r6, #0
 800c006:	e0e5      	b.n	800c1d4 <__kernel_rem_pio2+0x4ac>
 800c008:	2302      	movs	r3, #2
 800c00a:	9302      	str	r3, [sp, #8]
 800c00c:	e75c      	b.n	800bec8 <__kernel_rem_pio2+0x1a0>
 800c00e:	f8db 3000 	ldr.w	r3, [fp]
 800c012:	b955      	cbnz	r5, 800c02a <__kernel_rem_pio2+0x302>
 800c014:	b123      	cbz	r3, 800c020 <__kernel_rem_pio2+0x2f8>
 800c016:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c01a:	f8cb 3000 	str.w	r3, [fp]
 800c01e:	2301      	movs	r3, #1
 800c020:	3201      	adds	r2, #1
 800c022:	f10b 0b04 	add.w	fp, fp, #4
 800c026:	461d      	mov	r5, r3
 800c028:	e755      	b.n	800bed6 <__kernel_rem_pio2+0x1ae>
 800c02a:	1acb      	subs	r3, r1, r3
 800c02c:	f8cb 3000 	str.w	r3, [fp]
 800c030:	462b      	mov	r3, r5
 800c032:	e7f5      	b.n	800c020 <__kernel_rem_pio2+0x2f8>
 800c034:	1e62      	subs	r2, r4, #1
 800c036:	ab0c      	add	r3, sp, #48	; 0x30
 800c038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c040:	a90c      	add	r1, sp, #48	; 0x30
 800c042:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c046:	e754      	b.n	800bef2 <__kernel_rem_pio2+0x1ca>
	...
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	0800c998 	.word	0x0800c998
 800c05c:	40200000 	.word	0x40200000
 800c060:	3ff00000 	.word	0x3ff00000
 800c064:	3e700000 	.word	0x3e700000
 800c068:	41700000 	.word	0x41700000
 800c06c:	3fe00000 	.word	0x3fe00000
 800c070:	0800c958 	.word	0x0800c958
 800c074:	1e62      	subs	r2, r4, #1
 800c076:	ab0c      	add	r3, sp, #48	; 0x30
 800c078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c080:	e7de      	b.n	800c040 <__kernel_rem_pio2+0x318>
 800c082:	a90c      	add	r1, sp, #48	; 0x30
 800c084:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c088:	3b01      	subs	r3, #1
 800c08a:	430a      	orrs	r2, r1
 800c08c:	e790      	b.n	800bfb0 <__kernel_rem_pio2+0x288>
 800c08e:	3301      	adds	r3, #1
 800c090:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c094:	2900      	cmp	r1, #0
 800c096:	d0fa      	beq.n	800c08e <__kernel_rem_pio2+0x366>
 800c098:	9a08      	ldr	r2, [sp, #32]
 800c09a:	18e3      	adds	r3, r4, r3
 800c09c:	18a6      	adds	r6, r4, r2
 800c09e:	aa20      	add	r2, sp, #128	; 0x80
 800c0a0:	1c65      	adds	r5, r4, #1
 800c0a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	9b02      	ldr	r3, [sp, #8]
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	da04      	bge.n	800c0b8 <__kernel_rem_pio2+0x390>
 800c0ae:	461c      	mov	r4, r3
 800c0b0:	e6b5      	b.n	800be1e <__kernel_rem_pio2+0xf6>
 800c0b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e7eb      	b.n	800c090 <__kernel_rem_pio2+0x368>
 800c0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0be:	f7f4 f9d5 	bl	800046c <__aeabi_i2d>
 800c0c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c8:	46b3      	mov	fp, r6
 800c0ca:	461c      	mov	r4, r3
 800c0cc:	2700      	movs	r7, #0
 800c0ce:	f04f 0800 	mov.w	r8, #0
 800c0d2:	f04f 0900 	mov.w	r9, #0
 800c0d6:	9b06      	ldr	r3, [sp, #24]
 800c0d8:	429f      	cmp	r7, r3
 800c0da:	dd06      	ble.n	800c0ea <__kernel_rem_pio2+0x3c2>
 800c0dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c0de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0e2:	e9c3 8900 	strd	r8, r9, [r3]
 800c0e6:	3501      	adds	r5, #1
 800c0e8:	e7de      	b.n	800c0a8 <__kernel_rem_pio2+0x380>
 800c0ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c0ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c0f2:	f7f4 fa25 	bl	8000540 <__aeabi_dmul>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 f869 	bl	80001d4 <__adddf3>
 800c102:	3701      	adds	r7, #1
 800c104:	4680      	mov	r8, r0
 800c106:	4689      	mov	r9, r1
 800c108:	e7e5      	b.n	800c0d6 <__kernel_rem_pio2+0x3ae>
 800c10a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c10e:	e754      	b.n	800bfba <__kernel_rem_pio2+0x292>
 800c110:	ec47 6b10 	vmov	d0, r6, r7
 800c114:	f1ca 0000 	rsb	r0, sl, #0
 800c118:	f000 fa8e 	bl	800c638 <scalbn>
 800c11c:	ec57 6b10 	vmov	r6, r7, d0
 800c120:	4b9f      	ldr	r3, [pc, #636]	; (800c3a0 <__kernel_rem_pio2+0x678>)
 800c122:	ee10 0a10 	vmov	r0, s0
 800c126:	2200      	movs	r2, #0
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 fc8f 	bl	8000a4c <__aeabi_dcmpge>
 800c12e:	b300      	cbz	r0, 800c172 <__kernel_rem_pio2+0x44a>
 800c130:	4b9c      	ldr	r3, [pc, #624]	; (800c3a4 <__kernel_rem_pio2+0x67c>)
 800c132:	2200      	movs	r2, #0
 800c134:	4630      	mov	r0, r6
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fa02 	bl	8000540 <__aeabi_dmul>
 800c13c:	f7f4 fc9a 	bl	8000a74 <__aeabi_d2iz>
 800c140:	4605      	mov	r5, r0
 800c142:	f7f4 f993 	bl	800046c <__aeabi_i2d>
 800c146:	4b96      	ldr	r3, [pc, #600]	; (800c3a0 <__kernel_rem_pio2+0x678>)
 800c148:	2200      	movs	r2, #0
 800c14a:	f7f4 f9f9 	bl	8000540 <__aeabi_dmul>
 800c14e:	460b      	mov	r3, r1
 800c150:	4602      	mov	r2, r0
 800c152:	4639      	mov	r1, r7
 800c154:	4630      	mov	r0, r6
 800c156:	f7f4 f83b 	bl	80001d0 <__aeabi_dsub>
 800c15a:	f7f4 fc8b 	bl	8000a74 <__aeabi_d2iz>
 800c15e:	f104 0b01 	add.w	fp, r4, #1
 800c162:	ab0c      	add	r3, sp, #48	; 0x30
 800c164:	f10a 0a18 	add.w	sl, sl, #24
 800c168:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c16c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c170:	e72b      	b.n	800bfca <__kernel_rem_pio2+0x2a2>
 800c172:	4630      	mov	r0, r6
 800c174:	4639      	mov	r1, r7
 800c176:	f7f4 fc7d 	bl	8000a74 <__aeabi_d2iz>
 800c17a:	ab0c      	add	r3, sp, #48	; 0x30
 800c17c:	46a3      	mov	fp, r4
 800c17e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c182:	e722      	b.n	800bfca <__kernel_rem_pio2+0x2a2>
 800c184:	ab70      	add	r3, sp, #448	; 0x1c0
 800c186:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c18a:	ab0c      	add	r3, sp, #48	; 0x30
 800c18c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c190:	f7f4 f96c 	bl	800046c <__aeabi_i2d>
 800c194:	4622      	mov	r2, r4
 800c196:	462b      	mov	r3, r5
 800c198:	f7f4 f9d2 	bl	8000540 <__aeabi_dmul>
 800c19c:	4632      	mov	r2, r6
 800c19e:	e9c9 0100 	strd	r0, r1, [r9]
 800c1a2:	463b      	mov	r3, r7
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 f9ca 	bl	8000540 <__aeabi_dmul>
 800c1ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	e713      	b.n	800bfde <__kernel_rem_pio2+0x2b6>
 800c1b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c1ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c1be:	f7f4 f9bf 	bl	8000540 <__aeabi_dmul>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7f4 f803 	bl	80001d4 <__adddf3>
 800c1ce:	3601      	adds	r6, #1
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	9b04      	ldr	r3, [sp, #16]
 800c1d6:	429e      	cmp	r6, r3
 800c1d8:	dc01      	bgt.n	800c1de <__kernel_rem_pio2+0x4b6>
 800c1da:	45b0      	cmp	r8, r6
 800c1dc:	daeb      	bge.n	800c1b6 <__kernel_rem_pio2+0x48e>
 800c1de:	ab48      	add	r3, sp, #288	; 0x120
 800c1e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1e4:	e9c3 4500 	strd	r4, r5, [r3]
 800c1e8:	3f01      	subs	r7, #1
 800c1ea:	f108 0801 	add.w	r8, r8, #1
 800c1ee:	e6ff      	b.n	800bff0 <__kernel_rem_pio2+0x2c8>
 800c1f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	dc0b      	bgt.n	800c20e <__kernel_rem_pio2+0x4e6>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dc6e      	bgt.n	800c2d8 <__kernel_rem_pio2+0x5b0>
 800c1fa:	d045      	beq.n	800c288 <__kernel_rem_pio2+0x560>
 800c1fc:	9b07      	ldr	r3, [sp, #28]
 800c1fe:	f003 0007 	and.w	r0, r3, #7
 800c202:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c206:	ecbd 8b02 	vpop	{d8}
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c210:	2b03      	cmp	r3, #3
 800c212:	d1f3      	bne.n	800c1fc <__kernel_rem_pio2+0x4d4>
 800c214:	ab48      	add	r3, sp, #288	; 0x120
 800c216:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c21a:	46d0      	mov	r8, sl
 800c21c:	46d9      	mov	r9, fp
 800c21e:	f1b9 0f00 	cmp.w	r9, #0
 800c222:	f1a8 0808 	sub.w	r8, r8, #8
 800c226:	dc64      	bgt.n	800c2f2 <__kernel_rem_pio2+0x5ca>
 800c228:	465c      	mov	r4, fp
 800c22a:	2c01      	cmp	r4, #1
 800c22c:	f1aa 0a08 	sub.w	sl, sl, #8
 800c230:	dc7e      	bgt.n	800c330 <__kernel_rem_pio2+0x608>
 800c232:	2000      	movs	r0, #0
 800c234:	2100      	movs	r1, #0
 800c236:	f1bb 0f01 	cmp.w	fp, #1
 800c23a:	f300 8097 	bgt.w	800c36c <__kernel_rem_pio2+0x644>
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c244:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 8099 	bne.w	800c380 <__kernel_rem_pio2+0x658>
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	e9c3 5600 	strd	r5, r6, [r3]
 800c254:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c258:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c25c:	e7ce      	b.n	800c1fc <__kernel_rem_pio2+0x4d4>
 800c25e:	ab48      	add	r3, sp, #288	; 0x120
 800c260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f3 ffb4 	bl	80001d4 <__adddf3>
 800c26c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c270:	f1bb 0f00 	cmp.w	fp, #0
 800c274:	daf3      	bge.n	800c25e <__kernel_rem_pio2+0x536>
 800c276:	9b02      	ldr	r3, [sp, #8]
 800c278:	b113      	cbz	r3, 800c280 <__kernel_rem_pio2+0x558>
 800c27a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c27e:	4619      	mov	r1, r3
 800c280:	9b01      	ldr	r3, [sp, #4]
 800c282:	e9c3 0100 	strd	r0, r1, [r3]
 800c286:	e7b9      	b.n	800c1fc <__kernel_rem_pio2+0x4d4>
 800c288:	2000      	movs	r0, #0
 800c28a:	2100      	movs	r1, #0
 800c28c:	e7f0      	b.n	800c270 <__kernel_rem_pio2+0x548>
 800c28e:	ab48      	add	r3, sp, #288	; 0x120
 800c290:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f7f3 ff9c 	bl	80001d4 <__adddf3>
 800c29c:	3c01      	subs	r4, #1
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	daf5      	bge.n	800c28e <__kernel_rem_pio2+0x566>
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	b1e3      	cbz	r3, 800c2e0 <__kernel_rem_pio2+0x5b8>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ac:	9c01      	ldr	r4, [sp, #4]
 800c2ae:	e9c4 2300 	strd	r2, r3, [r4]
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c2ba:	f7f3 ff89 	bl	80001d0 <__aeabi_dsub>
 800c2be:	ad4a      	add	r5, sp, #296	; 0x128
 800c2c0:	2401      	movs	r4, #1
 800c2c2:	45a3      	cmp	fp, r4
 800c2c4:	da0f      	bge.n	800c2e6 <__kernel_rem_pio2+0x5be>
 800c2c6:	9b02      	ldr	r3, [sp, #8]
 800c2c8:	b113      	cbz	r3, 800c2d0 <__kernel_rem_pio2+0x5a8>
 800c2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2d6:	e791      	b.n	800c1fc <__kernel_rem_pio2+0x4d4>
 800c2d8:	465c      	mov	r4, fp
 800c2da:	2000      	movs	r0, #0
 800c2dc:	2100      	movs	r1, #0
 800c2de:	e7de      	b.n	800c29e <__kernel_rem_pio2+0x576>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	e7e2      	b.n	800c2ac <__kernel_rem_pio2+0x584>
 800c2e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c2ea:	f7f3 ff73 	bl	80001d4 <__adddf3>
 800c2ee:	3401      	adds	r4, #1
 800c2f0:	e7e7      	b.n	800c2c2 <__kernel_rem_pio2+0x59a>
 800c2f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c2f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	463b      	mov	r3, r7
 800c300:	4629      	mov	r1, r5
 800c302:	f7f3 ff67 	bl	80001d4 <__adddf3>
 800c306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f3 ff5d 	bl	80001d0 <__aeabi_dsub>
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	f7f3 ff5b 	bl	80001d4 <__adddf3>
 800c31e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c322:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c326:	ed88 7b00 	vstr	d7, [r8]
 800c32a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c32e:	e776      	b.n	800c21e <__kernel_rem_pio2+0x4f6>
 800c330:	e9da 8900 	ldrd	r8, r9, [sl]
 800c334:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c338:	4640      	mov	r0, r8
 800c33a:	4632      	mov	r2, r6
 800c33c:	463b      	mov	r3, r7
 800c33e:	4649      	mov	r1, r9
 800c340:	f7f3 ff48 	bl	80001d4 <__adddf3>
 800c344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	4640      	mov	r0, r8
 800c34e:	4649      	mov	r1, r9
 800c350:	f7f3 ff3e 	bl	80001d0 <__aeabi_dsub>
 800c354:	4632      	mov	r2, r6
 800c356:	463b      	mov	r3, r7
 800c358:	f7f3 ff3c 	bl	80001d4 <__adddf3>
 800c35c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c360:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c364:	ed8a 7b00 	vstr	d7, [sl]
 800c368:	3c01      	subs	r4, #1
 800c36a:	e75e      	b.n	800c22a <__kernel_rem_pio2+0x502>
 800c36c:	ab48      	add	r3, sp, #288	; 0x120
 800c36e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f3 ff2d 	bl	80001d4 <__adddf3>
 800c37a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c37e:	e75a      	b.n	800c236 <__kernel_rem_pio2+0x50e>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	9a01      	ldr	r2, [sp, #4]
 800c384:	601d      	str	r5, [r3, #0]
 800c386:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c38a:	605c      	str	r4, [r3, #4]
 800c38c:	609f      	str	r7, [r3, #8]
 800c38e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c392:	60d3      	str	r3, [r2, #12]
 800c394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c398:	6110      	str	r0, [r2, #16]
 800c39a:	6153      	str	r3, [r2, #20]
 800c39c:	e72e      	b.n	800c1fc <__kernel_rem_pio2+0x4d4>
 800c39e:	bf00      	nop
 800c3a0:	41700000 	.word	0x41700000
 800c3a4:	3e700000 	.word	0x3e700000

0800c3a8 <__kernel_sin>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	ed2d 8b04 	vpush	{d8-d9}
 800c3b0:	eeb0 8a41 	vmov.f32	s16, s2
 800c3b4:	eef0 8a61 	vmov.f32	s17, s3
 800c3b8:	ec55 4b10 	vmov	r4, r5, d0
 800c3bc:	b083      	sub	sp, #12
 800c3be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c3c6:	9001      	str	r0, [sp, #4]
 800c3c8:	da06      	bge.n	800c3d8 <__kernel_sin+0x30>
 800c3ca:	ee10 0a10 	vmov	r0, s0
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 fb50 	bl	8000a74 <__aeabi_d2iz>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d051      	beq.n	800c47c <__kernel_sin+0xd4>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 f8ae 	bl	8000540 <__aeabi_dmul>
 800c3e4:	4682      	mov	sl, r0
 800c3e6:	468b      	mov	fp, r1
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f4 f8a6 	bl	8000540 <__aeabi_dmul>
 800c3f4:	a341      	add	r3, pc, #260	; (adr r3, 800c4fc <__kernel_sin+0x154>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4689      	mov	r9, r1
 800c3fe:	4650      	mov	r0, sl
 800c400:	4659      	mov	r1, fp
 800c402:	f7f4 f89d 	bl	8000540 <__aeabi_dmul>
 800c406:	a33f      	add	r3, pc, #252	; (adr r3, 800c504 <__kernel_sin+0x15c>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 fee0 	bl	80001d0 <__aeabi_dsub>
 800c410:	4652      	mov	r2, sl
 800c412:	465b      	mov	r3, fp
 800c414:	f7f4 f894 	bl	8000540 <__aeabi_dmul>
 800c418:	a33c      	add	r3, pc, #240	; (adr r3, 800c50c <__kernel_sin+0x164>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 fed9 	bl	80001d4 <__adddf3>
 800c422:	4652      	mov	r2, sl
 800c424:	465b      	mov	r3, fp
 800c426:	f7f4 f88b 	bl	8000540 <__aeabi_dmul>
 800c42a:	a33a      	add	r3, pc, #232	; (adr r3, 800c514 <__kernel_sin+0x16c>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f3 fece 	bl	80001d0 <__aeabi_dsub>
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	f7f4 f882 	bl	8000540 <__aeabi_dmul>
 800c43c:	a337      	add	r3, pc, #220	; (adr r3, 800c51c <__kernel_sin+0x174>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f7f3 fec7 	bl	80001d4 <__adddf3>
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	4606      	mov	r6, r0
 800c44a:	460f      	mov	r7, r1
 800c44c:	b9eb      	cbnz	r3, 800c48a <__kernel_sin+0xe2>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4650      	mov	r0, sl
 800c454:	4659      	mov	r1, fp
 800c456:	f7f4 f873 	bl	8000540 <__aeabi_dmul>
 800c45a:	a325      	add	r3, pc, #148	; (adr r3, 800c4f0 <__kernel_sin+0x148>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f7f3 feb6 	bl	80001d0 <__aeabi_dsub>
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	f7f4 f86a 	bl	8000540 <__aeabi_dmul>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	f7f3 feae 	bl	80001d4 <__adddf3>
 800c478:	4604      	mov	r4, r0
 800c47a:	460d      	mov	r5, r1
 800c47c:	ec45 4b10 	vmov	d0, r4, r5
 800c480:	b003      	add	sp, #12
 800c482:	ecbd 8b04 	vpop	{d8-d9}
 800c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48a:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <__kernel_sin+0x150>)
 800c48c:	ec51 0b18 	vmov	r0, r1, d8
 800c490:	2200      	movs	r2, #0
 800c492:	f7f4 f855 	bl	8000540 <__aeabi_dmul>
 800c496:	4632      	mov	r2, r6
 800c498:	ec41 0b19 	vmov	d9, r0, r1
 800c49c:	463b      	mov	r3, r7
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 f84d 	bl	8000540 <__aeabi_dmul>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	ec51 0b19 	vmov	r0, r1, d9
 800c4ae:	f7f3 fe8f 	bl	80001d0 <__aeabi_dsub>
 800c4b2:	4652      	mov	r2, sl
 800c4b4:	465b      	mov	r3, fp
 800c4b6:	f7f4 f843 	bl	8000540 <__aeabi_dmul>
 800c4ba:	ec53 2b18 	vmov	r2, r3, d8
 800c4be:	f7f3 fe87 	bl	80001d0 <__aeabi_dsub>
 800c4c2:	a30b      	add	r3, pc, #44	; (adr r3, 800c4f0 <__kernel_sin+0x148>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	f7f4 f836 	bl	8000540 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4630      	mov	r0, r6
 800c4da:	4639      	mov	r1, r7
 800c4dc:	f7f3 fe7a 	bl	80001d4 <__adddf3>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f3 fe72 	bl	80001d0 <__aeabi_dsub>
 800c4ec:	e7c4      	b.n	800c478 <__kernel_sin+0xd0>
 800c4ee:	bf00      	nop
 800c4f0:	55555549 	.word	0x55555549
 800c4f4:	3fc55555 	.word	0x3fc55555
 800c4f8:	3fe00000 	.word	0x3fe00000
 800c4fc:	5acfd57c 	.word	0x5acfd57c
 800c500:	3de5d93a 	.word	0x3de5d93a
 800c504:	8a2b9ceb 	.word	0x8a2b9ceb
 800c508:	3e5ae5e6 	.word	0x3e5ae5e6
 800c50c:	57b1fe7d 	.word	0x57b1fe7d
 800c510:	3ec71de3 	.word	0x3ec71de3
 800c514:	19c161d5 	.word	0x19c161d5
 800c518:	3f2a01a0 	.word	0x3f2a01a0
 800c51c:	1110f8a6 	.word	0x1110f8a6
 800c520:	3f811111 	.word	0x3f811111

0800c524 <fabs>:
 800c524:	ec51 0b10 	vmov	r0, r1, d0
 800c528:	ee10 2a10 	vmov	r2, s0
 800c52c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c530:	ec43 2b10 	vmov	d0, r2, r3
 800c534:	4770      	bx	lr
	...

0800c538 <floor>:
 800c538:	ec51 0b10 	vmov	r0, r1, d0
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c548:	2e13      	cmp	r6, #19
 800c54a:	ee10 5a10 	vmov	r5, s0
 800c54e:	ee10 8a10 	vmov	r8, s0
 800c552:	460c      	mov	r4, r1
 800c554:	dc32      	bgt.n	800c5bc <floor+0x84>
 800c556:	2e00      	cmp	r6, #0
 800c558:	da14      	bge.n	800c584 <floor+0x4c>
 800c55a:	a333      	add	r3, pc, #204	; (adr r3, 800c628 <floor+0xf0>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f3 fe38 	bl	80001d4 <__adddf3>
 800c564:	2200      	movs	r2, #0
 800c566:	2300      	movs	r3, #0
 800c568:	f7f4 fa7a 	bl	8000a60 <__aeabi_dcmpgt>
 800c56c:	b138      	cbz	r0, 800c57e <floor+0x46>
 800c56e:	2c00      	cmp	r4, #0
 800c570:	da57      	bge.n	800c622 <floor+0xea>
 800c572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c576:	431d      	orrs	r5, r3
 800c578:	d001      	beq.n	800c57e <floor+0x46>
 800c57a:	4c2d      	ldr	r4, [pc, #180]	; (800c630 <floor+0xf8>)
 800c57c:	2500      	movs	r5, #0
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	e025      	b.n	800c5d0 <floor+0x98>
 800c584:	4f2b      	ldr	r7, [pc, #172]	; (800c634 <floor+0xfc>)
 800c586:	4137      	asrs	r7, r6
 800c588:	ea01 0307 	and.w	r3, r1, r7
 800c58c:	4303      	orrs	r3, r0
 800c58e:	d01f      	beq.n	800c5d0 <floor+0x98>
 800c590:	a325      	add	r3, pc, #148	; (adr r3, 800c628 <floor+0xf0>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	f7f3 fe1d 	bl	80001d4 <__adddf3>
 800c59a:	2200      	movs	r2, #0
 800c59c:	2300      	movs	r3, #0
 800c59e:	f7f4 fa5f 	bl	8000a60 <__aeabi_dcmpgt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0eb      	beq.n	800c57e <floor+0x46>
 800c5a6:	2c00      	cmp	r4, #0
 800c5a8:	bfbe      	ittt	lt
 800c5aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5b2:	19a4      	addlt	r4, r4, r6
 800c5b4:	ea24 0407 	bic.w	r4, r4, r7
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	e7e0      	b.n	800c57e <floor+0x46>
 800c5bc:	2e33      	cmp	r6, #51	; 0x33
 800c5be:	dd0b      	ble.n	800c5d8 <floor+0xa0>
 800c5c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5c4:	d104      	bne.n	800c5d0 <floor+0x98>
 800c5c6:	ee10 2a10 	vmov	r2, s0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	f7f3 fe02 	bl	80001d4 <__adddf3>
 800c5d0:	ec41 0b10 	vmov	d0, r0, r1
 800c5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5e0:	fa23 f707 	lsr.w	r7, r3, r7
 800c5e4:	4207      	tst	r7, r0
 800c5e6:	d0f3      	beq.n	800c5d0 <floor+0x98>
 800c5e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c628 <floor+0xf0>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fdf1 	bl	80001d4 <__adddf3>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f7f4 fa33 	bl	8000a60 <__aeabi_dcmpgt>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d0bf      	beq.n	800c57e <floor+0x46>
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	da02      	bge.n	800c608 <floor+0xd0>
 800c602:	2e14      	cmp	r6, #20
 800c604:	d103      	bne.n	800c60e <floor+0xd6>
 800c606:	3401      	adds	r4, #1
 800c608:	ea25 0507 	bic.w	r5, r5, r7
 800c60c:	e7b7      	b.n	800c57e <floor+0x46>
 800c60e:	2301      	movs	r3, #1
 800c610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c614:	fa03 f606 	lsl.w	r6, r3, r6
 800c618:	4435      	add	r5, r6
 800c61a:	4545      	cmp	r5, r8
 800c61c:	bf38      	it	cc
 800c61e:	18e4      	addcc	r4, r4, r3
 800c620:	e7f2      	b.n	800c608 <floor+0xd0>
 800c622:	2500      	movs	r5, #0
 800c624:	462c      	mov	r4, r5
 800c626:	e7aa      	b.n	800c57e <floor+0x46>
 800c628:	8800759c 	.word	0x8800759c
 800c62c:	7e37e43c 	.word	0x7e37e43c
 800c630:	bff00000 	.word	0xbff00000
 800c634:	000fffff 	.word	0x000fffff

0800c638 <scalbn>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	ec55 4b10 	vmov	r4, r5, d0
 800c63e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c642:	4606      	mov	r6, r0
 800c644:	462b      	mov	r3, r5
 800c646:	b99a      	cbnz	r2, 800c670 <scalbn+0x38>
 800c648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c64c:	4323      	orrs	r3, r4
 800c64e:	d036      	beq.n	800c6be <scalbn+0x86>
 800c650:	4b39      	ldr	r3, [pc, #228]	; (800c738 <scalbn+0x100>)
 800c652:	4629      	mov	r1, r5
 800c654:	ee10 0a10 	vmov	r0, s0
 800c658:	2200      	movs	r2, #0
 800c65a:	f7f3 ff71 	bl	8000540 <__aeabi_dmul>
 800c65e:	4b37      	ldr	r3, [pc, #220]	; (800c73c <scalbn+0x104>)
 800c660:	429e      	cmp	r6, r3
 800c662:	4604      	mov	r4, r0
 800c664:	460d      	mov	r5, r1
 800c666:	da10      	bge.n	800c68a <scalbn+0x52>
 800c668:	a32b      	add	r3, pc, #172	; (adr r3, 800c718 <scalbn+0xe0>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	e03a      	b.n	800c6e6 <scalbn+0xae>
 800c670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c674:	428a      	cmp	r2, r1
 800c676:	d10c      	bne.n	800c692 <scalbn+0x5a>
 800c678:	ee10 2a10 	vmov	r2, s0
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 fda8 	bl	80001d4 <__adddf3>
 800c684:	4604      	mov	r4, r0
 800c686:	460d      	mov	r5, r1
 800c688:	e019      	b.n	800c6be <scalbn+0x86>
 800c68a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c68e:	460b      	mov	r3, r1
 800c690:	3a36      	subs	r2, #54	; 0x36
 800c692:	4432      	add	r2, r6
 800c694:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c698:	428a      	cmp	r2, r1
 800c69a:	dd08      	ble.n	800c6ae <scalbn+0x76>
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	a120      	add	r1, pc, #128	; (adr r1, 800c720 <scalbn+0xe8>)
 800c6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a4:	da1c      	bge.n	800c6e0 <scalbn+0xa8>
 800c6a6:	a120      	add	r1, pc, #128	; (adr r1, 800c728 <scalbn+0xf0>)
 800c6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ac:	e018      	b.n	800c6e0 <scalbn+0xa8>
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	dd08      	ble.n	800c6c4 <scalbn+0x8c>
 800c6b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6be:	ec45 4b10 	vmov	d0, r4, r5
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6c8:	da19      	bge.n	800c6fe <scalbn+0xc6>
 800c6ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6ce:	429e      	cmp	r6, r3
 800c6d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6d4:	dd0a      	ble.n	800c6ec <scalbn+0xb4>
 800c6d6:	a112      	add	r1, pc, #72	; (adr r1, 800c720 <scalbn+0xe8>)
 800c6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e2      	bne.n	800c6a6 <scalbn+0x6e>
 800c6e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c720 <scalbn+0xe8>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	f7f3 ff2b 	bl	8000540 <__aeabi_dmul>
 800c6ea:	e7cb      	b.n	800c684 <scalbn+0x4c>
 800c6ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c718 <scalbn+0xe0>)
 800c6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0b8      	beq.n	800c668 <scalbn+0x30>
 800c6f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c730 <scalbn+0xf8>)
 800c6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6fc:	e7b4      	b.n	800c668 <scalbn+0x30>
 800c6fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c702:	3236      	adds	r2, #54	; 0x36
 800c704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c708:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c70c:	4620      	mov	r0, r4
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <scalbn+0x108>)
 800c710:	2200      	movs	r2, #0
 800c712:	e7e8      	b.n	800c6e6 <scalbn+0xae>
 800c714:	f3af 8000 	nop.w
 800c718:	c2f8f359 	.word	0xc2f8f359
 800c71c:	01a56e1f 	.word	0x01a56e1f
 800c720:	8800759c 	.word	0x8800759c
 800c724:	7e37e43c 	.word	0x7e37e43c
 800c728:	8800759c 	.word	0x8800759c
 800c72c:	fe37e43c 	.word	0xfe37e43c
 800c730:	c2f8f359 	.word	0xc2f8f359
 800c734:	81a56e1f 	.word	0x81a56e1f
 800c738:	43500000 	.word	0x43500000
 800c73c:	ffff3cb0 	.word	0xffff3cb0
 800c740:	3c900000 	.word	0x3c900000

0800c744 <_init>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr

0800c750 <_fini>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr
