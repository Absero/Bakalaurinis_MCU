
f303vc_logeris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008d6c  08008d6c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d6c  08008d6c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000180  08008ef4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001408  08008ef4  00021408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d43  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036a5  00000000  00000000  00039ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  0003d598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  0003e890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e157  00000000  00000000  0003f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125f1  00000000  00000000  0005db47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5d7b  00000000  00000000  00070138  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115eb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea0  00000000  00000000  00115f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ce4 	.word	0x08008ce4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08008ce4 	.word	0x08008ce4

080001c8 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ mVeliavos.adcDone=1; }
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <HAL_ADC_ConvCpltCallback+0x20>)
 80001d2:	7813      	ldrb	r3, [r2, #0]
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	7013      	strb	r3, [r2, #0]
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200003c4 	.word	0x200003c4

080001ec <CDC_ReceiveCallback>:

void ledCircle_Next();

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len){
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
	mUSB_data.data = buf;
 80001f6:	4a08      	ldr	r2, [pc, #32]	; (8000218 <CDC_ReceiveCallback+0x2c>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6013      	str	r3, [r2, #0]
	mUSB_data.len = len;
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <CDC_ReceiveCallback+0x2c>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	6053      	str	r3, [r2, #4]
	mVeliavos.usbDRDY = 1;
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <CDC_ReceiveCallback+0x30>)
 8000204:	7813      	ldrb	r3, [r2, #0]
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	7013      	strb	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	2000045c 	.word	0x2000045c
 800021c:	200003c4 	.word	0x200003c4

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe9a 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f87e 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa84 	bl	8000738 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 fa64 	bl	80006fc <MX_DMA_Init>
  MX_ADC2_Init();
 8000234:	f000 f8d8 	bl	80003e8 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000238:	f008 f868 	bl	800830c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800023c:	f000 f9b2 	bl	80005a4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000240:	f000 fa26 	bl	8000690 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)mAdcData, KANALU_SKAICIUS);
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)mPaketasSiuntimui.adcData, KANALU_SKAICIUS);
 8000244:	220a      	movs	r2, #10
 8000246:	4930      	ldr	r1, [pc, #192]	; (8000308 <main+0xe8>)
 8000248:	4830      	ldr	r0, [pc, #192]	; (800030c <main+0xec>)
 800024a:	f001 f903 	bl	8001454 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800024e:	4830      	ldr	r0, [pc, #192]	; (8000310 <main+0xf0>)
 8000250:	f004 fc14 	bl	8004a7c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim6);
 8000254:	482f      	ldr	r0, [pc, #188]	; (8000314 <main+0xf4>)
 8000256:	f004 fc11 	bl	8004a7c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(mVeliavos.usbDRDY){
 800025a:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <main+0xf8>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2b00      	cmp	r3, #0
 8000266:	d02e      	beq.n	80002c6 <main+0xa6>
		  switch (*mUSB_data.data) {
 8000268:	4b2c      	ldr	r3, [pc, #176]	; (800031c <main+0xfc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	db21      	blt.n	80002b6 <main+0x96>
 8000272:	2b01      	cmp	r3, #1
 8000274:	dd02      	ble.n	800027c <main+0x5c>
 8000276:	2b02      	cmp	r3, #2
 8000278:	d00c      	beq.n	8000294 <main+0x74>
				//pakeisti taimerio perioda
				if(mUSB_data.len==3)
					TIM3->ARR = *(uint16_t *)(mUSB_data.data+1)-1<299?299:*(uint16_t *)(mUSB_data.data+1)-1;
				break;
			default:
				break;
 800027a:	e01c      	b.n	80002b6 <main+0x96>
				mVeliavos.start=*mUSB_data.data;
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <main+0xfc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2d9      	uxtb	r1, r3
 8000288:	4a23      	ldr	r2, [pc, #140]	; (8000318 <main+0xf8>)
 800028a:	7813      	ldrb	r3, [r2, #0]
 800028c:	f361 0382 	bfi	r3, r1, #2, #1
 8000290:	7013      	strb	r3, [r2, #0]
				break;
 8000292:	e013      	b.n	80002bc <main+0x9c>
				if(mUSB_data.len==3)
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <main+0xfc>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d10e      	bne.n	80002ba <main+0x9a>
					TIM3->ARR = *(uint16_t *)(mUSB_data.data+1)-1<299?299:*(uint16_t *)(mUSB_data.data+1)-1;
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <main+0xfc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	f240 122b 	movw	r2, #299	; 0x12b
 80002aa:	429a      	cmp	r2, r3
 80002ac:	bfb8      	it	lt
 80002ae:	461a      	movlt	r2, r3
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <main+0x100>)
 80002b2:	62da      	str	r2, [r3, #44]	; 0x2c
				break;
 80002b4:	e001      	b.n	80002ba <main+0x9a>
				break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <main+0x9c>
				break;
 80002ba:	bf00      	nop
		  }
		  mVeliavos.usbDRDY = 0;
 80002bc:	4a16      	ldr	r2, [pc, #88]	; (8000318 <main+0xf8>)
 80002be:	7813      	ldrb	r3, [r2, #0]
 80002c0:	f36f 0341 	bfc	r3, #1, #1
 80002c4:	7013      	strb	r3, [r2, #0]
	  }

	  if(mVeliavos.adcDone){
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <main+0xf8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0c2      	beq.n	800025a <main+0x3a>
		  mVeliavos.adcDone=0;
 80002d4:	4a10      	ldr	r2, [pc, #64]	; (8000318 <main+0xf8>)
 80002d6:	7813      	ldrb	r3, [r2, #0]
 80002d8:	f36f 0300 	bfc	r3, #0, #1
 80002dc:	7013      	strb	r3, [r2, #0]
		  ledCircle_Next();
 80002de:	f000 fa99 	bl	8000814 <ledCircle_Next>
		  measTemp();
 80002e2:	f000 fc37 	bl	8000b54 <measTemp>
//		  mAdcData[KANALU_SKAICIUS-1]=TEMP;
		  mPaketasSiuntimui.temperatura=TEMP;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <main+0x104>)
 80002e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <main+0xe8>)
 80002ee:	829a      	strh	r2, [r3, #20]

		  if(mVeliavos.start)
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <main+0xf8>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0ad      	beq.n	800025a <main+0x3a>
			  CDC_Transmit_FS((uint8_t*)mPaketasSiuntimui.adcData, KANALU_SKAICIUS*2+2);
 80002fe:	2116      	movs	r1, #22
 8000300:	4801      	ldr	r0, [pc, #4]	; (8000308 <main+0xe8>)
 8000302:	f008 f8c7 	bl	8008494 <CDC_Transmit_FS>
	  if(mVeliavos.usbDRDY){
 8000306:	e7a8      	b.n	800025a <main+0x3a>
 8000308:	200004ec 	.word	0x200004ec
 800030c:	200003c8 	.word	0x200003c8
 8000310:	20000418 	.word	0x20000418
 8000314:	20000464 	.word	0x20000464
 8000318:	200003c4 	.word	0x200003c4
 800031c:	2000045c 	.word	0x2000045c
 8000320:	40000400 	.word	0x40000400
 8000324:	20000458 	.word	0x20000458

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09e      	sub	sp, #120	; 0x78
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f008 fccc 	bl	8008cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	223c      	movs	r2, #60	; 0x3c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f008 fcbe 	bl	8008cd4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000358:	2301      	movs	r3, #1
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2301      	movs	r3, #1
 8000368:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000374:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000378:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800037e:	4618      	mov	r0, r3
 8000380:	f003 f8b2 	bl	80034e8 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800038a:	f000 fc57 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a8:	2101      	movs	r1, #1
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 ffa4 	bl	80042f8 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003b6:	f000 fc41 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <SystemClock_Config+0xbc>)
 80003bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4618      	mov	r0, r3
 80003ce:	f004 f979 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003d8:	f000 fc30 	bl	8000c3c <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3778      	adds	r7, #120	; 0x78
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	00020080 	.word	0x00020080

080003e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80003fe:	4b67      	ldr	r3, [pc, #412]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000400:	4a67      	ldr	r2, [pc, #412]	; (80005a0 <MX_ADC2_Init+0x1b8>)
 8000402:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000404:	4b65      	ldr	r3, [pc, #404]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800040a:	4b64      	ldr	r3, [pc, #400]	; (800059c <MX_ADC2_Init+0x1b4>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000410:	4b62      	ldr	r3, [pc, #392]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000412:	2201      	movs	r2, #1
 8000414:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000416:	4b61      	ldr	r3, [pc, #388]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000418:	2200      	movs	r2, #0
 800041a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800041c:	4b5f      	ldr	r3, [pc, #380]	; (800059c <MX_ADC2_Init+0x1b4>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000424:	4b5d      	ldr	r3, [pc, #372]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800042c:	4b5b      	ldr	r3, [pc, #364]	; (800059c <MX_ADC2_Init+0x1b4>)
 800042e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000434:	4b59      	ldr	r3, [pc, #356]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 10;
 800043a:	4b58      	ldr	r3, [pc, #352]	; (800059c <MX_ADC2_Init+0x1b4>)
 800043c:	220a      	movs	r2, #10
 800043e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000440:	4b56      	ldr	r3, [pc, #344]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000442:	2201      	movs	r2, #1
 8000444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000448:	4b54      	ldr	r3, [pc, #336]	; (800059c <MX_ADC2_Init+0x1b4>)
 800044a:	2208      	movs	r2, #8
 800044c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800044e:	4b53      	ldr	r3, [pc, #332]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000450:	2200      	movs	r2, #0
 8000452:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000454:	4b51      	ldr	r3, [pc, #324]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000456:	2200      	movs	r2, #0
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800045a:	4850      	ldr	r0, [pc, #320]	; (800059c <MX_ADC2_Init+0x1b4>)
 800045c:	f000 fe1a 	bl	8001094 <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000466:	f000 fbe9 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046a:	2301      	movs	r3, #1
 800046c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2301      	movs	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000476:	2306      	movs	r3, #6
 8000478:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	4619      	mov	r1, r3
 8000486:	4845      	ldr	r0, [pc, #276]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000488:	f001 f900 	bl	800168c <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000492:	f000 fbd3 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000496:	2302      	movs	r3, #2
 8000498:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800049a:	2302      	movs	r3, #2
 800049c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800049e:	463b      	mov	r3, r7
 80004a0:	4619      	mov	r1, r3
 80004a2:	483e      	ldr	r0, [pc, #248]	; (800059c <MX_ADC2_Init+0x1b4>)
 80004a4:	f001 f8f2 	bl	800168c <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80004ae:	f000 fbc5 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004b2:	2303      	movs	r3, #3
 80004b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004b6:	2303      	movs	r3, #3
 80004b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004ba:	463b      	mov	r3, r7
 80004bc:	4619      	mov	r1, r3
 80004be:	4837      	ldr	r0, [pc, #220]	; (800059c <MX_ADC2_Init+0x1b4>)
 80004c0:	f001 f8e4 	bl	800168c <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 80004ca:	f000 fbb7 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004ce:	2304      	movs	r3, #4
 80004d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004d2:	2304      	movs	r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004d6:	463b      	mov	r3, r7
 80004d8:	4619      	mov	r1, r3
 80004da:	4830      	ldr	r0, [pc, #192]	; (800059c <MX_ADC2_Init+0x1b4>)
 80004dc:	f001 f8d6 	bl	800168c <HAL_ADC_ConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80004e6:	f000 fba9 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004ea:	2305      	movs	r3, #5
 80004ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004ee:	2305      	movs	r3, #5
 80004f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4829      	ldr	r0, [pc, #164]	; (800059c <MX_ADC2_Init+0x1b4>)
 80004f8:	f001 f8c8 	bl	800168c <HAL_ADC_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8000502:	f000 fb9b 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000506:	2306      	movs	r3, #6
 8000508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800050a:	2306      	movs	r3, #6
 800050c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	4619      	mov	r1, r3
 8000512:	4822      	ldr	r0, [pc, #136]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000514:	f001 f8ba 	bl	800168c <HAL_ADC_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC2_Init+0x13a>
  {
    Error_Handler();
 800051e:	f000 fb8d 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000522:	2307      	movs	r3, #7
 8000524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000526:	2307      	movs	r3, #7
 8000528:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	4619      	mov	r1, r3
 800052e:	481b      	ldr	r0, [pc, #108]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000530:	f001 f8ac 	bl	800168c <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 800053a:	f000 fb7f 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800053e:	2308      	movs	r3, #8
 8000540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000542:	2308      	movs	r3, #8
 8000544:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4814      	ldr	r0, [pc, #80]	; (800059c <MX_ADC2_Init+0x1b4>)
 800054c:	f001 f89e 	bl	800168c <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC2_Init+0x172>
  {
    Error_Handler();
 8000556:	f000 fb71 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800055a:	2309      	movs	r3, #9
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800055e:	2309      	movs	r3, #9
 8000560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000568:	f001 f890 	bl	800168c <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC2_Init+0x18e>
  {
    Error_Handler();
 8000572:	f000 fb63 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000576:	230a      	movs	r3, #10
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800057a:	230a      	movs	r3, #10
 800057c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_ADC2_Init+0x1b4>)
 8000584:	f001 f882 	bl	800168c <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC2_Init+0x1aa>
  {
    Error_Handler();
 800058e:	f000 fb55 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200003c8 	.word	0x200003c8
 80005a0:	50000100 	.word	0x50000100

080005a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	; 0x38
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <MX_TIM3_Init+0xe8>)
 80005da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005de:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80005e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_TIM3_Init+0xe4>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <MX_TIM3_Init+0xe4>)
 8000600:	f004 fa10 	bl	8004a24 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800060a:	f000 fb17 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000618:	4619      	mov	r1, r3
 800061a:	481b      	ldr	r0, [pc, #108]	; (8000688 <MX_TIM3_Init+0xe4>)
 800061c:	f004 fc2a 	bl	8004e74 <HAL_TIM_ConfigClockSource>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000626:	f000 fb09 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800062a:	4817      	ldr	r0, [pc, #92]	; (8000688 <MX_TIM3_Init+0xe4>)
 800062c:	f004 fa50 	bl	8004ad0 <HAL_TIM_OC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000636:	f000 fb01 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800063a:	2320      	movs	r3, #32
 800063c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <MX_TIM3_Init+0xe4>)
 800064a:	f005 f8ff 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000654:	f000 faf2 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	220c      	movs	r2, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_TIM3_Init+0xe4>)
 8000670:	f004 fb82 	bl	8004d78 <HAL_TIM_OC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800067a:	f000 fadf 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000418 	.word	0x20000418
 800068c:	40000400 	.word	0x40000400

08000690 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_TIM6_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006a8:	222f      	movs	r2, #47	; 0x2f
 80006aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfff;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006c2:	f004 f9af 	bl	8004a24 <HAL_TIM_Base_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006cc:	f000 fab6 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_TIM6_Init+0x64>)
 80006de:	f005 f8b5 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006e8:	f000 faa8 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000464 	.word	0x20000464
 80006f8:	40001000 	.word	0x40001000

080006fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_DMA_Init+0x38>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <MX_DMA_Init+0x38>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_DMA_Init+0x38>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2038      	movs	r0, #56	; 0x38
 8000720:	f001 fc9f 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000724:	2038      	movs	r0, #56	; 0x38
 8000726:	f001 fcb8 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a2d      	ldr	r2, [pc, #180]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xd0>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a27      	ldr	r2, [pc, #156]	; (8000808 <MX_GPIO_Init+0xd0>)
 800076c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xd0>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_GPIO_Init+0xd0>)
 800079c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4816      	ldr	r0, [pc, #88]	; (800080c <MX_GPIO_Init+0xd4>)
 80007b4:	f001 ffd0 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led7_Pin|led6_Pin|led5_Pin|led4_Pin 
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_GPIO_Init+0xd8>)
 80007c0:	f001 ffca 	bl	8002758 <HAL_GPIO_WritePin>
                          |led3_Pin|led2_Pin|led1_Pin|led0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : temp_Pin */
  GPIO_InitStruct.Pin = temp_Pin;
 80007c4:	2320      	movs	r3, #32
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xd4>)
 80007dc:	f001 fe2a 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : led7_Pin led6_Pin led5_Pin led4_Pin 
                           led3_Pin led2_Pin led1_Pin led0_Pin */
  GPIO_InitStruct.Pin = led7_Pin|led6_Pin|led5_Pin|led4_Pin 
 80007e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007e4:	617b      	str	r3, [r7, #20]
                          |led3_Pin|led2_Pin|led1_Pin|led0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0xd8>)
 80007fa:	f001 fe1b 	bl	8002434 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800
 8000810:	48001000 	.word	0x48001000

08000814 <ledCircle_Next>:

/* USER CODE BEGIN 4 */

void ledCircle_Next(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	static uint8_t einamas=7;

	switch (einamas) {
 8000818:	4b47      	ldr	r3, [pc, #284]	; (8000938 <ledCircle_Next+0x124>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b07      	cmp	r3, #7
 800081e:	d87b      	bhi.n	8000918 <ledCircle_Next+0x104>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <ledCircle_Next+0x14>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000849 	.word	0x08000849
 800082c:	08000863 	.word	0x08000863
 8000830:	0800087d 	.word	0x0800087d
 8000834:	08000897 	.word	0x08000897
 8000838:	080008b1 	.word	0x080008b1
 800083c:	080008cb 	.word	0x080008cb
 8000840:	080008e5 	.word	0x080008e5
 8000844:	080008ff 	.word	0x080008ff
		case 0:
			HAL_GPIO_WritePin(led7_GPIO_Port, led7_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	483b      	ldr	r0, [pc, #236]	; (800093c <ledCircle_Next+0x128>)
 8000850:	f001 ff82 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085a:	4838      	ldr	r0, [pc, #224]	; (800093c <ledCircle_Next+0x128>)
 800085c:	f001 ff7c 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 8000860:	e05b      	b.n	800091a <ledCircle_Next+0x106>
		case 1:
			HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000868:	4834      	ldr	r0, [pc, #208]	; (800093c <ledCircle_Next+0x128>)
 800086a:	f001 ff75 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000874:	4831      	ldr	r0, [pc, #196]	; (800093c <ledCircle_Next+0x128>)
 8000876:	f001 ff6f 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 800087a:	e04e      	b.n	800091a <ledCircle_Next+0x106>
		case 2:
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <ledCircle_Next+0x128>)
 8000884:	f001 ff68 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	482b      	ldr	r0, [pc, #172]	; (800093c <ledCircle_Next+0x128>)
 8000890:	f001 ff62 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 8000894:	e041      	b.n	800091a <ledCircle_Next+0x106>
		case 3:
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4827      	ldr	r0, [pc, #156]	; (800093c <ledCircle_Next+0x128>)
 800089e:	f001 ff5b 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a8:	4824      	ldr	r0, [pc, #144]	; (800093c <ledCircle_Next+0x128>)
 80008aa:	f001 ff55 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 80008ae:	e034      	b.n	800091a <ledCircle_Next+0x106>
		case 4:
			HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <ledCircle_Next+0x128>)
 80008b8:	f001 ff4e 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	481e      	ldr	r0, [pc, #120]	; (800093c <ledCircle_Next+0x128>)
 80008c4:	f001 ff48 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 80008c8:	e027      	b.n	800091a <ledCircle_Next+0x106>
		case 5:
			HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <ledCircle_Next+0x128>)
 80008d2:	f001 ff41 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led5_GPIO_Port, led5_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <ledCircle_Next+0x128>)
 80008de:	f001 ff3b 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 80008e2:	e01a      	b.n	800091a <ledCircle_Next+0x106>
		case 6:
			HAL_GPIO_WritePin(led5_GPIO_Port, led5_Pin, SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <ledCircle_Next+0x128>)
 80008ec:	f001 ff34 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led6_GPIO_Port, led6_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <ledCircle_Next+0x128>)
 80008f8:	f001 ff2e 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 80008fc:	e00d      	b.n	800091a <ledCircle_Next+0x106>
		case 7:
			HAL_GPIO_WritePin(led6_GPIO_Port, led6_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <ledCircle_Next+0x128>)
 8000906:	f001 ff27 	bl	8002758 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led7_GPIO_Port, led7_Pin, RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <ledCircle_Next+0x128>)
 8000912:	f001 ff21 	bl	8002758 <HAL_GPIO_WritePin>
			break;
 8000916:	e000      	b.n	800091a <ledCircle_Next+0x106>

		default:
			break;
 8000918:	bf00      	nop
	}

	einamas=einamas==0?7:einamas-1;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <ledCircle_Next+0x124>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <ledCircle_Next+0x118>
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ledCircle_Next+0x124>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	e000      	b.n	800092e <ledCircle_Next+0x11a>
 800092c:	2307      	movs	r3, #7
 800092e:	4a02      	ldr	r2, [pc, #8]	; (8000938 <ledCircle_Next+0x124>)
 8000930:	7013      	strb	r3, [r2, #0]
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000000 	.word	0x20000000
 800093c:	48001000 	.word	0x48001000

08000940 <delay>:

void delay (uint16_t time)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <delay+0x2c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000952:	bf00      	nop
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <delay+0x2c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3f9      	bcc.n	8000954 <delay+0x14>
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000464 	.word	0x20000464

08000970 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f001 fd48 	bl	8002434 <HAL_GPIO_Init>
}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f001 fd2a 	bl	8002434 <HAL_GPIO_Init>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set the pin as output
 80009f2:	2120      	movs	r1, #32
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <DS18B20_Start+0x5c>)
 80009f6:	f7ff ffbb 	bl	8000970 <Set_Pin_Output>
	HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 0);  // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a00:	f001 feaa 	bl	8002758 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8000a04:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000a08:	f7ff ff9a 	bl	8000940 <delay>

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);    // set the pin as input
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a10:	f7ff ffcc 	bl	80009ac <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8000a14:	2050      	movs	r0, #80	; 0x50
 8000a16:	f7ff ff93 	bl	8000940 <delay>

	if (!(HAL_GPIO_ReadPin (temp_GPIO_Port, temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a1e:	f001 fe83 	bl	8002728 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <DS18B20_Start+0x46>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	e001      	b.n	8000a32 <DS18B20_Start+0x4a>
	else Response = -1;
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8000a32:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a36:	f7ff ff83 	bl	8000940 <delay>

	return Response;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	48000800 	.word	0x48000800

08000a48 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 8000a52:	2120      	movs	r1, #32
 8000a54:	481d      	ldr	r0, [pc, #116]	; (8000acc <DS18B20_Write+0x84>)
 8000a56:	f7ff ff8b 	bl	8000970 <Set_Pin_Output>
//	delay(1);

	for (int i=0; i<8; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e02e      	b.n	8000abe <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	fa42 f303 	asr.w	r3, r2, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d013      	beq.n	8000a98 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 8000a70:	2120      	movs	r1, #32
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <DS18B20_Write+0x84>)
 8000a74:	f7ff ff7c 	bl	8000970 <Set_Pin_Output>
			HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <DS18B20_Write+0x84>)
 8000a7e:	f001 fe6b 	bl	8002758 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ff5c 	bl	8000940 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <DS18B20_Write+0x84>)
 8000a8c:	f7ff ff8e 	bl	80009ac <Set_Pin_Input>
//			HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 1);
			delay (60);  // wait for 60 us
 8000a90:	203c      	movs	r0, #60	; 0x3c
 8000a92:	f7ff ff55 	bl	8000940 <delay>
 8000a96:	e00f      	b.n	8000ab8 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);
 8000a98:	2120      	movs	r1, #32
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <DS18B20_Write+0x84>)
 8000a9c:	f7ff ff68 	bl	8000970 <Set_Pin_Output>
			HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <DS18B20_Write+0x84>)
 8000aa6:	f001 fe57 	bl	8002758 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 8000aaa:	203c      	movs	r0, #60	; 0x3c
 8000aac:	f7ff ff48 	bl	8000940 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <DS18B20_Write+0x84>)
 8000ab4:	f7ff ff7a 	bl	80009ac <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	ddcd      	ble.n	8000a60 <DS18B20_Write+0x18>
		}
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	48000800 	.word	0x48000800

08000ad0 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
	uint8_t nuskaityta=0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 8000ade:	2120      	movs	r1, #32
 8000ae0:	481b      	ldr	r0, [pc, #108]	; (8000b50 <DS18B20_Read+0x80>)
 8000ae2:	f7ff ff63 	bl	80009ac <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	e028      	b.n	8000b3e <DS18B20_Read+0x6e>
	{
		Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 8000aec:	2120      	movs	r1, #32
 8000aee:	4818      	ldr	r0, [pc, #96]	; (8000b50 <DS18B20_Read+0x80>)
 8000af0:	f7ff ff3e 	bl	8000970 <Set_Pin_Output>
		HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 8000af4:	2200      	movs	r2, #0
 8000af6:	2120      	movs	r1, #32
 8000af8:	4815      	ldr	r0, [pc, #84]	; (8000b50 <DS18B20_Read+0x80>)
 8000afa:	f001 fe2d 	bl	8002758 <HAL_GPIO_WritePin>
		delay (2);  // wait for > 1us
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff ff1e 	bl	8000940 <delay>

		Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 8000b04:	2120      	movs	r1, #32
 8000b06:	4812      	ldr	r0, [pc, #72]	; (8000b50 <DS18B20_Read+0x80>)
 8000b08:	f7ff ff50 	bl	80009ac <Set_Pin_Input>
		delay(8);
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f7ff ff17 	bl	8000940 <delay>

		nuskaityta=HAL_GPIO_ReadPin (temp_GPIO_Port, temp_Pin);
 8000b12:	2120      	movs	r1, #32
 8000b14:	480e      	ldr	r0, [pc, #56]	; (8000b50 <DS18B20_Read+0x80>)
 8000b16:	f001 fe07 	bl	8002728 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

		value |= nuskaityta<<i;  // read = 1
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	73fb      	strb	r3, [r7, #15]

		delay (60);  // wait for 60 us
 8000b32:	203c      	movs	r0, #60	; 0x3c
 8000b34:	f7ff ff04 	bl	8000940 <delay>
	for (int i=0;i<8;i++)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	ddd3      	ble.n	8000aec <DS18B20_Read+0x1c>
	}
	return value;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	48000800 	.word	0x48000800

08000b54 <measTemp>:

void measTemp(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	Presence = DS18B20_Start ();
 8000b58:	f7ff ff46 	bl	80009e8 <DS18B20_Start>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <measTemp+0xd0>)
 8000b62:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fa5f 	bl	8001028 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8000b6a:	20cc      	movs	r0, #204	; 0xcc
 8000b6c:	f7ff ff6c 	bl	8000a48 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8000b70:	2044      	movs	r0, #68	; 0x44
 8000b72:	f7ff ff69 	bl	8000a48 <DS18B20_Write>

	do{
	  HAL_Delay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fa56 	bl	8001028 <HAL_Delay>
	  Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	482a      	ldr	r0, [pc, #168]	; (8000c28 <measTemp+0xd4>)
 8000b80:	f7ff fef6 	bl	8000970 <Set_Pin_Output>

	  HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 8000b84:	2200      	movs	r2, #0
 8000b86:	2120      	movs	r1, #32
 8000b88:	4827      	ldr	r0, [pc, #156]	; (8000c28 <measTemp+0xd4>)
 8000b8a:	f001 fde5 	bl	8002758 <HAL_GPIO_WritePin>
	  delay (2);  // wait for > 1us
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fed6 	bl	8000940 <delay>

	  Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 8000b94:	2120      	movs	r1, #32
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <measTemp+0xd4>)
 8000b98:	f7ff ff08 	bl	80009ac <Set_Pin_Input>
	  delay(10);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f7ff fecf 	bl	8000940 <delay>
	}while(!HAL_GPIO_ReadPin (temp_GPIO_Port, temp_Pin));
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	4820      	ldr	r0, [pc, #128]	; (8000c28 <measTemp+0xd4>)
 8000ba6:	f001 fdbf 	bl	8002728 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e2      	beq.n	8000b76 <measTemp+0x22>

	Presence = DS18B20_Start ();
 8000bb0:	f7ff ff1a 	bl	80009e8 <DS18B20_Start>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <measTemp+0xd0>)
 8000bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fa33 	bl	8001028 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8000bc2:	20cc      	movs	r0, #204	; 0xcc
 8000bc4:	f7ff ff40 	bl	8000a48 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 8000bc8:	20be      	movs	r0, #190	; 0xbe
 8000bca:	f7ff ff3d 	bl	8000a48 <DS18B20_Write>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fa2a 	bl	8001028 <HAL_Delay>

	Temp_byte1 = DS18B20_Read();
 8000bd4:	f7ff ff7c 	bl	8000ad0 <DS18B20_Read>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <measTemp+0xd8>)
 8000bde:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8000be0:	f7ff ff76 	bl	8000ad0 <DS18B20_Read>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <measTemp+0xdc>)
 8000bea:	701a      	strb	r2, [r3, #0]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <measTemp+0xdc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <measTemp+0xd8>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <measTemp+0xe0>)
 8000c00:	801a      	strh	r2, [r3, #0]
	Temperature = (float)TEMP/16;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <measTemp+0xe0>)
 8000c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c10:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <measTemp+0xe4>)
 8000c1a:	edc3 7a00 	vstr	s15, [r3]
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001a0 	.word	0x200001a0
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	2000045a 	.word	0x2000045a
 8000c30:	200004e8 	.word	0x200004e8
 8000c34:	20000458 	.word	0x20000458
 8000c38:	2000019c 	.word	0x2000019c

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_MspInit+0x44>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_MspInit+0x44>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_MspInit+0x44>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_MspInit+0x44>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x44>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x44>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a41      	ldr	r2, [pc, #260]	; (8000db8 <HAL_ADC_MspInit+0x124>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d17c      	bne.n	8000db0 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HAL_ADC_MspInit+0x128>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000d16:	231f      	movs	r3, #31
 8000d18:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4825      	ldr	r0, [pc, #148]	; (8000dc0 <HAL_ADC_MspInit+0x12c>)
 8000d2a:	f001 fb83 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <HAL_ADC_MspInit+0x130>)
 8000d42:	f001 fb77 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d46:	23f0      	movs	r3, #240	; 0xf0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5c:	f001 fb6a 	bl	8002434 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_ADC_MspInit+0x138>)
 8000d64:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000d96:	f001 f99a 	bl	80020ce <HAL_DMA_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8000da0:	f7ff ff4c 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_ADC_MspInit+0x134>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48001400 	.word	0x48001400
 8000dc8:	200004a4 	.word	0x200004a4
 8000dcc:	40020408 	.word	0x40020408

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_TIM_Base_MspInit+0x68>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10c      	bne.n	8000dfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dfa:	e018      	b.n	8000e2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_TIM_Base_MspInit+0x70>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d113      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_Base_MspInit+0x6c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2036      	movs	r0, #54	; 0x36
 8000e24:	f001 f91d 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f001 f936 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40001000 	.word	0x40001000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8a6 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000ea6:	f001 fd49 	bl	800293c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000119c 	.word	0x2000119c

08000eb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM6_DAC_IRQHandler+0x10>)
 8000eba:	f003 fe3e 	bl	8004b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000464 	.word	0x20000464

08000ec8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA2_Channel1_IRQHandler+0x10>)
 8000ece:	f001 f9a4 	bl	800221a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200004a4 	.word	0x200004a4

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <SystemInit+0x28>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <SystemInit+0x28>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SystemInit+0x28>)
 8000ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f0e:	e003      	b.n	8000f18 <LoopCopyDataInit>

08000f10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f16:	3104      	adds	r1, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f20:	d3f6      	bcc.n	8000f10 <CopyDataInit>
	ldr	r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f24:	e002      	b.n	8000f2c <LoopFillZerobss>

08000f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f28:	f842 3b04 	str.w	r3, [r2], #4

08000f2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <LoopForever+0x16>)
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f30:	d3f9      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ffd3 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f007 fea9 	bl	8008c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3a:	f7ff f971 	bl	8000220 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f40:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000f44:	08008d74 	.word	0x08008d74
	ldr	r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f4c:	20000180 	.word	0x20000180
	ldr	r2, =_sbss
 8000f50:	20000180 	.word	0x20000180
	ldr	r3, = _ebss
 8000f54:	20001408 	.word	0x20001408

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x28>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f001 f86d 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe68 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f885 	bl	80020b6 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f001 f84d 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000504 	.word	0x20000504

08001010 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;  
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000504 	.word	0x20000504

08001028 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000000c 	.word	0x2000000c

0800106c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b09a      	sub	sp, #104	; 0x68
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e1c9      	b.n	8001448 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d176      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d152      	bne.n	8001174 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fdd3 	bl	8000c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fe75 	bl	8001dec <ADC_Disable>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d12f      	bne.n	8001174 <HAL_ADC_Init+0xe0>
 8001114:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001118:	2b00      	cmp	r3, #0
 800111a:	d12b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800113e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001150:	4b86      	ldr	r3, [pc, #536]	; (800136c <HAL_ADC_Init+0x2d8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a86      	ldr	r2, [pc, #536]	; (8001370 <HAL_ADC_Init+0x2dc>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9a      	lsrs	r2, r3, #18
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001166:	e002      	b.n	800116e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800118c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001190:	d110      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f023 0312 	bic.w	r3, r3, #18
 800119a:	f043 0210 	orr.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 8136 	bne.w	800142e <HAL_ADC_Init+0x39a>
 80011c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 8131 	bne.w	800142e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 8129 	bne.w	800142e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_Init+0x16c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_ADC_Init+0x2e0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_Init+0x170>
 8001200:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_ADC_Init+0x2e4>)
 8001202:	e000      	b.n	8001206 <HAL_ADC_Init+0x172>
 8001204:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_ADC_Init+0x2e8>)
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001210:	d102      	bne.n	8001218 <HAL_ADC_Init+0x184>
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_ADC_Init+0x2e0>)
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e01a      	b.n	800124e <HAL_ADC_Init+0x1ba>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_ADC_Init+0x2e0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d103      	bne.n	800122a <HAL_ADC_Init+0x196>
 8001222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e011      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_ADC_Init+0x2ec>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d102      	bne.n	800123a <HAL_ADC_Init+0x1a6>
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_ADC_Init+0x2f0>)
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e009      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_ADC_Init+0x2f0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d102      	bne.n	800124a <HAL_ADC_Init+0x1b6>
 8001244:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <HAL_ADC_Init+0x2ec>)
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e001      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_ADC_Init+0x1da>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x1da>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_ADC_Init+0x1dc>
 800126e:	2300      	movs	r3, #0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11c      	bne.n	80012ae <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001274:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_ADC_Init+0x202>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x202>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_ADC_Init+0x204>
 8001296:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7e5b      	ldrb	r3, [r3, #25]
 80012b2:	035b      	lsls	r3, r3, #13
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	d002      	beq.n	80012c2 <HAL_ADC_Init+0x22e>
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	e000      	b.n	80012c4 <HAL_ADC_Init+0x230>
 80012c2:	2200      	movs	r2, #0
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012d4:	4313      	orrs	r3, r2
 80012d6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e5b      	ldrb	r3, [r3, #25]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	3b01      	subs	r3, #1
 80012f0:	045a      	lsls	r2, r3, #17
 80012f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f4:	4313      	orrs	r3, r2
 80012f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fa:	663b      	str	r3, [r7, #96]	; 0x60
 80012fc:	e00d      	b.n	800131a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001306:	f043 0220 	orr.w	r2, r3, #32
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	2b01      	cmp	r3, #1
 8001320:	d03a      	beq.n	8001398 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_ADC_Init+0x2ec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d004      	beq.n	8001336 <HAL_ADC_Init+0x2a2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_ADC_Init+0x2f0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d128      	bne.n	8001388 <HAL_ADC_Init+0x2f4>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800133e:	d012      	beq.n	8001366 <HAL_ADC_Init+0x2d2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001348:	d00a      	beq.n	8001360 <HAL_ADC_Init+0x2cc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001352:	d002      	beq.n	800135a <HAL_ADC_Init+0x2c6>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	e018      	b.n	800138c <HAL_ADC_Init+0x2f8>
 800135a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135e:	e015      	b.n	800138c <HAL_ADC_Init+0x2f8>
 8001360:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001364:	e012      	b.n	800138c <HAL_ADC_Init+0x2f8>
 8001366:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800136a:	e00f      	b.n	800138c <HAL_ADC_Init+0x2f8>
 800136c:	20000004 	.word	0x20000004
 8001370:	431bde83 	.word	0x431bde83
 8001374:	50000100 	.word	0x50000100
 8001378:	50000300 	.word	0x50000300
 800137c:	50000700 	.word	0x50000700
 8001380:	50000400 	.word	0x50000400
 8001384:	50000500 	.word	0x50000500
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001390:	4313      	orrs	r3, r2
 8001392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001394:	4313      	orrs	r3, r2
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d114      	bne.n	80013d0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013b4:	f023 0302 	bic.w	r3, r3, #2
 80013b8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e1b      	ldrb	r3, [r3, #24]
 80013be:	039a      	lsls	r2, r3, #14
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013cc:	4313      	orrs	r3, r2
 80013ce:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_ADC_Init+0x3bc>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10c      	bne.n	8001406 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f023 010f 	bic.w	r1, r3, #15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
 8001404:	e007      	b.n	8001416 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020f 	bic.w	r2, r2, #15
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f023 0303 	bic.w	r3, r3, #3
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
 800142c:	e00a      	b.n	8001444 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f023 0312 	bic.w	r3, r3, #18
 8001436:	f043 0210 	orr.w	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800143e:	2301      	movs	r3, #1
 8001440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001448:	4618      	mov	r0, r3
 800144a:	3768      	adds	r7, #104	; 0x68
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	fff0c007 	.word	0xfff0c007

08001454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 80f7 	bne.w	8001662 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Start_DMA+0x2e>
 800147e:	2302      	movs	r3, #2
 8001480:	e0f2      	b.n	8001668 <HAL_ADC_Start_DMA+0x214>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001492:	d004      	beq.n	800149e <HAL_ADC_Start_DMA+0x4a>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a75      	ldr	r2, [pc, #468]	; (8001670 <HAL_ADC_Start_DMA+0x21c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d109      	bne.n	80014b2 <HAL_ADC_Start_DMA+0x5e>
 800149e:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_ADC_Start_DMA+0x220>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e008      	b.n	80014c4 <HAL_ADC_Start_DMA+0x70>
 80014b2:	4b71      	ldr	r3, [pc, #452]	; (8001678 <HAL_ADC_Start_DMA+0x224>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf0c      	ite	eq
 80014be:	2301      	moveq	r3, #1
 80014c0:	2300      	movne	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80c5 	beq.w	8001654 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fc30 	bl	8001d30 <ADC_Enable>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80b7 	bne.w	800164a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f8:	d004      	beq.n	8001504 <HAL_ADC_Start_DMA+0xb0>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5c      	ldr	r2, [pc, #368]	; (8001670 <HAL_ADC_Start_DMA+0x21c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d106      	bne.n	8001512 <HAL_ADC_Start_DMA+0xbe>
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_ADC_Start_DMA+0x220>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b00      	cmp	r3, #0
 800150e:	d010      	beq.n	8001532 <HAL_ADC_Start_DMA+0xde>
 8001510:	e005      	b.n	800151e <HAL_ADC_Start_DMA+0xca>
 8001512:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_ADC_Start_DMA+0x224>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_ADC_Start_DMA+0xde>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Start_DMA+0xde>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a53      	ldr	r2, [pc, #332]	; (800167c <HAL_ADC_Start_DMA+0x228>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d115      	bne.n	800155e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d036      	beq.n	80015ba <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001554:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800155c:	e02d      	b.n	80015ba <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001572:	d004      	beq.n	800157e <HAL_ADC_Start_DMA+0x12a>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <HAL_ADC_Start_DMA+0x21c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10a      	bne.n	8001594 <HAL_ADC_Start_DMA+0x140>
 800157e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e008      	b.n	80015a6 <HAL_ADC_Start_DMA+0x152>
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_ADC_Start_DMA+0x228>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c6:	d106      	bne.n	80015d6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f023 0206 	bic.w	r2, r3, #6
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_ADC_Start_DMA+0x22c>)
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	4a24      	ldr	r2, [pc, #144]	; (8001684 <HAL_ADC_Start_DMA+0x230>)
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <HAL_ADC_Start_DMA+0x234>)
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	221c      	movs	r2, #28
 8001602:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0210 	orr.w	r2, r2, #16
 8001612:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3340      	adds	r3, #64	; 0x40
 800162e:	4619      	mov	r1, r3
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f000 fd92 	bl	800215c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0204 	orr.w	r2, r2, #4
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00d      	b.n	8001666 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001652:	e008      	b.n	8001666 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001660:	e001      	b.n	8001666 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001662:	2302      	movs	r3, #2
 8001664:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001666:	7dfb      	ldrb	r3, [r7, #23]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	50000100 	.word	0x50000100
 8001674:	50000300 	.word	0x50000300
 8001678:	50000700 	.word	0x50000700
 800167c:	50000400 	.word	0x50000400
 8001680:	08001c65 	.word	0x08001c65
 8001684:	08001cdf 	.word	0x08001cdf
 8001688:	08001cfb 	.word	0x08001cfb

0800168c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b09b      	sub	sp, #108	; 0x6c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x22>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e2cb      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x5ba>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 82af 	bne.w	8001c24 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d81c      	bhi.n	8001708 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	461a      	mov	r2, r3
 80016e2:	231f      	movs	r3, #31
 80016e4:	4093      	lsls	r3, r2
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4019      	ands	r1, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa00 f203 	lsl.w	r2, r0, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
 8001706:	e063      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b09      	cmp	r3, #9
 800170e:	d81e      	bhi.n	800174e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	3b1e      	subs	r3, #30
 8001724:	221f      	movs	r2, #31
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	4019      	ands	r1, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3b1e      	subs	r3, #30
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
 800174c:	e040      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b0e      	cmp	r3, #14
 8001754:	d81e      	bhi.n	8001794 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	3b3c      	subs	r3, #60	; 0x3c
 800176a:	221f      	movs	r2, #31
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	4019      	ands	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	3b3c      	subs	r3, #60	; 0x3c
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
 8001792:	e01d      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	3b5a      	subs	r3, #90	; 0x5a
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4019      	ands	r1, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	3b5a      	subs	r3, #90	; 0x5a
 80017c4:	fa00 f203 	lsl.w	r2, r0, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80e5 	bne.w	80019aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d91c      	bls.n	8001822 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6999      	ldr	r1, [r3, #24]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	3b1e      	subs	r3, #30
 80017fa:	2207      	movs	r2, #7
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6898      	ldr	r0, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	3b1e      	subs	r3, #30
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	e019      	b.n	8001856 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6959      	ldr	r1, [r3, #20]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	2207      	movs	r2, #7
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	4019      	ands	r1, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	3b01      	subs	r3, #1
 8001874:	2b03      	cmp	r3, #3
 8001876:	d84f      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0x28c>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_ADC_ConfigChannel+0x1f4>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	08001891 	.word	0x08001891
 8001884:	080018b3 	.word	0x080018b3
 8001888:	080018d5 	.word	0x080018d5
 800188c:	080018f7 	.word	0x080018f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001896:	4b9f      	ldr	r3, [pc, #636]	; (8001b14 <HAL_ADC_ConfigChannel+0x488>)
 8001898:	4013      	ands	r3, r2
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	0691      	lsls	r1, r2, #26
 80018a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a2:	430a      	orrs	r2, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b0:	e07e      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018b8:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <HAL_ADC_ConfigChannel+0x488>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	0691      	lsls	r1, r2, #26
 80018c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c4:	430a      	orrs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d2:	e06d      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018da:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <HAL_ADC_ConfigChannel+0x488>)
 80018dc:	4013      	ands	r3, r2
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	0691      	lsls	r1, r2, #26
 80018e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e6:	430a      	orrs	r2, r1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018f4:	e05c      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018fc:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_ADC_ConfigChannel+0x488>)
 80018fe:	4013      	ands	r3, r2
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	0691      	lsls	r1, r2, #26
 8001906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001908:	430a      	orrs	r2, r1
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001914:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001916:	e04b      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	069b      	lsls	r3, r3, #26
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800193a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800195e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	069b      	lsls	r3, r3, #26
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800198a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	429a      	cmp	r2, r3
 8001996:	d10a      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019a8:	e001      	b.n	80019ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x344>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x344>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x346>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8131 	bne.w	8001c3a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d00f      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019fe:	e049      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d91c      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6999      	ldr	r1, [r3, #24]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	3b1b      	subs	r3, #27
 8001a34:	2207      	movs	r2, #7
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4019      	ands	r1, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6898      	ldr	r0, [r3, #8]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b1b      	subs	r3, #27
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	619a      	str	r2, [r3, #24]
 8001a5a:	e01b      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6959      	ldr	r1, [r3, #20]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	2207      	movs	r2, #7
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4019      	ands	r1, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6898      	ldr	r0, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0x41c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_ADC_ConfigChannel+0x48c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x420>
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_ADC_ConfigChannel+0x490>)
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_ConfigChannel+0x422>
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_ADC_ConfigChannel+0x494>)
 8001aae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	f040 80ac 	bne.w	8001c3a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80a5 	bne.w	8001c3a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af8:	d102      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x474>
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_ADC_ConfigChannel+0x48c>)
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e023      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x4bc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_ADC_ConfigChannel+0x48c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10c      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x498>
 8001b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e01a      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x4bc>
 8001b12:	bf00      	nop
 8001b14:	83fff000 	.word	0x83fff000
 8001b18:	50000100 	.word	0x50000100
 8001b1c:	50000300 	.word	0x50000300
 8001b20:	50000700 	.word	0x50000700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x4a8>
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e009      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x4bc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x4b8>
 8001b3e:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e001      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x4bc>
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x4dc>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x4dc>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4de>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d150      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x504>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x504>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x506>
 8001b90:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d13c      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d11d      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x54e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba6:	d118      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_ADC_ConfigChannel+0x5d0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9a      	lsrs	r2, r3, #18
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bd8:	e02e      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x56e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf8:	e01e      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d11a      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c0e:	e013      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c22:	e00a      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c38:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	376c      	adds	r7, #108	; 0x6c
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	50000400 	.word	0x50000400
 8001c58:	50000500 	.word	0x50000500
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d126      	bne.n	8001ccc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d115      	bne.n	8001cc4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7fe fa7f 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cca:	e004      	b.n	8001cd6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff f9bd 	bl	800106c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff f9ad 	bl	8001080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <ADC_Enable+0x2c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <ADC_Enable+0x2c>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <ADC_Enable+0x2e>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d13c      	bne.n	8001ddc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <ADC_Enable+0xb8>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e028      	b.n	8001dde <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d9c:	f7ff f938 	bl	8001010 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001da2:	e014      	b.n	8001dce <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001da4:	f7ff f934 	bl	8001010 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d90d      	bls.n	8001dce <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e007      	b.n	8001dde <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d1e3      	bne.n	8001da4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	8000003f 	.word	0x8000003f

08001dec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <ADC_Disable+0x2c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <ADC_Disable+0x2c>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <ADC_Disable+0x2e>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030d 	and.w	r3, r3, #13
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10f      	bne.n	8001e4c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0202 	orr.w	r2, r2, #2
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2203      	movs	r2, #3
 8001e42:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e44:	f7ff f8e4 	bl	8001010 <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e4a:	e022      	b.n	8001e92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f043 0210 	orr.w	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01c      	b.n	8001ea2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e68:	f7ff f8d2 	bl	8001010 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d90d      	bls.n	8001e92 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e007      	b.n	8001ea2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d0e3      	beq.n	8001e68 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e037      	b.n	8002154 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f940 	bl	80023bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}  
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_DMA_Start_IT+0x20>
 8002178:	2302      	movs	r3, #2
 800217a:	e04a      	b.n	8002212 <HAL_DMA_Start_IT+0xb6>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218a:	2b01      	cmp	r3, #1
 800218c:	d13a      	bne.n	8002204 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8d4 	bl	8002360 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 020e 	orr.w	r2, r2, #14
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 020a 	orr.w	r2, r2, #10
 80021e0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e005      	b.n	8002210 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002210:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2204      	movs	r2, #4
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x72>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01f      	beq.n	800228c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0204 	bic.w	r2, r2, #4
 8002268:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	2104      	movs	r1, #4
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d06a      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800228a:	e065      	b.n	8002358 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2202      	movs	r2, #2
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02c      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xdc>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 020a 	bic.w	r2, r2, #10
 80022c2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	2102      	movs	r1, #2
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d035      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022f4:	e030      	b.n	8002358 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2208      	movs	r2, #8
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13e>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 020e 	bic.w	r2, r2, #14
 800231e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
    }
  }
}  
 8002356:	e7ff      	b.n	8002358 <HAL_DMA_IRQHandler+0x13e>
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d108      	bne.n	80023a0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800239e:	e007      	b.n	80023b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <DMA_CalcBaseAndBitshift+0x60>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d80f      	bhi.n	80023f0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <DMA_CalcBaseAndBitshift+0x64>)
 80023d8:	4413      	add	r3, r2
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <DMA_CalcBaseAndBitshift+0x68>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <DMA_CalcBaseAndBitshift+0x6c>)
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80023ee:	e00e      	b.n	800240e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <DMA_CalcBaseAndBitshift+0x70>)
 80023f8:	4413      	add	r3, r2
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <DMA_CalcBaseAndBitshift+0x68>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <DMA_CalcBaseAndBitshift+0x74>)
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40020407 	.word	0x40020407
 8002420:	bffdfff8 	.word	0xbffdfff8
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	40020000 	.word	0x40020000
 800242c:	bffdfbf8 	.word	0xbffdfbf8
 8002430:	40020400 	.word	0x40020400

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002442:	e154      	b.n	80026ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8146 	beq.w	80026e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x38>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d123      	bne.n	80024b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	6939      	ldr	r1, [r7, #16]
 80024b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d00b      	beq.n	8002508 <HAL_GPIO_Init+0xd4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d007      	beq.n	8002508 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b12      	cmp	r3, #18
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80a0 	beq.w	80026e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_GPIO_Init+0x2d8>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_GPIO_Init+0x2d8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_GPIO_Init+0x2d8>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025c0:	4a53      	ldr	r2, [pc, #332]	; (8002710 <HAL_GPIO_Init+0x2dc>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ea:	d019      	beq.n	8002620 <HAL_GPIO_Init+0x1ec>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_GPIO_Init+0x2e0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_Init+0x1e8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_GPIO_Init+0x2e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x1e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_GPIO_Init+0x2e8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1e0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a46      	ldr	r2, [pc, #280]	; (8002720 <HAL_GPIO_Init+0x2ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x1dc>
 800260c:	2304      	movs	r3, #4
 800260e:	e008      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002610:	2305      	movs	r3, #5
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002614:	2303      	movs	r3, #3
 8002616:	e004      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002618:	2302      	movs	r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002620:	2300      	movs	r3, #0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002632:	4937      	ldr	r1, [pc, #220]	; (8002710 <HAL_GPIO_Init+0x2dc>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002640:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026b8:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f aea3 	bne.w	8002444 <HAL_GPIO_Init+0x10>
  }
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	48000400 	.word	0x48000400
 8002718:	48000800 	.word	0x48000800
 800271c:	48000c00 	.word	0x48000c00
 8002720:	48001000 	.word	0x48001000
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002774:	e002      	b.n	800277c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	b08b      	sub	sp, #44	; 0x2c
 800278c:	af06      	add	r7, sp, #24
 800278e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0a6      	b.n	80028e8 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f005 ffa4 	bl	80086fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 f8f9 	bl	80059b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e035      	b.n	8002838 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	4413      	add	r3, r2
 80027d4:	3329      	adds	r3, #41	; 0x29
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	4413      	add	r3, r2
 80027e2:	3328      	adds	r3, #40	; 0x28
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	b291      	uxth	r1, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	015b      	lsls	r3, r3, #5
 80027f2:	4413      	add	r3, r2
 80027f4:	3336      	adds	r3, #54	; 0x36
 80027f6:	460a      	mov	r2, r1
 80027f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	015b      	lsls	r3, r3, #5
 8002800:	4413      	add	r3, r2
 8002802:	332b      	adds	r3, #43	; 0x2b
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	015b      	lsls	r3, r3, #5
 800280e:	4413      	add	r3, r2
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	4413      	add	r3, r2
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	3302      	adds	r3, #2
 800282a:	015b      	lsls	r3, r3, #5
 800282c:	4413      	add	r3, r2
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	3301      	adds	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3c4      	bcc.n	80027cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
 8002846:	e031      	b.n	80028ac <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	4413      	add	r3, r2
 8002850:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	015b      	lsls	r3, r3, #5
 800285e:	4413      	add	r3, r2
 8002860:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	4413      	add	r3, r2
 8002870:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	4413      	add	r3, r2
 8002880:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	4413      	add	r3, r2
 8002890:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	330a      	adds	r3, #10
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	4413      	add	r3, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3301      	adds	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3c8      	bcc.n	8002848 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	687e      	ldr	r6, [r7, #4]
 80028be:	466d      	mov	r5, sp
 80028c0:	f106 0410 	add.w	r4, r6, #16
 80028c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	602b      	str	r3, [r5, #0]
 80028cc:	1d33      	adds	r3, r6, #4
 80028ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	f003 f88e 	bl	80059f2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_PCD_Start+0x16>
 8002902:	2302      	movs	r3, #2
 8002904:	e016      	b.n	8002934 <HAL_PCD_Start+0x44>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800290e:	2101      	movs	r1, #1
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f006 f983 	bl	8008c1c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f8d4 	bl	8006ac8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 f82f 	bl	8005988 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f004 f8c8 	bl	8006ade <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002958:	d102      	bne.n	8002960 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fae8 	bl	8002f30 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f004 f8ba 	bl	8006ade <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	d112      	bne.n	800299c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002988:	b292      	uxth	r2, r2
 800298a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f005 ff4f 	bl	8008832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002994:	2100      	movs	r1, #0
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8d2 	bl	8002b40 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 f89c 	bl	8006ade <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b0:	d10b      	bne.n	80029ca <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f885 	bl	8006ade <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	d10b      	bne.n	80029f8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 f86e 	bl	8006ade <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d126      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0204 	bic.w	r2, r2, #4
 8002a20:	b292      	uxth	r2, r2
 8002a22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f005 ff30 	bl	80088a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 f83c 	bl	8006ade <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a70:	d131      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0208 	orr.w	r2, r2, #8
 8002a84:	b292      	uxth	r2, r2
 8002a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f80d 	bl	8006ade <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d002      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f005 fecd 	bl	8008870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 ffff 	bl	8006ade <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aea:	d10e      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002afe:	b292      	uxth	r2, r2
 8002b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f005 fe86 	bl	8008816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 ffe5 	bl	8006ade <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d10b      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b32:	b292      	uxth	r2, r2
 8002b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_PCD_SetAddress+0x1a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e013      	b.n	8002b82 <HAL_PCD_SetAddress+0x42>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 ff94 	bl	8006aa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	4608      	mov	r0, r1
 8002b94:	4611      	mov	r1, r2
 8002b96:	461a      	mov	r2, r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	70fb      	strb	r3, [r7, #3]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	803b      	strh	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da0b      	bge.n	8002bc8 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	3328      	adds	r3, #40	; 0x28
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	705a      	strb	r2, [r3, #1]
 8002bc6:	e00b      	b.n	8002be0 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bec:	883a      	ldrh	r2, [r7, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	78ba      	ldrb	r2, [r7, #2]
 8002bf6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	785b      	ldrb	r3, [r3, #1]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c0a:	78bb      	ldrb	r3, [r7, #2]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d102      	bne.n	8002c16 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_EP_Open+0x9a>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e00e      	b.n	8002c42 <HAL_PCD_EP_Open+0xb8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 ff02 	bl	8005a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002c40:	7afb      	ldrb	r3, [r7, #11]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0b      	bge.n	8002c76 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	015b      	lsls	r3, r3, #5
 8002c66:	3328      	adds	r3, #40	; 0x28
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	e00b      	b.n	8002c8e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	015b      	lsls	r3, r3, #5
 8002c7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_EP_Close+0x5e>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e00e      	b.n	8002cc6 <HAL_PCD_EP_Close+0x7c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 f9b4 	bl	8006024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	015b      	lsls	r3, r3, #5
 8002ce6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6979      	ldr	r1, [r7, #20]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fb13 	bl	8006350 <USB_EPStartXfer>
 8002d2a:	e005      	b.n	8002d38 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6979      	ldr	r1, [r7, #20]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fb0c 	bl	8006350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	330a      	adds	r3, #10
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	015b      	lsls	r3, r3, #5
 8002d84:	3328      	adds	r3, #40	; 0x28
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2201      	movs	r2, #1
 8002da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002db0:	7afb      	ldrb	r3, [r7, #11]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 fac5 	bl	8006350 <USB_EPStartXfer>
 8002dc6:	e005      	b.n	8002dd4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fabe 	bl	8006350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 0207 	and.w	r2, r3, #7
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d901      	bls.n	8002dfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e046      	b.n	8002e8a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da0b      	bge.n	8002e1c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	3328      	adds	r3, #40	; 0x28
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	705a      	strb	r2, [r3, #1]
 8002e1a:	e009      	b.n	8002e30 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	015b      	lsls	r3, r3, #5
 8002e20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_SetStall+0x72>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e01c      	b.n	8002e8a <HAL_PCD_EP_SetStall+0xac>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fd48 	bl	80068f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f003 fe3f 	bl	8006afe <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d901      	bls.n	8002eb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e03a      	b.n	8002f26 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da0b      	bge.n	8002ed0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	3328      	adds	r3, #40	; 0x28
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	705a      	strb	r2, [r3, #1]
 8002ece:	e00b      	b.n	8002ee8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_EP_ClrStall+0x76>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e00e      	b.n	8002f26 <HAL_PCD_EP_ClrStall+0x94>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fd2e 	bl	8006978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f38:	e286      	b.n	8003448 <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f42:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f44:	8afb      	ldrh	r3, [r7, #22]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002f4e:	7d7b      	ldrb	r3, [r7, #21]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8146 	bne.w	80031e2 <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f56:	8afb      	ldrh	r3, [r7, #22]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d151      	bne.n	8003004 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f70:	b29c      	uxth	r4, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3328      	adds	r3, #40	; 0x28
 8002f86:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 fc0f 	bl	80087e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8238 	beq.w	8003448 <PCD_EP_ISR_Handler+0x518>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 8233 	bne.w	8003448 <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003002:	e221      	b.n	8003448 <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800300a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003014:	8a7b      	ldrh	r3, [r7, #18]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	2b00      	cmp	r3, #0
 800301c:	d033      	beq.n	8003086 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	3306      	adds	r3, #6
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800305c:	b29b      	uxth	r3, r3
 800305e:	f003 fd9f 	bl	8006ba0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29a      	uxth	r2, r3
 800306a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800306e:	4013      	ands	r3, r2
 8003070:	b29c      	uxth	r4, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800307a:	b292      	uxth	r2, r2
 800307c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 fb88 	bl	8008794 <HAL_PCD_SetupStageCallback>
 8003084:	e1e0      	b.n	8003448 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003086:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f280 81dc 	bge.w	8003448 <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29a      	uxth	r2, r3
 8003098:	f640 738f 	movw	r3, #3983	; 0xf8f
 800309c:	4013      	ands	r3, r2
 800309e:	b29c      	uxth	r4, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80030a8:	b292      	uxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	3306      	adds	r3, #6
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d019      	beq.n	8003114 <PCD_EP_ISR_Handler+0x1e4>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f003 fd51 	bl	8006ba0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	441a      	add	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800310c:	2100      	movs	r1, #0
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f005 fb52 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461c      	mov	r4, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	441c      	add	r4, r3
 8003126:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d110      	bne.n	8003156 <PCD_EP_ISR_Handler+0x226>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313c:	b29a      	uxth	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314e:	b29a      	uxth	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	e02f      	b.n	80031b6 <PCD_EP_ISR_Handler+0x286>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b3e      	cmp	r3, #62	; 0x3e
 800315c:	d813      	bhi.n	8003186 <PCD_EP_ISR_Handler+0x256>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <PCD_EP_ISR_Handler+0x248>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3301      	adds	r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	b29b      	uxth	r3, r3
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	b29a      	uxth	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e017      	b.n	80031b6 <PCD_EP_ISR_Handler+0x286>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <PCD_EP_ISR_Handler+0x270>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3b01      	subs	r3, #1
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	b29c      	uxth	r4, r3
 80031c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031cc:	b29c      	uxth	r4, r3
 80031ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031d2:	b29c      	uxth	r4, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4ba2      	ldr	r3, [pc, #648]	; (8003464 <PCD_EP_ISR_Handler+0x534>)
 80031da:	4323      	orrs	r3, r4
 80031dc:	b29b      	uxth	r3, r3
 80031de:	8013      	strh	r3, [r2, #0]
 80031e0:	e132      	b.n	8003448 <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	7d7b      	ldrb	r3, [r7, #21]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f280 80d1 	bge.w	800339e <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	7d7b      	ldrb	r3, [r7, #21]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29a      	uxth	r2, r3
 800320c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003210:	4013      	ands	r3, r2
 8003212:	b29c      	uxth	r4, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	7d7b      	ldrb	r3, [r7, #21]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003224:	b292      	uxth	r2, r2
 8003226:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003228:	7d7b      	ldrb	r3, [r7, #21]
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	7b1b      	ldrb	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d121      	bne.n	8003282 <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	3306      	adds	r3, #6
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003266:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003268:	8bfb      	ldrh	r3, [r7, #30]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d072      	beq.n	8003354 <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6959      	ldr	r1, [r3, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	8bfb      	ldrh	r3, [r7, #30]
 800327c:	f003 fc90 	bl	8006ba0 <USB_ReadPMA>
 8003280:	e068      	b.n	8003354 <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d021      	beq.n	80032e0 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	3302      	adds	r3, #2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80032c6:	8bfb      	ldrh	r3, [r7, #30]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02a      	beq.n	8003322 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6959      	ldr	r1, [r3, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	891a      	ldrh	r2, [r3, #8]
 80032d8:	8bfb      	ldrh	r3, [r7, #30]
 80032da:	f003 fc61 	bl	8006ba0 <USB_ReadPMA>
 80032de:	e020      	b.n	8003322 <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	3306      	adds	r3, #6
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003308:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800330a:	8bfb      	ldrh	r3, [r7, #30]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6959      	ldr	r1, [r3, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	895a      	ldrh	r2, [r3, #10]
 800331c:	8bfb      	ldrh	r3, [r7, #30]
 800331e:	f003 fc3f 	bl	8006ba0 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	b29c      	uxth	r4, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <PCD_EP_ISR_Handler+0x538>)
 800334e:	4323      	orrs	r3, r4
 8003350:	b29b      	uxth	r3, r3
 8003352:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	8bfb      	ldrh	r3, [r7, #30]
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	8bfb      	ldrh	r3, [r7, #30]
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <PCD_EP_ISR_Handler+0x44e>
 8003374:	8bfa      	ldrh	r2, [r7, #30]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	429a      	cmp	r2, r3
 800337c:	d206      	bcs.n	800338c <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f005 fa17 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
 800338a:	e008      	b.n	800339e <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	7819      	ldrb	r1, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fc98 	bl	8002cce <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800339e:	8a7b      	ldrh	r3, [r7, #18]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d04f      	beq.n	8003448 <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 80033a8:	7d7b      	ldrb	r3, [r7, #21]
 80033aa:	015b      	lsls	r3, r3, #5
 80033ac:	3328      	adds	r3, #40	; 0x28
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	7d7b      	ldrb	r3, [r7, #21]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	b29c      	uxth	r4, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	7d7b      	ldrb	r3, [r7, #21]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80033de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	3302      	adds	r3, #2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	441a      	add	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f005 f9da 	bl	80087e8 <HAL_PCD_DataInStageCallback>
 8003434:	e008      	b.n	8003448 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	7819      	ldrb	r1, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fc92 	bl	8002d6c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003450:	b29b      	uxth	r3, r3
 8003452:	b21b      	sxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	f6ff ad70 	blt.w	8002f3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3724      	adds	r7, #36	; 0x24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	ffff8080 	.word	0xffff8080
 8003468:	ffff80c0 	.word	0xffff80c0

0800346c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	4613      	mov	r3, r2
 800347c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	015b      	lsls	r3, r3, #5
 8003492:	3328      	adds	r3, #40	; 0x28
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e006      	b.n	80034aa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	015b      	lsls	r3, r3, #5
 80034a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034aa:	893b      	ldrh	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	80da      	strh	r2, [r3, #6]
 80034be:	e00b      	b.n	80034d8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2201      	movs	r2, #1
 80034c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f000 bef4 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 816a 	beq.w	80037e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003512:	4bb3      	ldr	r3, [pc, #716]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800351e:	4bb0      	ldr	r3, [pc, #704]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d159      	bne.n	80035de <HAL_RCC_OscConfig+0xf6>
 800352a:	4bad      	ldr	r3, [pc, #692]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003536:	d152      	bne.n	80035de <HAL_RCC_OscConfig+0xf6>
 8003538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800354c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <HAL_RCC_OscConfig+0x82>
 8003564:	4b9e      	ldr	r3, [pc, #632]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0xae>
 800356a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800356e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800357e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003582:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003586:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003592:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800359a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800359e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035a2:	fa92 f2a2 	rbit	r2, r2
 80035a6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035ae:	fab2 f282 	clz	r2, r2
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f042 0220 	orr.w	r2, r2, #32
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 810c 	beq.w	80037e4 <HAL_RCC_OscConfig+0x2fc>
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 8106 	bne.w	80037e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f000 be86 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x110>
 80035ea:	4b7d      	ldr	r3, [pc, #500]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7c      	ldr	r2, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e030      	b.n	800365a <HAL_RCC_OscConfig+0x172>
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x134>
 8003602:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a76      	ldr	r2, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b74      	ldr	r3, [pc, #464]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a73      	ldr	r2, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01e      	b.n	800365a <HAL_RCC_OscConfig+0x172>
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003626:	d10c      	bne.n	8003642 <HAL_RCC_OscConfig+0x15a>
 8003628:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6c      	ldr	r2, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800362e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e00b      	b.n	800365a <HAL_RCC_OscConfig+0x172>
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a63      	ldr	r2, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800365a:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f023 020f 	bic.w	r2, r3, #15
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	495d      	ldr	r1, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d059      	beq.n	800372c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fcca 	bl	8001010 <HAL_GetTick>
 800367c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003682:	f7fd fcc5 	bl	8001010 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d902      	bls.n	8003698 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	f000 be29 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
 8003698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_RCC_OscConfig+0x1e2>
 80036c4:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x20e>
 80036ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003702:	fa92 f2a2 	rbit	r2, r2
 8003706:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800370a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800370e:	fab2 f282 	clz	r2, r2
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f002 021f 	and.w	r2, r2, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ab      	beq.n	8003682 <HAL_RCC_OscConfig+0x19a>
 800372a:	e05c      	b.n	80037e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fc70 	bl	8001010 <HAL_GetTick>
 8003730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003736:	f7fd fc6b 	bl	8001010 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d902      	bls.n	800374c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	f000 bdcf 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
 800374c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003750:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003760:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <HAL_RCC_OscConfig+0x296>
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x2c2>
 800377e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003782:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003792:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003796:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800379a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_RCC_OscConfig+0x2f8>)
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037b6:	fa92 f2a2 	rbit	r2, r2
 80037ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037c2:	fab2 f282 	clz	r2, r2
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f002 021f 	and.w	r2, r2, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ab      	bne.n	8003736 <HAL_RCC_OscConfig+0x24e>
 80037de:	e002      	b.n	80037e6 <HAL_RCC_OscConfig+0x2fe>
 80037e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 816f 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037f6:	4bd0      	ldr	r3, [pc, #832]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003802:	4bcd      	ldr	r3, [pc, #820]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b08      	cmp	r3, #8
 800380c:	d16c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x400>
 800380e:	4bca      	ldr	r3, [pc, #808]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d166      	bne.n	80038e8 <HAL_RCC_OscConfig+0x400>
 800381a:	2302      	movs	r3, #2
 800381c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800382c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x362>
 8003844:	4bbc      	ldr	r3, [pc, #752]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	e013      	b.n	8003872 <HAL_RCC_OscConfig+0x38a>
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800385c:	2302      	movs	r3, #2
 800385e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003862:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800386e:	4bb2      	ldr	r3, [pc, #712]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2202      	movs	r2, #2
 8003874:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003878:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003884:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f000 bd1b 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4ba0      	ldr	r3, [pc, #640]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	21f8      	movs	r1, #248	; 0xf8
 80038c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038cc:	fa91 f1a1 	rbit	r1, r1
 80038d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038d8:	fab1 f181 	clz	r1, r1
 80038dc:	b2c9      	uxtb	r1, r1
 80038de:	408b      	lsls	r3, r1
 80038e0:	4995      	ldr	r1, [pc, #596]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e0f5      	b.n	8003ad4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8085 	beq.w	80039fe <HAL_RCC_OscConfig+0x516>
 80038f4:	2301      	movs	r3, #1
 80038f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003906:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	461a      	mov	r2, r3
 800391c:	2301      	movs	r3, #1
 800391e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fb76 	bl	8001010 <HAL_GetTick>
 8003924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fb71 	bl	8001010 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	f000 bcd5 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
 8003940:	2302      	movs	r3, #2
 8003942:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003952:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_RCC_OscConfig+0x488>
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e013      	b.n	8003998 <HAL_RCC_OscConfig+0x4b0>
 8003970:	2302      	movs	r3, #2
 8003972:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003982:	2302      	movs	r3, #2
 8003984:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003988:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2202      	movs	r2, #2
 800399a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800399e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039a2:	fa92 f2a2 	rbit	r2, r2
 80039a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0220 	orr.w	r2, r2, #32
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 021f 	and.w	r2, r2, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0af      	beq.n	800392a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	21f8      	movs	r1, #248	; 0xf8
 80039da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039e2:	fa91 f1a1 	rbit	r1, r1
 80039e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039ee:	fab1 f181 	clz	r1, r1
 80039f2:	b2c9      	uxtb	r1, r1
 80039f4:	408b      	lsls	r3, r1
 80039f6:	4950      	ldr	r1, [pc, #320]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
 80039fc:	e06a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x5ec>
 80039fe:	2301      	movs	r3, #1
 8003a00:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fd faf1 	bl	8001010 <HAL_GetTick>
 8003a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fd faec 	bl	8001010 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d902      	bls.n	8003a4a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	f000 bc50 	b.w	80042ea <HAL_RCC_OscConfig+0xe02>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_RCC_OscConfig+0x592>
 8003a74:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e013      	b.n	8003aa2 <HAL_RCC_OscConfig+0x5ba>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x650>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003aa8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003aac:	fa92 f2a2 	rbit	r2, r2
 8003ab0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ab4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1af      	bne.n	8003a34 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80da 	beq.w	8003c98 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d069      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x6da>
 8003aee:	2301      	movs	r3, #1
 8003af0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x654>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	461a      	mov	r2, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fd fa7a 	bl	8001010 <HAL_GetTick>
 8003b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fd fa75 	bl	8001010 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d906      	bls.n	8003b40 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e3d9      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	10908120 	.word	0x10908120
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	fa93 f2a3 	rbit	r2, r3
 8003b64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fa93 f2a3 	rbit	r2, r3
 8003b7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	6019      	str	r1, [r3, #0]
 8003b8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f1a3 	rbit	r1, r3
 8003b98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b9c:	6019      	str	r1, [r3, #0]
  return result;
 8003b9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0b0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x63a>
 8003bc0:	e06a      	b.n	8003c98 <HAL_RCC_OscConfig+0x7b0>
 8003bc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	fa93 f2a3 	rbit	r2, r3
 8003bd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bd8:	601a      	str	r2, [r3, #0]
  return result;
 8003bda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bde:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <HAL_RCC_OscConfig+0x934>)
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fa0c 	bl	8001010 <HAL_GetTick>
 8003bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	e009      	b.n	8003c12 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfe:	f7fd fa07 	bl	8001010 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e36b      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 8003c12:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	fa93 f2a3 	rbit	r2, r3
 8003c24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c2e:	2202      	movs	r2, #2
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5a:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c62:	2102      	movs	r1, #2
 8003c64:	6019      	str	r1, [r3, #0]
 8003c66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f1a3 	rbit	r1, r3
 8003c70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c74:	6019      	str	r1, [r3, #0]
  return result;
 8003c76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1b2      	bne.n	8003bfe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8158 	beq.w	8003f58 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a56      	ldr	r2, [pc, #344]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <HAL_RCC_OscConfig+0x938>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11a      	bne.n	8003d22 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cec:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_OscConfig+0x938>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_RCC_OscConfig+0x938>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f98a 	bl	8001010 <HAL_GetTick>
 8003cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e009      	b.n	8003d16 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fd f985 	bl	8001010 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e2e9      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <HAL_RCC_OscConfig+0x938>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ef      	beq.n	8003d02 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x852>
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4a39      	ldr	r2, [pc, #228]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6213      	str	r3, [r2, #32]
 8003d38:	e02f      	b.n	8003d9a <HAL_RCC_OscConfig+0x8b2>
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x876>
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e01d      	b.n	8003d9a <HAL_RCC_OscConfig+0x8b2>
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x89a>
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x8b2>
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6213      	str	r3, [r2, #32]
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d06b      	beq.n	8003e7c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7fd f934 	bl	8001010 <HAL_GetTick>
 8003da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd f92f 	bl	8001010 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e291      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 8003dc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003dca:	2202      	movs	r2, #2
 8003dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	fa93 f2a3 	rbit	r2, r3
 8003dd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003de2:	2202      	movs	r2, #2
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	fa93 f2a3 	rbit	r2, r3
 8003df0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003df4:	601a      	str	r2, [r3, #0]
  return result;
 8003df6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003dfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCC_OscConfig+0x93c>
 8003e10:	4b01      	ldr	r3, [pc, #4]	; (8003e18 <HAL_RCC_OscConfig+0x930>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	e014      	b.n	8003e40 <HAL_RCC_OscConfig+0x958>
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	10908120 	.word	0x10908120
 8003e20:	40007000 	.word	0x40007000
 8003e24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e28:	2202      	movs	r2, #2
 8003e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	4bbb      	ldr	r3, [pc, #748]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e44:	2102      	movs	r1, #2
 8003e46:	6011      	str	r1, [r2, #0]
 8003e48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	fa92 f1a2 	rbit	r1, r2
 8003e52:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e56:	6011      	str	r1, [r2, #0]
  return result;
 8003e58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	fab2 f282 	clz	r2, r2
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	f002 021f 	and.w	r2, r2, #31
 8003e6e:	2101      	movs	r1, #1
 8003e70:	fa01 f202 	lsl.w	r2, r1, r2
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d099      	beq.n	8003dae <HAL_RCC_OscConfig+0x8c6>
 8003e7a:	e063      	b.n	8003f44 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fd f8c8 	bl	8001010 <HAL_GetTick>
 8003e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e84:	e00b      	b.n	8003e9e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd f8c3 	bl	8001010 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e225      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 8003e9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003eba:	2202      	movs	r2, #2
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f2a3 	rbit	r2, r3
 8003ec8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ecc:	601a      	str	r2, [r3, #0]
  return result;
 8003ece:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ed2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d102      	bne.n	8003eee <HAL_RCC_OscConfig+0xa06>
 8003ee8:	4b90      	ldr	r3, [pc, #576]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	e00d      	b.n	8003f0a <HAL_RCC_OscConfig+0xa22>
 8003eee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f0e:	2102      	movs	r1, #2
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	fa92 f1a2 	rbit	r1, r2
 8003f1c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f20:	6011      	str	r1, [r2, #0]
  return result;
 8003f22:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	fab2 f282 	clz	r2, r2
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f002 021f 	and.w	r2, r2, #31
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1a0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f44:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4c:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 81c2 	beq.w	80042e8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f64:	4b71      	ldr	r3, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	f000 819c 	beq.w	80042aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f040 8114 	bne.w	80041a6 <HAL_RCC_OscConfig+0xcbe>
 8003f7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f96:	601a      	str	r2, [r3, #0]
  return result;
 8003f98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd f82c 	bl	8001010 <HAL_GetTick>
 8003fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbc:	e009      	b.n	8003fd2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fd f827 	bl	8001010 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e18b      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 8003fd2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f2a3 	rbit	r2, r3
 8003fe6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fea:	601a      	str	r2, [r3, #0]
  return result;
 8003fec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0xb24>
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	e01b      	b.n	8004044 <HAL_RCC_OscConfig+0xb5c>
 800400c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800402a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	fa93 f2a3 	rbit	r2, r3
 800403a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004048:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fa92 f1a2 	rbit	r1, r2
 8004058:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800405c:	6011      	str	r1, [r2, #0]
  return result;
 800405e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	fab2 f282 	clz	r2, r2
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	f042 0220 	orr.w	r2, r2, #32
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	f002 021f 	and.w	r2, r2, #31
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f202 	lsl.w	r2, r1, r2
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d19e      	bne.n	8003fbe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	430b      	orrs	r3, r1
 8004096:	4925      	ldr	r1, [pc, #148]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
 800409c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040b4:	601a      	str	r2, [r3, #0]
  return result;
 80040b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040ba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	461a      	mov	r2, r3
 80040ce:	2301      	movs	r3, #1
 80040d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fc ff9d 	bl	8001010 <HAL_GetTick>
 80040d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040da:	e009      	b.n	80040f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fc ff98 	bl	8001010 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0fc      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 80040f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f2a3 	rbit	r2, r3
 8004104:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004108:	601a      	str	r2, [r3, #0]
  return result;
 800410a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800410e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0xc48>
 8004124:	4b01      	ldr	r3, [pc, #4]	; (800412c <HAL_RCC_OscConfig+0xc44>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	e01e      	b.n	8004168 <HAL_RCC_OscConfig+0xc80>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800414e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	fa93 f2a3 	rbit	r2, r3
 800415e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_OscConfig+0xe0c>)
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800416c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	fa92 f1a2 	rbit	r1, r2
 800417c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004180:	6011      	str	r1, [r2, #0]
  return result;
 8004182:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	fab2 f282 	clz	r2, r2
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	f042 0220 	orr.w	r2, r2, #32
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f002 021f 	and.w	r2, r2, #31
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f202 	lsl.w	r2, r1, r2
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d09b      	beq.n	80040dc <HAL_RCC_OscConfig+0xbf4>
 80041a4:	e0a0      	b.n	80042e8 <HAL_RCC_OscConfig+0xe00>
 80041a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	fa93 f2a3 	rbit	r2, r3
 80041ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041be:	601a      	str	r2, [r3, #0]
  return result;
 80041c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fc ff18 	bl	8001010 <HAL_GetTick>
 80041e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fc ff13 	bl	8001010 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e077      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
 80041fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	fa93 f2a3 	rbit	r2, r3
 800420e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004212:	601a      	str	r2, [r3, #0]
  return result;
 8004214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004218:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d102      	bne.n	8004234 <HAL_RCC_OscConfig+0xd4c>
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <HAL_RCC_OscConfig+0xe0c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0xd84>
 8004234:	f107 0320 	add.w	r3, r7, #32
 8004238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800423c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	f107 0320 	add.w	r3, r7, #32
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f2a3 	rbit	r2, r3
 8004248:	f107 031c 	add.w	r3, r7, #28
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f107 0318 	add.w	r3, r7, #24
 8004252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f107 0318 	add.w	r3, r7, #24
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	fa93 f2a3 	rbit	r2, r3
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <HAL_RCC_OscConfig+0xe0c>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f107 0210 	add.w	r2, r7, #16
 8004270:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004274:	6011      	str	r1, [r2, #0]
 8004276:	f107 0210 	add.w	r2, r7, #16
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	fa92 f1a2 	rbit	r1, r2
 8004280:	f107 020c 	add.w	r2, r7, #12
 8004284:	6011      	str	r1, [r2, #0]
  return result;
 8004286:	f107 020c 	add.w	r2, r7, #12
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	fab2 f282 	clz	r2, r2
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	f042 0220 	orr.w	r2, r2, #32
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f002 021f 	and.w	r2, r2, #31
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d19e      	bne.n	80041e6 <HAL_RCC_OscConfig+0xcfe>
 80042a8:	e01e      	b.n	80042e8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e018      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_RCC_OscConfig+0xe0c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b09e      	sub	sp, #120	; 0x78
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e162      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b90      	ldr	r3, [pc, #576]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d910      	bls.n	8004340 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b8d      	ldr	r3, [pc, #564]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 0207 	bic.w	r2, r3, #7
 8004326:	498b      	ldr	r1, [pc, #556]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b89      	ldr	r3, [pc, #548]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e14a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b82      	ldr	r3, [pc, #520]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	497f      	ldr	r1, [pc, #508]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80dc 	beq.w	8004524 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d13c      	bne.n	80043ee <HAL_RCC_ClockConfig+0xf6>
 8004374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004378:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d102      	bne.n	800439e <HAL_RCC_ClockConfig+0xa6>
 8004398:	4b6f      	ldr	r3, [pc, #444]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	e00f      	b.n	80043be <HAL_RCC_ClockConfig+0xc6>
 800439e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	667b      	str	r3, [r7, #100]	; 0x64
 80043ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
 80043b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ba:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80043c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c6:	fa92 f2a2 	rbit	r2, r2
 80043ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043ce:	fab2 f282 	clz	r2, r2
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	f002 021f 	and.w	r2, r2, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f202 	lsl.w	r2, r1, r2
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d17b      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0f3      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d13c      	bne.n	8004470 <HAL_RCC_ClockConfig+0x178>
 80043f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HAL_RCC_ClockConfig+0x128>
 800441a:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	e00f      	b.n	8004440 <HAL_RCC_ClockConfig+0x148>
 8004420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004424:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
 800442e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
 8004434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	4b46      	ldr	r3, [pc, #280]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004444:	63ba      	str	r2, [r7, #56]	; 0x38
 8004446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004448:	fa92 f2a2 	rbit	r2, r2
 800444c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800444e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004450:	fab2 f282 	clz	r2, r2
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f042 0220 	orr.w	r2, r2, #32
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	f002 021f 	and.w	r2, r2, #31
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f202 	lsl.w	r2, r1, r2
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13a      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b2      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
 8004470:	2302      	movs	r3, #2
 8004472:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1a0>
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	e00d      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1bc>
 8004498:	2302      	movs	r3, #2
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	2302      	movs	r3, #2
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2202      	movs	r2, #2
 80044b6:	61ba      	str	r2, [r7, #24]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	617a      	str	r2, [r7, #20]
  return result;
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	f042 0220 	orr.w	r2, r2, #32
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f002 021f 	and.w	r2, r2, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e079      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	491a      	ldr	r1, [pc, #104]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f4:	f7fc fd8c 	bl	8001010 <HAL_GetTick>
 80044f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fc:	f7fc fd88 	bl	8001010 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e061      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_RCC_ClockConfig+0x260>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 020c 	and.w	r2, r3, #12
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	429a      	cmp	r2, r3
 8004522:	d1eb      	bne.n	80044fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d214      	bcs.n	800455c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	4906      	ldr	r1, [pc, #24]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCC_ClockConfig+0x25c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e040      	b.n	80045d6 <HAL_RCC_ClockConfig+0x2de>
 8004554:	40022000 	.word	0x40022000
 8004558:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <HAL_RCC_ClockConfig+0x2e8>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	491a      	ldr	r1, [pc, #104]	; (80045e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4912      	ldr	r1, [pc, #72]	; (80045e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800459a:	f000 f829 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 800459e:	4601      	mov	r1, r0
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_RCC_ClockConfig+0x2e8>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a8:	22f0      	movs	r2, #240	; 0xf0
 80045aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	fa92 f2a2 	rbit	r2, r2
 80045b2:	60fa      	str	r2, [r7, #12]
  return result;
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	fab2 f282 	clz	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	40d3      	lsrs	r3, r2
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x2ec>)
 80045c0:	5cd3      	ldrb	r3, [r2, r3]
 80045c2:	fa21 f303 	lsr.w	r3, r1, r3
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <HAL_RCC_ClockConfig+0x2f0>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_RCC_ClockConfig+0x2f4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fcda 	bl	8000f88 <HAL_InitTick>
  
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3778      	adds	r7, #120	; 0x78
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
 80045e4:	08008d3c 	.word	0x08008d3c
 80045e8:	20000004 	.word	0x20000004
 80045ec:	20000008 	.word	0x20000008

080045f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b08b      	sub	sp, #44	; 0x2c
 80045f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800460a:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x30>
 800461a:	2b08      	cmp	r3, #8
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x36>
 800461e:	e03c      	b.n	800469a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004622:	623b      	str	r3, [r7, #32]
      break;
 8004624:	e03c      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800462c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004630:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	fa92 f2a2 	rbit	r2, r2
 8004638:	607a      	str	r2, [r7, #4]
  return result;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	40d3      	lsrs	r3, r2
 8004644:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	220f      	movs	r2, #15
 8004654:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	fa92 f2a2 	rbit	r2, r2
 800465c:	60fa      	str	r2, [r7, #12]
  return result;
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	fab2 f282 	clz	r2, r2
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	40d3      	lsrs	r3, r2
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800466a:	5cd3      	ldrb	r3, [r2, r3]
 800466c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004678:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	e004      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	623b      	str	r3, [r7, #32]
      break;
 8004698:	e002      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800469c:	623b      	str	r3, [r7, #32]
      break;
 800469e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a0:	6a3b      	ldr	r3, [r7, #32]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	372c      	adds	r7, #44	; 0x2c
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	007a1200 	.word	0x007a1200
 80046b8:	08008d4c 	.word	0x08008d4c
 80046bc:	08008d5c 	.word	0x08008d5c
 80046c0:	003d0900 	.word	0x003d0900

080046c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b092      	sub	sp, #72	; 0x48
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80d7 	beq.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e8:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10e      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	61d3      	str	r3, [r2, #28]
 8004700:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004712:	4b45      	ldr	r3, [pc, #276]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471e:	4b42      	ldr	r3, [pc, #264]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a41      	ldr	r2, [pc, #260]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fc fc71 	bl	8001010 <HAL_GetTick>
 800472e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fc fc6d 	bl	8001010 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e169      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004750:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8084 	beq.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800476c:	429a      	cmp	r2, r3
 800476e:	d07c      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004770:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	2301      	movs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04b      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fc fc1d 	bl	8001010 <HAL_GetTick>
 80047d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fc fc19 	bl	8001010 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e113      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80047f0:	2302      	movs	r3, #2
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	2302      	movs	r3, #2
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	61fb      	str	r3, [r7, #28]
  return result;
 8004808:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d108      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800481e:	4b01      	ldr	r3, [pc, #4]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	e00d      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	10908100 	.word	0x10908100
 8004830:	2302      	movs	r3, #2
 8004832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	4b78      	ldr	r3, [pc, #480]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	613a      	str	r2, [r7, #16]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fa92 f2a2 	rbit	r2, r2
 800484a:	60fa      	str	r2, [r7, #12]
  return result;
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	fab2 f282 	clz	r2, r2
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f002 021f 	and.w	r2, r2, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f202 	lsl.w	r2, r1, r2
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0b7      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800486a:	4b6d      	ldr	r3, [pc, #436]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	496a      	ldr	r1, [pc, #424]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800487c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004880:	2b01      	cmp	r3, #1
 8004882:	d105      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004884:	4b66      	ldr	r3, [pc, #408]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	4a65      	ldr	r2, [pc, #404]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489c:	4b60      	ldr	r3, [pc, #384]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f023 0203 	bic.w	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	495d      	ldr	r1, [pc, #372]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ba:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	4956      	ldr	r1, [pc, #344]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d8:	4b51      	ldr	r3, [pc, #324]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	494e      	ldr	r1, [pc, #312]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f6:	4b4a      	ldr	r3, [pc, #296]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f023 0210 	bic.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4947      	ldr	r1, [pc, #284]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	493f      	ldr	r1, [pc, #252]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004932:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f023 0220 	bic.w	r2, r3, #32
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4938      	ldr	r1, [pc, #224]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	4930      	ldr	r1, [pc, #192]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496e:	4b2c      	ldr	r3, [pc, #176]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	4929      	ldr	r1, [pc, #164]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4921      	ldr	r1, [pc, #132]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	491a      	ldr	r1, [pc, #104]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	4912      	ldr	r1, [pc, #72]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	490b      	ldr	r1, [pc, #44]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	4903      	ldr	r1, [pc, #12]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3748      	adds	r7, #72	; 0x48
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000

08004a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e01d      	b.n	8004a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f9c0 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f000 faf2 	bl	800504c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_TIM_Base_Start+0x50>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d007      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	00010007 	.word	0x00010007

08004ad0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01d      	b.n	8004b1e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f815 	bl	8004b26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 fa9c 	bl	800504c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d122      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa46 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004b82:	e005      	b.n	8004b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa38 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa49 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d122      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0204 	mvn.w	r2, #4
 8004bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa1c 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004bd6:	e005      	b.n	8004be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa0e 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa1f 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0208 	mvn.w	r2, #8
 8004c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f9f2 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f9e4 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9f5 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d122      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0210 	mvn.w	r2, #16
 8004c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2208      	movs	r2, #8
 8004c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9c8 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004c7e:	e005      	b.n	8004c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f9ba 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9cb 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0201 	mvn.w	r2, #1
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f994 	bl	8004fe6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fe3b 	bl	8005960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fe2e 	bl	8005974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f979 	bl	8005036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0220 	mvn.w	r2, #32
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fdee 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e06c      	b.n	8004e6c <HAL_TIM_OC_ConfigChannel+0xf4>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b14      	cmp	r3, #20
 8004da6:	d857      	bhi.n	8004e58 <HAL_TIM_OC_ConfigChannel+0xe0>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e59 	.word	0x08004e59
 8004db8:	08004e59 	.word	0x08004e59
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e13 	.word	0x08004e13
 8004dc4:	08004e59 	.word	0x08004e59
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e59 	.word	0x08004e59
 8004dd0:	08004e21 	.word	0x08004e21
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004e59 	.word	0x08004e59
 8004ddc:	08004e59 	.word	0x08004e59
 8004de0:	08004e2f 	.word	0x08004e2f
 8004de4:	08004e59 	.word	0x08004e59
 8004de8:	08004e59 	.word	0x08004e59
 8004dec:	08004e59 	.word	0x08004e59
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004e59 	.word	0x08004e59
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004e4b 	.word	0x08004e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f9ae 	bl	800516c <TIM_OC1_SetConfig>
      break;
 8004e10:	e023      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa37 	bl	800528c <TIM_OC2_SetConfig>
      break;
 8004e1e:	e01c      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 faba 	bl	80053a0 <TIM_OC3_SetConfig>
      break;
 8004e2c:	e015      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fb3b 	bl	80054b0 <TIM_OC4_SetConfig>
      break;
 8004e3a:	e00e      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb9e 	bl	8005584 <TIM_OC5_SetConfig>
      break;
 8004e48:	e007      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fbfb 	bl	800564c <TIM_OC6_SetConfig>
      break;
 8004e56:	e000      	b.n	8004e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004e58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_ConfigClockSource+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0a8      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x16a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d067      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0x124>
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d80b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x70>
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d073      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x144>
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d802      	bhi.n	8004eda <HAL_TIM_ConfigClockSource+0x66>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d06f      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ed8:	e078      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d06c      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x144>
 8004ede:	2b30      	cmp	r3, #48	; 0x30
 8004ee0:	d06a      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004ee2:	e073      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ee4:	2b70      	cmp	r3, #112	; 0x70
 8004ee6:	d00d      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x90>
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d804      	bhi.n	8004ef6 <HAL_TIM_ConfigClockSource+0x82>
 8004eec:	2b50      	cmp	r3, #80	; 0x50
 8004eee:	d033      	beq.n	8004f58 <HAL_TIM_ConfigClockSource+0xe4>
 8004ef0:	2b60      	cmp	r3, #96	; 0x60
 8004ef2:	d041      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004ef4:	e06a      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	d066      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x156>
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f00:	d017      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f02:	e063      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6899      	ldr	r1, [r3, #8]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f000 fc7a 	bl	800580c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]
      break;
 8004f30:	e04c      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f000 fc63 	bl	800580c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f54:	609a      	str	r2, [r3, #8]
      break;
 8004f56:	e039      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	461a      	mov	r2, r3
 8004f66:	f000 fbd7 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2150      	movs	r1, #80	; 0x50
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fc30 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004f76:	e029      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f000 fbf6 	bl	8005776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2160      	movs	r1, #96	; 0x60
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fc20 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004f96:	e019      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f000 fbb7 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2140      	movs	r1, #64	; 0x40
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fc10 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e009      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f000 fc07 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e000      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <TIM_Base_SetConfig+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00f      	beq.n	8005084 <TIM_Base_SetConfig+0x38>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d00b      	beq.n	8005084 <TIM_Base_SetConfig+0x38>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a39      	ldr	r2, [pc, #228]	; (8005154 <TIM_Base_SetConfig+0x108>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0x38>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a38      	ldr	r2, [pc, #224]	; (8005158 <TIM_Base_SetConfig+0x10c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0x38>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a37      	ldr	r2, [pc, #220]	; (800515c <TIM_Base_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d108      	bne.n	8005096 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <TIM_Base_SetConfig+0x104>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01b      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d017      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <TIM_Base_SetConfig+0x108>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a29      	ldr	r2, [pc, #164]	; (8005158 <TIM_Base_SetConfig+0x10c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a28      	ldr	r2, [pc, #160]	; (800515c <TIM_Base_SetConfig+0x110>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <TIM_Base_SetConfig+0x114>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <TIM_Base_SetConfig+0x118>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <TIM_Base_SetConfig+0x11c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <TIM_Base_SetConfig+0x104>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0xe8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <TIM_Base_SetConfig+0x110>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0xe8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a10      	ldr	r2, [pc, #64]	; (8005160 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0xe8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0f      	ldr	r2, [pc, #60]	; (8005164 <TIM_Base_SetConfig+0x118>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0xe8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a0e      	ldr	r2, [pc, #56]	; (8005168 <TIM_Base_SetConfig+0x11c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d103      	bne.n	800513c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	615a      	str	r2, [r3, #20]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 0302 	bic.w	r3, r3, #2
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <TIM_OC1_SetConfig+0x10c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_OC1_SetConfig+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a2b      	ldr	r2, [pc, #172]	; (800527c <TIM_OC1_SetConfig+0x110>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_OC1_SetConfig+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <TIM_OC1_SetConfig+0x114>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_OC1_SetConfig+0x80>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a29      	ldr	r2, [pc, #164]	; (8005284 <TIM_OC1_SetConfig+0x118>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC1_SetConfig+0x80>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a28      	ldr	r2, [pc, #160]	; (8005288 <TIM_OC1_SetConfig+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10c      	bne.n	8005206 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0308 	bic.w	r3, r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <TIM_OC1_SetConfig+0x10c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00f      	beq.n	800522e <TIM_OC1_SetConfig+0xc2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <TIM_OC1_SetConfig+0x110>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00b      	beq.n	800522e <TIM_OC1_SetConfig+0xc2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <TIM_OC1_SetConfig+0x114>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <TIM_OC1_SetConfig+0xc2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_OC1_SetConfig+0x118>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_OC1_SetConfig+0xc2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a17      	ldr	r2, [pc, #92]	; (8005288 <TIM_OC1_SetConfig+0x11c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d111      	bne.n	8005252 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800523c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	621a      	str	r2, [r3, #32]
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800

0800528c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0210 	bic.w	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0320 	bic.w	r3, r3, #32
 80052da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a28      	ldr	r2, [pc, #160]	; (800538c <TIM_OC2_SetConfig+0x100>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_OC2_SetConfig+0x6c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <TIM_OC2_SetConfig+0x104>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10d      	bne.n	8005314 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <TIM_OC2_SetConfig+0x100>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_OC2_SetConfig+0xb0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC2_SetConfig+0x104>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_OC2_SetConfig+0xb0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <TIM_OC2_SetConfig+0x108>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_OC2_SetConfig+0xb0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <TIM_OC2_SetConfig+0x10c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC2_SetConfig+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a19      	ldr	r2, [pc, #100]	; (800539c <TIM_OC2_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d113      	bne.n	8005364 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005342:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40013400 	.word	0x40013400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800

080053a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a27      	ldr	r2, [pc, #156]	; (800549c <TIM_OC3_SetConfig+0xfc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC3_SetConfig+0x6a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <TIM_OC3_SetConfig+0x100>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10d      	bne.n	8005426 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005424:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1c      	ldr	r2, [pc, #112]	; (800549c <TIM_OC3_SetConfig+0xfc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_OC3_SetConfig+0xae>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <TIM_OC3_SetConfig+0x100>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_OC3_SetConfig+0xae>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <TIM_OC3_SetConfig+0x104>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_OC3_SetConfig+0xae>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <TIM_OC3_SetConfig+0x108>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC3_SetConfig+0xae>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <TIM_OC3_SetConfig+0x10c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d113      	bne.n	8005476 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800

080054b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <TIM_OC4_SetConfig+0xc0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_OC4_SetConfig+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <TIM_OC4_SetConfig+0xc4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_OC4_SetConfig+0x84>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <TIM_OC4_SetConfig+0xc8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_OC4_SetConfig+0x84>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <TIM_OC4_SetConfig+0xcc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC4_SetConfig+0x84>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a14      	ldr	r2, [pc, #80]	; (8005580 <TIM_OC4_SetConfig+0xd0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d109      	bne.n	8005548 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <TIM_OC5_SetConfig+0xb4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_OC5_SetConfig+0x7a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <TIM_OC5_SetConfig+0xb8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_OC5_SetConfig+0x7a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <TIM_OC5_SetConfig+0xbc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC5_SetConfig+0x7a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	; (8005644 <TIM_OC5_SetConfig+0xc0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC5_SetConfig+0x7a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a13      	ldr	r2, [pc, #76]	; (8005648 <TIM_OC5_SetConfig+0xc4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d109      	bne.n	8005612 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40013400 	.word	0x40013400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	051b      	lsls	r3, r3, #20
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <TIM_OC6_SetConfig+0xb8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00f      	beq.n	80056c8 <TIM_OC6_SetConfig+0x7c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <TIM_OC6_SetConfig+0xbc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_OC6_SetConfig+0x7c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a16      	ldr	r2, [pc, #88]	; (800570c <TIM_OC6_SetConfig+0xc0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_OC6_SetConfig+0x7c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <TIM_OC6_SetConfig+0xc4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC6_SetConfig+0x7c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a14      	ldr	r2, [pc, #80]	; (8005714 <TIM_OC6_SetConfig+0xc8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 030a 	bic.w	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0210 	bic.w	r2, r3, #16
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e063      	b.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2a      	ldr	r2, [pc, #168]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800589e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d013      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40014000 	.word	0x40014000

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005990:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005994:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800599c:	b29a      	uxth	r2, r3
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059c4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	b21b      	sxth	r3, r3
 80059d8:	4013      	ands	r3, r2
 80059da:	b21b      	sxth	r3, r3
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059f2:	b084      	sub	sp, #16
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	f107 0014 	add.w	r0, r7, #20
 8005a00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ffaf 	bl	8005988 <USB_EnableGlobalInt>

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a36:	b004      	add	sp, #16
 8005a38:	4770      	bx	lr
	...

08005a3c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a3c:	b490      	push	{r4, r7}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	78db      	ldrb	r3, [r3, #3]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d819      	bhi.n	8005a9e <USB_ActivateEndpoint+0x62>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <USB_ActivateEndpoint+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005a95 	.word	0x08005a95
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005a8b 	.word	0x08005a8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a80:	8abb      	ldrh	r3, [r7, #20]
 8005a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a86:	82bb      	strh	r3, [r7, #20]
      break;
 8005a88:	e00d      	b.n	8005aa6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a8a:	8abb      	ldrh	r3, [r7, #20]
 8005a8c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a90:	82bb      	strh	r3, [r7, #20]
      break;
 8005a92:	e008      	b.n	8005aa6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a94:	8abb      	ldrh	r3, [r7, #20]
 8005a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a9a:	82bb      	strh	r3, [r7, #20]
      break;
 8005a9c:	e003      	b.n	8005aa6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa2:	e000      	b.n	8005aa6 <USB_ActivateEndpoint+0x6a>
      break;
 8005aa4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	8abb      	ldrh	r3, [r7, #20]
 8005ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	b21b      	sxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	b21a      	sxth	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b21b      	sxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	b29c      	uxth	r4, r3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	4b8c      	ldr	r3, [pc, #560]	; (8005d28 <USB_ActivateEndpoint+0x2ec>)
 8005af8:	4323      	orrs	r3, r4
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	7b1b      	ldrb	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 8116 	bne.w	8005d34 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d067      	beq.n	8005be0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b10:	687c      	ldr	r4, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	441c      	add	r4, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	4423      	add	r3, r4
 8005b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b28:	461c      	mov	r4, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	88db      	ldrh	r3, [r3, #6]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29c      	uxth	r4, r3
 8005b46:	4623      	mov	r3, r4
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d014      	beq.n	8005b7a <USB_ActivateEndpoint+0x13e>
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	b29c      	uxth	r4, r3
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <USB_ActivateEndpoint+0x2f0>)
 8005b74:	4323      	orrs	r3, r4
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	78db      	ldrb	r3, [r3, #3]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d018      	beq.n	8005bb4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b98:	b29c      	uxth	r4, r3
 8005b9a:	f084 0320 	eor.w	r3, r4, #32
 8005b9e:	b29c      	uxth	r4, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	4b5f      	ldr	r3, [pc, #380]	; (8005d28 <USB_ActivateEndpoint+0x2ec>)
 8005bac:	4323      	orrs	r3, r4
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
 8005bb2:	e22f      	b.n	8006014 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bca:	b29c      	uxth	r4, r3
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <USB_ActivateEndpoint+0x2ec>)
 8005bd8:	4323      	orrs	r3, r4
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
 8005bde:	e219      	b.n	8006014 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005be0:	687c      	ldr	r4, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	441c      	add	r4, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4423      	add	r3, r4
 8005bf4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	88db      	ldrh	r3, [r3, #6]
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c08:	687c      	ldr	r4, [r7, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	441c      	add	r4, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	4423      	add	r3, r4
 8005c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d110      	bne.n	8005c4c <USB_ActivateEndpoint+0x210>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e02f      	b.n	8005cac <USB_ActivateEndpoint+0x270>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b3e      	cmp	r3, #62	; 0x3e
 8005c52:	d813      	bhi.n	8005c7c <USB_ActivateEndpoint+0x240>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <USB_ActivateEndpoint+0x232>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	029b      	lsls	r3, r3, #10
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	e017      	b.n	8005cac <USB_ActivateEndpoint+0x270>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <USB_ActivateEndpoint+0x25a>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29c      	uxth	r4, r3
 8005cba:	4623      	mov	r3, r4
 8005cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d014      	beq.n	8005cee <USB_ActivateEndpoint+0x2b2>
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	b29c      	uxth	r4, r3
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <USB_ActivateEndpoint+0x2f4>)
 8005ce8:	4323      	orrs	r3, r4
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	b29c      	uxth	r4, r3
 8005d06:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005d0a:	b29c      	uxth	r4, r3
 8005d0c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005d10:	b29c      	uxth	r4, r3
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	4b02      	ldr	r3, [pc, #8]	; (8005d28 <USB_ActivateEndpoint+0x2ec>)
 8005d1e:	4323      	orrs	r3, r4
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e176      	b.n	8006014 <USB_ActivateEndpoint+0x5d8>
 8005d26:	bf00      	nop
 8005d28:	ffff8080 	.word	0xffff8080
 8005d2c:	ffff80c0 	.word	0xffff80c0
 8005d30:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	b29c      	uxth	r4, r3
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	4b96      	ldr	r3, [pc, #600]	; (8005fb0 <USB_ActivateEndpoint+0x574>)
 8005d58:	4323      	orrs	r3, r4
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d5e:	687c      	ldr	r4, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	441c      	add	r4, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4423      	add	r3, r4
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	461c      	mov	r4, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	891b      	ldrh	r3, [r3, #8]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8023      	strh	r3, [r4, #0]
 8005d86:	687c      	ldr	r4, [r7, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	441c      	add	r4, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	4423      	add	r3, r4
 8005d9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d9e:	461c      	mov	r4, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	895b      	ldrh	r3, [r3, #10]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 8088 	bne.w	8005ec8 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29c      	uxth	r4, r3
 8005dc6:	4623      	mov	r3, r4
 8005dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d014      	beq.n	8005dfa <USB_ActivateEndpoint+0x3be>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	b29c      	uxth	r4, r3
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	4b70      	ldr	r3, [pc, #448]	; (8005fb4 <USB_ActivateEndpoint+0x578>)
 8005df4:	4323      	orrs	r3, r4
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29c      	uxth	r4, r3
 8005e08:	4623      	mov	r3, r4
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d014      	beq.n	8005e3c <USB_ActivateEndpoint+0x400>
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	b29c      	uxth	r4, r3
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	4b60      	ldr	r3, [pc, #384]	; (8005fb8 <USB_ActivateEndpoint+0x57c>)
 8005e36:	4323      	orrs	r3, r4
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	b29c      	uxth	r4, r3
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <USB_ActivateEndpoint+0x57c>)
 8005e60:	4323      	orrs	r3, r4
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	b29c      	uxth	r4, r3
 8005e7e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005e82:	b29c      	uxth	r4, r3
 8005e84:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005e88:	b29c      	uxth	r4, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	4b49      	ldr	r3, [pc, #292]	; (8005fbc <USB_ActivateEndpoint+0x580>)
 8005e96:	4323      	orrs	r3, r4
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	b29c      	uxth	r4, r3
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <USB_ActivateEndpoint+0x580>)
 8005ec0:	4323      	orrs	r3, r4
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
 8005ec6:	e0a5      	b.n	8006014 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29c      	uxth	r4, r3
 8005ed6:	4623      	mov	r3, r4
 8005ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d014      	beq.n	8005f0a <USB_ActivateEndpoint+0x4ce>
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	b29c      	uxth	r4, r3
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <USB_ActivateEndpoint+0x578>)
 8005f04:	4323      	orrs	r3, r4
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29c      	uxth	r4, r3
 8005f18:	4623      	mov	r3, r4
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d014      	beq.n	8005f4c <USB_ActivateEndpoint+0x510>
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	b29c      	uxth	r4, r3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	4b1c      	ldr	r3, [pc, #112]	; (8005fb8 <USB_ActivateEndpoint+0x57c>)
 8005f46:	4323      	orrs	r3, r4
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	b29c      	uxth	r4, r3
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <USB_ActivateEndpoint+0x578>)
 8005f70:	4323      	orrs	r3, r4
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d020      	beq.n	8005fc0 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	b29c      	uxth	r4, r3
 8005f96:	f084 0320 	eor.w	r3, r4, #32
 8005f9a:	b29c      	uxth	r4, r3
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <USB_ActivateEndpoint+0x580>)
 8005fa8:	4323      	orrs	r3, r4
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
 8005fae:	e01c      	b.n	8005fea <USB_ActivateEndpoint+0x5ae>
 8005fb0:	ffff8180 	.word	0xffff8180
 8005fb4:	ffffc080 	.word	0xffffc080
 8005fb8:	ffff80c0 	.word	0xffff80c0
 8005fbc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd6:	b29c      	uxth	r4, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <USB_ActivateEndpoint+0x5e4>)
 8005fe4:	4323      	orrs	r3, r4
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	b29c      	uxth	r4, r3
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <USB_ActivateEndpoint+0x5e4>)
 800600e:	4323      	orrs	r3, r4
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bc90      	pop	{r4, r7}
 800601e:	4770      	bx	lr
 8006020:	ffff8080 	.word	0xffff8080

08006024 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006024:	b490      	push	{r4, r7}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	7b1b      	ldrb	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d171      	bne.n	800611a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d036      	beq.n	80060ac <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29c      	uxth	r4, r3
 800604c:	4623      	mov	r3, r4
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <USB_DeactivateEndpoint+0x5c>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606c:	b29c      	uxth	r4, r3
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	4b6b      	ldr	r3, [pc, #428]	; (8006228 <USB_DeactivateEndpoint+0x204>)
 800607a:	4323      	orrs	r3, r4
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006096:	b29c      	uxth	r4, r3
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	4b62      	ldr	r3, [pc, #392]	; (800622c <USB_DeactivateEndpoint+0x208>)
 80060a4:	4323      	orrs	r3, r4
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]
 80060aa:	e144      	b.n	8006336 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29c      	uxth	r4, r3
 80060ba:	4623      	mov	r3, r4
 80060bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d014      	beq.n	80060ee <USB_DeactivateEndpoint+0xca>
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	b29c      	uxth	r4, r3
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	4b52      	ldr	r3, [pc, #328]	; (8006230 <USB_DeactivateEndpoint+0x20c>)
 80060e8:	4323      	orrs	r3, r4
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	b29c      	uxth	r4, r3
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	4b46      	ldr	r3, [pc, #280]	; (800622c <USB_DeactivateEndpoint+0x208>)
 8006112:	4323      	orrs	r3, r4
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
 8006118:	e10d      	b.n	8006336 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 8088 	bne.w	8006234 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29c      	uxth	r4, r3
 8006132:	4623      	mov	r3, r4
 8006134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d014      	beq.n	8006166 <USB_DeactivateEndpoint+0x142>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	b29c      	uxth	r4, r3
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <USB_DeactivateEndpoint+0x20c>)
 8006160:	4323      	orrs	r3, r4
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29c      	uxth	r4, r3
 8006174:	4623      	mov	r3, r4
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d014      	beq.n	80061a8 <USB_DeactivateEndpoint+0x184>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	b29c      	uxth	r4, r3
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	4b21      	ldr	r3, [pc, #132]	; (8006228 <USB_DeactivateEndpoint+0x204>)
 80061a2:	4323      	orrs	r3, r4
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	b29c      	uxth	r4, r3
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	441a      	add	r2, r3
 80061ca:	4b17      	ldr	r3, [pc, #92]	; (8006228 <USB_DeactivateEndpoint+0x204>)
 80061cc:	4323      	orrs	r3, r4
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	b29c      	uxth	r4, r3
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	441a      	add	r2, r3
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <USB_DeactivateEndpoint+0x208>)
 80061f6:	4323      	orrs	r3, r4
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	b29c      	uxth	r4, r3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	4b03      	ldr	r3, [pc, #12]	; (800622c <USB_DeactivateEndpoint+0x208>)
 8006220:	4323      	orrs	r3, r4
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
 8006226:	e086      	b.n	8006336 <USB_DeactivateEndpoint+0x312>
 8006228:	ffff80c0 	.word	0xffff80c0
 800622c:	ffff8080 	.word	0xffff8080
 8006230:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29c      	uxth	r4, r3
 8006242:	4623      	mov	r3, r4
 8006244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d014      	beq.n	8006276 <USB_DeactivateEndpoint+0x252>
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	b29c      	uxth	r4, r3
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	4b35      	ldr	r3, [pc, #212]	; (8006344 <USB_DeactivateEndpoint+0x320>)
 8006270:	4323      	orrs	r3, r4
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29c      	uxth	r4, r3
 8006284:	4623      	mov	r3, r4
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d014      	beq.n	80062b8 <USB_DeactivateEndpoint+0x294>
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	b29c      	uxth	r4, r3
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <USB_DeactivateEndpoint+0x324>)
 80062b2:	4323      	orrs	r3, r4
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	b29c      	uxth	r4, r3
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <USB_DeactivateEndpoint+0x320>)
 80062dc:	4323      	orrs	r3, r4
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f8:	b29c      	uxth	r4, r3
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <USB_DeactivateEndpoint+0x328>)
 8006306:	4323      	orrs	r3, r4
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	b29c      	uxth	r4, r3
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	4b07      	ldr	r3, [pc, #28]	; (800634c <USB_DeactivateEndpoint+0x328>)
 8006330:	4323      	orrs	r3, r4
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bc90      	pop	{r4, r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	ffffc080 	.word	0xffffc080
 8006348:	ffff80c0 	.word	0xffff80c0
 800634c:	ffff8080 	.word	0xffff8080

08006350 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b095      	sub	sp, #84	; 0x54
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b01      	cmp	r3, #1
 8006360:	f040 816d 	bne.w	800663e <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d909      	bls.n	8006384 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	619a      	str	r2, [r3, #24]
 8006382:	e005      	b.n	8006390 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	7b1b      	ldrb	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6959      	ldr	r1, [r3, #20]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	88da      	ldrh	r2, [r3, #6]
 80063a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fbb6 	bl	8006b16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063aa:	687c      	ldr	r4, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	441c      	add	r4, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4423      	add	r3, r4
 80063be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e11b      	b.n	8006606 <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d06a      	beq.n	80064ba <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e4:	687c      	ldr	r4, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d14c      	bne.n	8006488 <USB_EPStartXfer+0x138>
 80063ee:	687c      	ldr	r4, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	441c      	add	r4, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	4423      	add	r3, r4
 8006402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <USB_EPStartXfer+0xe0>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006416:	b29a      	uxth	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006428:	b29a      	uxth	r2, r3
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e03f      	b.n	80064b0 <USB_EPStartXfer+0x160>
 8006430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006432:	2b3e      	cmp	r3, #62	; 0x3e
 8006434:	d811      	bhi.n	800645a <USB_EPStartXfer+0x10a>
 8006436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	647b      	str	r3, [r7, #68]	; 0x44
 800643c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <USB_EPStartXfer+0xfc>
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	3301      	adds	r3, #1
 800644a:	647b      	str	r3, [r7, #68]	; 0x44
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	b29b      	uxth	r3, r3
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	b29a      	uxth	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	e02a      	b.n	80064b0 <USB_EPStartXfer+0x160>
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	647b      	str	r3, [r7, #68]	; 0x44
 8006460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <USB_EPStartXfer+0x120>
 800646a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646c:	3b01      	subs	r3, #1
 800646e:	647b      	str	r3, [r7, #68]	; 0x44
 8006470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	e013      	b.n	80064b0 <USB_EPStartXfer+0x160>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <USB_EPStartXfer+0x160>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	441c      	add	r4, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	4423      	add	r3, r4
 80064a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	895b      	ldrh	r3, [r3, #10]
 80064b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80064b8:	e069      	b.n	800658e <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d14c      	bne.n	800655c <USB_EPStartXfer+0x20c>
 80064c2:	687c      	ldr	r4, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	441c      	add	r4, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	4423      	add	r3, r4
 80064d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d110      	bne.n	8006504 <USB_EPStartXfer+0x1b4>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e040      	b.n	8006586 <USB_EPStartXfer+0x236>
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	2b3e      	cmp	r3, #62	; 0x3e
 8006508:	d811      	bhi.n	800652e <USB_EPStartXfer+0x1de>
 800650a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	643b      	str	r3, [r7, #64]	; 0x40
 8006510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <USB_EPStartXfer+0x1d0>
 800651a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651c:	3301      	adds	r3, #1
 800651e:	643b      	str	r3, [r7, #64]	; 0x40
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	b29b      	uxth	r3, r3
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	b29a      	uxth	r2, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e02b      	b.n	8006586 <USB_EPStartXfer+0x236>
 800652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	643b      	str	r3, [r7, #64]	; 0x40
 8006534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <USB_EPStartXfer+0x1f4>
 800653e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006540:	3b01      	subs	r3, #1
 8006542:	643b      	str	r3, [r7, #64]	; 0x40
 8006544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006554:	b29a      	uxth	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	e014      	b.n	8006586 <USB_EPStartXfer+0x236>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d110      	bne.n	8006586 <USB_EPStartXfer+0x236>
 8006564:	687c      	ldr	r4, [r7, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	441c      	add	r4, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4423      	add	r3, r4
 8006578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006580:	b29a      	uxth	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	891b      	ldrh	r3, [r3, #8]
 800658a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6959      	ldr	r1, [r3, #20]
 8006592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006594:	b29b      	uxth	r3, r3
 8006596:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fabb 	bl	8006b16 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <USB_EPStartXfer+0x284>
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	b29c      	uxth	r4, r3
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	4b96      	ldr	r3, [pc, #600]	; (8006824 <USB_EPStartXfer+0x4d4>)
 80065cc:	4323      	orrs	r3, r4
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
 80065d2:	e018      	b.n	8006606 <USB_EPStartXfer+0x2b6>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d114      	bne.n	8006606 <USB_EPStartXfer+0x2b6>
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	b29c      	uxth	r4, r3
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	4b8a      	ldr	r3, [pc, #552]	; (8006828 <USB_EPStartXfer+0x4d8>)
 8006600:	4323      	orrs	r3, r4
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	b29c      	uxth	r4, r3
 800661e:	f084 0310 	eor.w	r3, r4, #16
 8006622:	b29c      	uxth	r4, r3
 8006624:	f084 0320 	eor.w	r3, r4, #32
 8006628:	b29c      	uxth	r4, r3
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	4b7d      	ldr	r3, [pc, #500]	; (800682c <USB_EPStartXfer+0x4dc>)
 8006636:	4323      	orrs	r3, r4
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]
 800663c:	e153      	b.n	80068e6 <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	d909      	bls.n	800665e <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	619a      	str	r2, [r3, #24]
 800665c:	e005      	b.n	800666a <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	7b1b      	ldrb	r3, [r3, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d14c      	bne.n	800670c <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006672:	687c      	ldr	r4, [r7, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667a:	b29b      	uxth	r3, r3
 800667c:	441c      	add	r4, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	4423      	add	r3, r4
 8006686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668e:	2b00      	cmp	r3, #0
 8006690:	d110      	bne.n	80066b4 <USB_EPStartXfer+0x364>
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669a:	b29a      	uxth	r2, r3
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e0fd      	b.n	80068b0 <USB_EPStartXfer+0x560>
 80066b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b6:	2b3e      	cmp	r3, #62	; 0x3e
 80066b8:	d811      	bhi.n	80066de <USB_EPStartXfer+0x38e>
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <USB_EPStartXfer+0x380>
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	3301      	adds	r3, #1
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e0e8      	b.n	80068b0 <USB_EPStartXfer+0x560>
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <USB_EPStartXfer+0x3a4>
 80066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f0:	3b01      	subs	r3, #1
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006704:	b29a      	uxth	r2, r3
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e0d1      	b.n	80068b0 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d14c      	bne.n	80067ae <USB_EPStartXfer+0x45e>
 8006714:	687c      	ldr	r4, [r7, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671c:	b29b      	uxth	r3, r3
 800671e:	441c      	add	r4, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	4423      	add	r3, r4
 8006728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006730:	2b00      	cmp	r3, #0
 8006732:	d110      	bne.n	8006756 <USB_EPStartXfer+0x406>
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800673c:	b29a      	uxth	r2, r3
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674e:	b29a      	uxth	r2, r3
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e040      	b.n	80067d8 <USB_EPStartXfer+0x488>
 8006756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006758:	2b3e      	cmp	r3, #62	; 0x3e
 800675a:	d811      	bhi.n	8006780 <USB_EPStartXfer+0x430>
 800675c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	63bb      	str	r3, [r7, #56]	; 0x38
 8006762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USB_EPStartXfer+0x422>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	3301      	adds	r3, #1
 8006770:	63bb      	str	r3, [r7, #56]	; 0x38
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	b29b      	uxth	r3, r3
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	b29a      	uxth	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	e02b      	b.n	80067d8 <USB_EPStartXfer+0x488>
 8006780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
 8006786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <USB_EPStartXfer+0x446>
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	3b01      	subs	r3, #1
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	b29b      	uxth	r3, r3
 800679a:	029b      	lsls	r3, r3, #10
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e014      	b.n	80067d8 <USB_EPStartXfer+0x488>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d110      	bne.n	80067d8 <USB_EPStartXfer+0x488>
 80067b6:	687c      	ldr	r4, [r7, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	441c      	add	r4, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	4423      	add	r3, r4
 80067ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ce:	633b      	str	r3, [r7, #48]	; 0x30
 80067d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	687c      	ldr	r4, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d152      	bne.n	8006888 <USB_EPStartXfer+0x538>
 80067e2:	687c      	ldr	r4, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	441c      	add	r4, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4423      	add	r3, r4
 80067f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
 80067fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <USB_EPStartXfer+0x4e0>
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800680a:	b29a      	uxth	r2, r3
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e045      	b.n	80068b0 <USB_EPStartXfer+0x560>
 8006824:	ffff80c0 	.word	0xffff80c0
 8006828:	ffffc080 	.word	0xffffc080
 800682c:	ffff8080 	.word	0xffff8080
 8006830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006832:	2b3e      	cmp	r3, #62	; 0x3e
 8006834:	d811      	bhi.n	800685a <USB_EPStartXfer+0x50a>
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <USB_EPStartXfer+0x4fc>
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	3301      	adds	r3, #1
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29a      	uxth	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	e02a      	b.n	80068b0 <USB_EPStartXfer+0x560>
 800685a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <USB_EPStartXfer+0x520>
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	3b01      	subs	r3, #1
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	b29b      	uxth	r3, r3
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	b29b      	uxth	r3, r3
 8006878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006880:	b29a      	uxth	r2, r3
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	e013      	b.n	80068b0 <USB_EPStartXfer+0x560>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <USB_EPStartXfer+0x560>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006896:	b29b      	uxth	r3, r3
 8006898:	441c      	add	r4, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4423      	add	r3, r4
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	b29c      	uxth	r4, r3
 80068c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80068cc:	b29c      	uxth	r4, r3
 80068ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80068d2:	b29c      	uxth	r4, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <USB_EPStartXfer+0x5a0>)
 80068e0:	4323      	orrs	r3, r4
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3754      	adds	r7, #84	; 0x54
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd90      	pop	{r4, r7, pc}
 80068f0:	ffff8080 	.word	0xffff8080

080068f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f4:	b490      	push	{r4, r7}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d018      	beq.n	8006938 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	b29c      	uxth	r4, r3
 800691e:	f084 0310 	eor.w	r3, r4, #16
 8006922:	b29c      	uxth	r4, r3
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <USB_EPSetStall+0x80>)
 8006930:	4323      	orrs	r3, r4
 8006932:	b29b      	uxth	r3, r3
 8006934:	8013      	strh	r3, [r2, #0]
 8006936:	e017      	b.n	8006968 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	b29c      	uxth	r4, r3
 8006950:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006954:	b29c      	uxth	r4, r3
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <USB_EPSetStall+0x80>)
 8006962:	4323      	orrs	r3, r4
 8006964:	b29b      	uxth	r3, r3
 8006966:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bc90      	pop	{r4, r7}
 8006972:	4770      	bx	lr
 8006974:	ffff8080 	.word	0xffff8080

08006978 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006978:	b490      	push	{r4, r7}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	7b1b      	ldrb	r3, [r3, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d17d      	bne.n	8006a86 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d03d      	beq.n	8006a0e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29c      	uxth	r4, r3
 80069a0:	4623      	mov	r3, r4
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d014      	beq.n	80069d4 <USB_EPClearStall+0x5c>
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c0:	b29c      	uxth	r4, r3
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <USB_EPClearStall+0x11c>)
 80069ce:	4323      	orrs	r3, r4
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	78db      	ldrb	r3, [r3, #3]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d054      	beq.n	8006a86 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	b29c      	uxth	r4, r3
 80069f4:	f084 0320 	eor.w	r3, r4, #32
 80069f8:	b29c      	uxth	r4, r3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <USB_EPClearStall+0x120>)
 8006a06:	4323      	orrs	r3, r4
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
 8006a0c:	e03b      	b.n	8006a86 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29c      	uxth	r4, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d014      	beq.n	8006a50 <USB_EPClearStall+0xd8>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	b29c      	uxth	r4, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <USB_EPClearStall+0x124>)
 8006a4a:	4323      	orrs	r3, r4
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	b29c      	uxth	r4, r3
 8006a68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006a6c:	b29c      	uxth	r4, r3
 8006a6e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006a72:	b29c      	uxth	r4, r3
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <USB_EPClearStall+0x120>)
 8006a80:	4323      	orrs	r3, r4
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc90      	pop	{r4, r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	ffff80c0 	.word	0xffff80c0
 8006a98:	ffff8080 	.word	0xffff8080
 8006a9c:	ffffc080 	.word	0xffffc080

08006aa0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d103      	bne.n	8006aba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b08d      	sub	sp, #52	; 0x34
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	4611      	mov	r1, r2
 8006b22:	461a      	mov	r2, r3
 8006b24:	460b      	mov	r3, r1
 8006b26:	80fb      	strh	r3, [r7, #6]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b2c:	88bb      	ldrh	r3, [r7, #4]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	005a      	lsls	r2, r3, #1
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4e:	e01e      	b.n	8006b8e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	3301      	adds	r3, #1
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	3302      	adds	r3, #2
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	3302      	adds	r3, #2
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	3301      	adds	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1dd      	bne.n	8006b50 <USB_WritePMA+0x3a>
  }
}
 8006b94:	bf00      	nop
 8006b96:	3734      	adds	r7, #52	; 0x34
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b08b      	sub	sp, #44	; 0x2c
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	80fb      	strh	r3, [r7, #6]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bb6:	88bb      	ldrh	r3, [r7, #4]
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	005a      	lsls	r2, r3, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd8:	e01b      	b.n	8006c12 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	3302      	adds	r3, #2
 8006be6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	3302      	adds	r3, #2
 8006c0a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e0      	bne.n	8006bda <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c18:	88bb      	ldrh	r3, [r7, #4]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	701a      	strb	r2, [r3, #0]
  }
}
 8006c34:	bf00      	nop
 8006c36:	372c      	adds	r7, #44	; 0x2c
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7c1b      	ldrb	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d115      	bne.n	8006c84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	2181      	movs	r1, #129	; 0x81
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fea2 	bl	80089aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c70:	2202      	movs	r2, #2
 8006c72:	2101      	movs	r1, #1
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fe98 	bl	80089aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c82:	e012      	b.n	8006caa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c84:	2340      	movs	r3, #64	; 0x40
 8006c86:	2202      	movs	r2, #2
 8006c88:	2181      	movs	r1, #129	; 0x81
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fe8d 	bl	80089aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	2202      	movs	r2, #2
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fe84 	bl	80089aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006caa:	2308      	movs	r3, #8
 8006cac:	2203      	movs	r2, #3
 8006cae:	2182      	movs	r1, #130	; 0x82
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fe7a 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cc0:	f001 ff94 	bl	8008bec <USBD_static_malloc>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e026      	b.n	8006d2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7c1b      	ldrb	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d10:	2101      	movs	r1, #1
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 ff34 	bl	8008b80 <USBD_LL_PrepareReceive>
 8006d18:	e007      	b.n	8006d2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d20:	2340      	movs	r3, #64	; 0x40
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 ff2b 	bl	8008b80 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d44:	2181      	movs	r1, #129	; 0x81
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fe55 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d52:	2101      	movs	r1, #1
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fe4e 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d62:	2182      	movs	r1, #130	; 0x82
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fe46 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 ff3c 	bl	8008c08 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b086      	sub	sp, #24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d039      	beq.n	8006e40 <USBD_CDC_Setup+0x9e>
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d17c      	bne.n	8006eca <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d029      	beq.n	8006e2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da11      	bge.n	8006e06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	88d2      	ldrh	r2, [r2, #6]
 8006df4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006df6:	6939      	ldr	r1, [r7, #16]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa00 	bl	8008204 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e04:	e068      	b.n	8006ed8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	785a      	ldrb	r2, [r3, #1]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	88db      	ldrh	r3, [r3, #6]
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e1c:	6939      	ldr	r1, [r7, #16]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	88db      	ldrh	r3, [r3, #6]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fa1b 	bl	8008260 <USBD_CtlPrepareRx>
      break;
 8006e2a:	e055      	b.n	8006ed8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	7850      	ldrb	r0, [r2, #1]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	4798      	blx	r3
      break;
 8006e3e:	e04b      	b.n	8006ed8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b0a      	cmp	r3, #10
 8006e46:	d017      	beq.n	8006e78 <USBD_CDC_Setup+0xd6>
 8006e48:	2b0b      	cmp	r3, #11
 8006e4a:	d029      	beq.n	8006ea0 <USBD_CDC_Setup+0xfe>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d133      	bne.n	8006eb8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d107      	bne.n	8006e6a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	2202      	movs	r2, #2
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f9ce 	bl	8008204 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e68:	e02e      	b.n	8006ec8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f95e 	bl	800812e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
          break;
 8006e76:	e027      	b.n	8006ec8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d107      	bne.n	8006e92 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e82:	f107 030f 	add.w	r3, r7, #15
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f9ba 	bl	8008204 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e90:	e01a      	b.n	8006ec8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f94a 	bl	800812e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9e:	e013      	b.n	8006ec8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d00d      	beq.n	8006ec6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f93e 	bl	800812e <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006eb6:	e006      	b.n	8006ec6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 f937 	bl	800812e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec4:	e000      	b.n	8006ec8 <USBD_CDC_Setup+0x126>
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e006      	b.n	8006ed8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f92e 	bl	800812e <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed6:	bf00      	nop
  }

  return ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006efc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d037      	beq.n	8006f78 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	331c      	adds	r3, #28
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d026      	beq.n	8006f6c <USBD_CDC_DataIn+0x8a>
 8006f1e:	78fa      	ldrb	r2, [r7, #3]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	331c      	adds	r3, #28
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	0152      	lsls	r2, r2, #5
 8006f36:	440a      	add	r2, r1
 8006f38:	3238      	adds	r2, #56	; 0x38
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f40:	fb02 f201 	mul.w	r2, r2, r1
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d110      	bne.n	8006f6c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	331c      	adds	r3, #28
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f5e:	78f9      	ldrb	r1, [r7, #3]
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fde8 	bl	8008b3a <USBD_LL_Transmit>
 8006f6a:	e003      	b.n	8006f74 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006f78:	2302      	movs	r3, #2
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fe13 	bl	8008bc6 <USBD_LL_GetRxDataSize>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4798      	blx	r3

    return USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e000      	b.n	8006fd0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d015      	beq.n	800701e <USBD_CDC_EP0_RxReady+0x46>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ff8:	2bff      	cmp	r3, #255	; 0xff
 8006ffa:	d010      	beq.n	800701e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800700a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007012:	b292      	uxth	r2, r2
 8007014:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2243      	movs	r2, #67	; 0x43
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000098 	.word	0x20000098

08007048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2243      	movs	r2, #67	; 0x43
 8007054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	20000054 	.word	0x20000054

08007068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2243      	movs	r2, #67	; 0x43
 8007074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007076:	4b03      	ldr	r3, [pc, #12]	; (8007084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	200000dc 	.word	0x200000dc

08007088 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	220a      	movs	r2, #10
 8007094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007096:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20000010 	.word	0x20000010

080070a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070b2:	2302      	movs	r3, #2
 80070b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	4613      	mov	r3, r2
 80070e2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007140:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01c      	beq.n	8007186 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007152:	2b00      	cmp	r3, #0
 8007154:	d115      	bne.n	8007182 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007174:	b29b      	uxth	r3, r3
 8007176:	2181      	movs	r1, #129	; 0x81
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fcde 	bl	8008b3a <USBD_LL_Transmit>

      return USBD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e002      	b.n	8007188 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d017      	beq.n	80071da <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7c1b      	ldrb	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071bc:	2101      	movs	r1, #1
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fcde 	bl	8008b80 <USBD_LL_PrepareReceive>
 80071c4:	e007      	b.n	80071d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	2101      	movs	r1, #1
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fcd5 	bl	8008b80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071da:	2302      	movs	r3, #2
  }
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e01a      	b.n	8007232 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	79fa      	ldrb	r2, [r7, #7]
 8007228:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f001 fb48 	bl	80088c0 <USBD_LL_Init>

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d006      	beq.n	800725c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
 800725a:	e001      	b.n	8007260 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 fb7c 	bl	8008974 <USBD_LL_Start>

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	4611      	mov	r1, r2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	4611      	mov	r1, r2
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fece 	bl	80080b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2b01      	cmp	r3, #1
 800733a:	d00c      	beq.n	8007356 <USBD_LL_SetupStage+0x56>
 800733c:	2b01      	cmp	r3, #1
 800733e:	d302      	bcc.n	8007346 <USBD_LL_SetupStage+0x46>
 8007340:	2b02      	cmp	r3, #2
 8007342:	d010      	beq.n	8007366 <USBD_LL_SetupStage+0x66>
 8007344:	e017      	b.n	8007376 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f9ce 	bl	80076f0 <USBD_StdDevReq>
      break;
 8007354:	e01a      	b.n	800738c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa30 	bl	80077c4 <USBD_StdItfReq>
      break;
 8007364:	e012      	b.n	800738c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa6e 	bl	8007850 <USBD_StdEPReq>
      break;
 8007374:	e00a      	b.n	800738c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800737c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fb55 	bl	8008a34 <USBD_LL_StallEP>
      break;
 800738a:	bf00      	nop
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	460b      	mov	r3, r1
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d14b      	bne.n	8007442 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d134      	bne.n	8007426 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d919      	bls.n	80073fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073de:	429a      	cmp	r2, r3
 80073e0:	d203      	bcs.n	80073ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	e002      	b.n	80073f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 ff51 	bl	800829c <USBD_CtlContinueRx>
 80073fa:	e038      	b.n	800746e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800740e:	2b03      	cmp	r3, #3
 8007410:	d105      	bne.n	800741e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 ff4e 	bl	80082c0 <USBD_CtlSendStatus>
 8007424:	e023      	b.n	800746e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800742c:	2b05      	cmp	r3, #5
 800742e:	d11e      	bne.n	800746e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007438:	2100      	movs	r1, #0
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 fafa 	bl	8008a34 <USBD_LL_StallEP>
 8007440:	e015      	b.n	800746e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007454:	2b03      	cmp	r3, #3
 8007456:	d108      	bne.n	800746a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	7afa      	ldrb	r2, [r7, #11]
 8007462:	4611      	mov	r1, r2
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	4798      	blx	r3
 8007468:	e001      	b.n	800746e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800746a:	2302      	movs	r3, #2
 800746c:	e000      	b.n	8007470 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	460b      	mov	r3, r1
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d17f      	bne.n	800758c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3314      	adds	r3, #20
 8007490:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007498:	2b02      	cmp	r3, #2
 800749a:	d15c      	bne.n	8007556 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d915      	bls.n	80074d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 febb 	bl	800823c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f001 fb57 	bl	8008b80 <USBD_LL_PrepareReceive>
 80074d2:	e04e      	b.n	8007572 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	6912      	ldr	r2, [r2, #16]
 80074dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80074e0:	fb02 f201 	mul.w	r2, r2, r1
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d11c      	bne.n	8007524 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d316      	bcc.n	8007524 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007500:	429a      	cmp	r2, r3
 8007502:	d20f      	bcs.n	8007524 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007504:	2200      	movs	r2, #0
 8007506:	2100      	movs	r1, #0
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fe97 	bl	800823c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007516:	2300      	movs	r3, #0
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 fb2f 	bl	8008b80 <USBD_LL_PrepareReceive>
 8007522:	e026      	b.n	8007572 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007536:	2b03      	cmp	r3, #3
 8007538:	d105      	bne.n	8007546 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007546:	2180      	movs	r1, #128	; 0x80
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f001 fa73 	bl	8008a34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fec9 	bl	80082e6 <USBD_CtlReceiveStatus>
 8007554:	e00d      	b.n	8007572 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800755c:	2b04      	cmp	r3, #4
 800755e:	d004      	beq.n	800756a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007566:	2b00      	cmp	r3, #0
 8007568:	d103      	bne.n	8007572 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800756a:	2180      	movs	r1, #128	; 0x80
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f001 fa61 	bl	8008a34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d11d      	bne.n	80075b8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff fe82 	bl	8007286 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800758a:	e015      	b.n	80075b8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d108      	bne.n	80075b4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	7afa      	ldrb	r2, [r7, #11]
 80075ac:	4611      	mov	r1, r2
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
 80075b2:	e001      	b.n	80075b8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075b4:	2302      	movs	r3, #2
 80075b6:	e000      	b.n	80075ba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	2200      	movs	r2, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f9ea 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2240      	movs	r2, #64	; 0x40
 80075e2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e6:	2340      	movs	r3, #64	; 0x40
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 f9dc 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2240      	movs	r2, #64	; 0x40
 80075fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6852      	ldr	r2, [r2, #4]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	4611      	mov	r1, r2
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
  }

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	2b04      	cmp	r3, #4
 800769e:	d105      	bne.n	80076ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d10b      	bne.n	80076e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007706:	2b20      	cmp	r3, #32
 8007708:	d004      	beq.n	8007714 <USBD_StdDevReq+0x24>
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d002      	beq.n	8007714 <USBD_StdDevReq+0x24>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <USBD_StdDevReq+0x34>
 8007712:	e04c      	b.n	80077ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
      break;
 8007722:	e049      	b.n	80077b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b09      	cmp	r3, #9
 800772a:	d83a      	bhi.n	80077a2 <USBD_StdDevReq+0xb2>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <USBD_StdDevReq+0x44>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007785 	.word	0x08007785
 8007738:	08007799 	.word	0x08007799
 800773c:	080077a3 	.word	0x080077a3
 8007740:	0800778f 	.word	0x0800778f
 8007744:	080077a3 	.word	0x080077a3
 8007748:	08007767 	.word	0x08007767
 800774c:	0800775d 	.word	0x0800775d
 8007750:	080077a3 	.word	0x080077a3
 8007754:	0800777b 	.word	0x0800777b
 8007758:	08007771 	.word	0x08007771
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9d4 	bl	8007b0c <USBD_GetDescriptor>
          break;
 8007764:	e022      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb37 	bl	8007ddc <USBD_SetAddress>
          break;
 800776e:	e01d      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fb74 	bl	8007e60 <USBD_SetConfig>
          break;
 8007778:	e018      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fbfd 	bl	8007f7c <USBD_GetConfig>
          break;
 8007782:	e013      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc2c 	bl	8007fe4 <USBD_GetStatus>
          break;
 800778c:	e00e      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fc5a 	bl	800804a <USBD_SetFeature>
          break;
 8007796:	e009      	b.n	80077ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc69 	bl	8008072 <USBD_ClrFeature>
          break;
 80077a0:	e004      	b.n	80077ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fcc2 	bl	800812e <USBD_CtlError>
          break;
 80077aa:	bf00      	nop
      }
      break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fcbc 	bl	800812e <USBD_CtlError>
      break;
 80077b6:	bf00      	nop
  }

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d003      	beq.n	80077e6 <USBD_StdItfReq+0x22>
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d001      	beq.n	80077e6 <USBD_StdItfReq+0x22>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d12a      	bne.n	800783c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	3b01      	subs	r3, #1
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d81d      	bhi.n	800782e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d813      	bhi.n	8007824 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	88db      	ldrh	r3, [r3, #6]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d110      	bne.n	8007838 <USBD_StdItfReq+0x74>
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fd4f 	bl	80082c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007822:	e009      	b.n	8007838 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fc81 	bl	800812e <USBD_CtlError>
          break;
 800782c:	e004      	b.n	8007838 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc7c 	bl	800812e <USBD_CtlError>
          break;
 8007836:	e000      	b.n	800783a <USBD_StdItfReq+0x76>
          break;
 8007838:	bf00      	nop
      }
      break;
 800783a:	e004      	b.n	8007846 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc75 	bl	800812e <USBD_CtlError>
      break;
 8007844:	bf00      	nop
  }

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	889b      	ldrh	r3, [r3, #4]
 8007862:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800786c:	2b20      	cmp	r3, #32
 800786e:	d004      	beq.n	800787a <USBD_StdEPReq+0x2a>
 8007870:	2b40      	cmp	r3, #64	; 0x40
 8007872:	d002      	beq.n	800787a <USBD_StdEPReq+0x2a>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <USBD_StdEPReq+0x3a>
 8007878:	e13d      	b.n	8007af6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
      break;
 8007888:	e13a      	b.n	8007b00 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007892:	2b20      	cmp	r3, #32
 8007894:	d10a      	bne.n	80078ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	e12a      	b.n	8007b02 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d03e      	beq.n	8007932 <USBD_StdEPReq+0xe2>
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d002      	beq.n	80078be <USBD_StdEPReq+0x6e>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d070      	beq.n	800799e <USBD_StdEPReq+0x14e>
 80078bc:	e115      	b.n	8007aea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d002      	beq.n	80078ce <USBD_StdEPReq+0x7e>
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d015      	beq.n	80078f8 <USBD_StdEPReq+0xa8>
 80078cc:	e02b      	b.n	8007926 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00c      	beq.n	80078ee <USBD_StdEPReq+0x9e>
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d009      	beq.n	80078ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f8a8 	bl	8008a34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f8a4 	bl	8008a34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078ec:	e020      	b.n	8007930 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc1c 	bl	800812e <USBD_CtlError>
              break;
 80078f6:	e01b      	b.n	8007930 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10e      	bne.n	800791e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <USBD_StdEPReq+0xce>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d008      	beq.n	800791e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 f88b 	bl	8008a34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fcce 	bl	80082c0 <USBD_CtlSendStatus>

              break;
 8007924:	e004      	b.n	8007930 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc00 	bl	800812e <USBD_CtlError>
              break;
 800792e:	bf00      	nop
          }
          break;
 8007930:	e0e0      	b.n	8007af4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	2b02      	cmp	r3, #2
 800793a:	d002      	beq.n	8007942 <USBD_StdEPReq+0xf2>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d015      	beq.n	800796c <USBD_StdEPReq+0x11c>
 8007940:	e026      	b.n	8007990 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00c      	beq.n	8007962 <USBD_StdEPReq+0x112>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d009      	beq.n	8007962 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f86e 	bl	8008a34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007958:	2180      	movs	r1, #128	; 0x80
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f86a 	bl	8008a34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007960:	e01c      	b.n	800799c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fbe2 	bl	800812e <USBD_CtlError>
              break;
 800796a:	e017      	b.n	800799c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	885b      	ldrh	r3, [r3, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d112      	bne.n	800799a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 f875 	bl	8008a72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc99 	bl	80082c0 <USBD_CtlSendStatus>
              }
              break;
 800798e:	e004      	b.n	800799a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbcb 	bl	800812e <USBD_CtlError>
              break;
 8007998:	e000      	b.n	800799c <USBD_StdEPReq+0x14c>
              break;
 800799a:	bf00      	nop
          }
          break;
 800799c:	e0aa      	b.n	8007af4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d002      	beq.n	80079ae <USBD_StdEPReq+0x15e>
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d032      	beq.n	8007a12 <USBD_StdEPReq+0x1c2>
 80079ac:	e097      	b.n	8007ade <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <USBD_StdEPReq+0x174>
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d004      	beq.n	80079c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbb6 	bl	800812e <USBD_CtlError>
                break;
 80079c2:	e091      	b.n	8007ae8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da0b      	bge.n	80079e4 <USBD_StdEPReq+0x194>
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	3310      	adds	r3, #16
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	3304      	adds	r3, #4
 80079e2:	e00b      	b.n	80079fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	3304      	adds	r3, #4
 80079fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2202      	movs	r2, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fbfa 	bl	8008204 <USBD_CtlSendData>
              break;
 8007a10:	e06a      	b.n	8007ae8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da11      	bge.n	8007a3e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	f003 020f 	and.w	r2, r3, #15
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4613      	mov	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d117      	bne.n	8007a64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fb79 	bl	800812e <USBD_CtlError>
                  break;
 8007a3c:	e054      	b.n	8007ae8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb66 	bl	800812e <USBD_CtlError>
                  break;
 8007a62:	e041      	b.n	8007ae8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da0b      	bge.n	8007a84 <USBD_StdEPReq+0x234>
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	3310      	adds	r3, #16
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	4413      	add	r3, r2
 8007a80:	3304      	adds	r3, #4
 8007a82:	e00b      	b.n	8007a9c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <USBD_StdEPReq+0x25a>
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d103      	bne.n	8007ab2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e00e      	b.n	8007ad0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fffa 	bl	8008ab0 <USBD_LL_IsStallEP>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e002      	b.n	8007ad0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fb94 	bl	8008204 <USBD_CtlSendData>
              break;
 8007adc:	e004      	b.n	8007ae8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fb24 	bl	800812e <USBD_CtlError>
              break;
 8007ae6:	bf00      	nop
          }
          break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb1e 	bl	800812e <USBD_CtlError>
          break;
 8007af2:	bf00      	nop
      }
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb18 	bl	800812e <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
  }

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	2b06      	cmp	r3, #6
 8007b2e:	f200 8128 	bhi.w	8007d82 <USBD_GetDescriptor+0x276>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <USBD_GetDescriptor+0x2c>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b6d 	.word	0x08007b6d
 8007b40:	08007bad 	.word	0x08007bad
 8007b44:	08007d83 	.word	0x08007d83
 8007b48:	08007d83 	.word	0x08007d83
 8007b4c:	08007d23 	.word	0x08007d23
 8007b50:	08007d4f 	.word	0x08007d4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
      break;
 8007b6a:	e112      	b.n	8007d92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b8e:	e100      	b.n	8007d92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	f107 0208 	add.w	r2, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	701a      	strb	r2, [r3, #0]
      break;
 8007baa:	e0f2      	b.n	8007d92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	885b      	ldrh	r3, [r3, #2]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	f200 80ac 	bhi.w	8007d10 <USBD_GetDescriptor+0x204>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <USBD_GetDescriptor+0xb4>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007c41 	.word	0x08007c41
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007ca9 	.word	0x08007ca9
 8007bd4:	08007cdd 	.word	0x08007cdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e091      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa95 	bl	800812e <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e089      	b.n	8007d20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2e:	e077      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa7b 	bl	800812e <USBD_CtlError>
            err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3e:	e06f      	b.n	8007d20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c62:	e05d      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa61 	bl	800812e <USBD_CtlError>
            err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
          break;
 8007c72:	e055      	b.n	8007d20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c96:	e043      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa47 	bl	800812e <USBD_CtlError>
            err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca6:	e03b      	b.n	8007d20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e029      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa2d 	bl	800812e <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e021      	b.n	8007d20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7c12      	ldrb	r2, [r2, #16]
 8007cf4:	f107 0108 	add.w	r1, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfe:	e00f      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa13 	bl	800812e <USBD_CtlError>
            err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0e:	e007      	b.n	8007d20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa0b 	bl	800812e <USBD_CtlError>
          err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d1e:	e038      	b.n	8007d92 <USBD_GetDescriptor+0x286>
 8007d20:	e037      	b.n	8007d92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7c1b      	ldrb	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	f107 0208 	add.w	r2, r7, #8
 8007d36:	4610      	mov	r0, r2
 8007d38:	4798      	blx	r3
 8007d3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3c:	e029      	b.n	8007d92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9f4 	bl	800812e <USBD_CtlError>
        err++;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4c:	e021      	b.n	8007d92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7c1b      	ldrb	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10d      	bne.n	8007d72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	4610      	mov	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	2207      	movs	r2, #7
 8007d6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d70:	e00f      	b.n	8007d92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9da 	bl	800812e <USBD_CtlError>
        err++;
 8007d7a:	7afb      	ldrb	r3, [r7, #11]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d80:	e007      	b.n	8007d92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f9d2 	bl	800812e <USBD_CtlError>
      err++;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d90:	bf00      	nop
  }

  if (err != 0U)
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11c      	bne.n	8007dd2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d98:	893b      	ldrh	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d011      	beq.n	8007dc2 <USBD_GetDescriptor+0x2b6>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88da      	ldrh	r2, [r3, #6]
 8007daa:	893b      	ldrh	r3, [r7, #8]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	bf28      	it	cs
 8007db0:	4613      	movcs	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007db6:	893b      	ldrh	r3, [r7, #8]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa21 	bl	8008204 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa78 	bl	80082c0 <USBD_CtlSendStatus>
 8007dd0:	e000      	b.n	8007dd4 <USBD_GetDescriptor+0x2c8>
    return;
 8007dd2:	bf00      	nop
    }
  }
}
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop

08007ddc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	889b      	ldrh	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d130      	bne.n	8007e50 <USBD_SetAddress+0x74>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d12c      	bne.n	8007e50 <USBD_SetAddress+0x74>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007dfc:	d828      	bhi.n	8007e50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d104      	bne.n	8007e1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f989 	bl	800812e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1c:	e01c      	b.n	8007e58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fe66 	bl	8008afc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa45 	bl	80082c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e44:	e008      	b.n	8007e58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	e003      	b.n	8007e58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f96b 	bl	800812e <USBD_CtlError>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <USBD_SetConfig+0x118>)
 8007e72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e74:	4b40      	ldr	r3, [pc, #256]	; (8007f78 <USBD_SetConfig+0x118>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d904      	bls.n	8007e86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f955 	bl	800812e <USBD_CtlError>
 8007e84:	e075      	b.n	8007f72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d002      	beq.n	8007e96 <USBD_SetConfig+0x36>
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d023      	beq.n	8007edc <USBD_SetConfig+0x7c>
 8007e94:	e062      	b.n	8007f5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e96:	4b38      	ldr	r3, [pc, #224]	; (8007f78 <USBD_SetConfig+0x118>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01a      	beq.n	8007ed4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <USBD_SetConfig+0x118>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007eb0:	4b31      	ldr	r3, [pc, #196]	; (8007f78 <USBD_SetConfig+0x118>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff f9f0 	bl	800729c <USBD_SetClassConfig>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d104      	bne.n	8007ecc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f932 	bl	800812e <USBD_CtlError>
            return;
 8007eca:	e052      	b.n	8007f72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f9f7 	bl	80082c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ed2:	e04e      	b.n	8007f72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9f3 	bl	80082c0 <USBD_CtlSendStatus>
        break;
 8007eda:	e04a      	b.n	8007f72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007edc:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <USBD_SetConfig+0x118>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007eec:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <USBD_SetConfig+0x118>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ef6:	4b20      	ldr	r3, [pc, #128]	; (8007f78 <USBD_SetConfig+0x118>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff f9ec 	bl	80072da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9dc 	bl	80082c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f08:	e033      	b.n	8007f72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <USBD_SetConfig+0x118>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d01d      	beq.n	8007f54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff f9da 	bl	80072da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <USBD_SetConfig+0x118>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f30:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <USBD_SetConfig+0x118>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff f9b0 	bl	800729c <USBD_SetClassConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d104      	bne.n	8007f4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f8f2 	bl	800812e <USBD_CtlError>
            return;
 8007f4a:	e012      	b.n	8007f72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f9b7 	bl	80082c0 <USBD_CtlSendStatus>
        break;
 8007f52:	e00e      	b.n	8007f72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f9b3 	bl	80082c0 <USBD_CtlSendStatus>
        break;
 8007f5a:	e00a      	b.n	8007f72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8e5 	bl	800812e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f64:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <USBD_SetConfig+0x118>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff f9b5 	bl	80072da <USBD_ClrClassConfig>
        break;
 8007f70:	bf00      	nop
    }
  }
}
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200001a1 	.word	0x200001a1

08007f7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	88db      	ldrh	r3, [r3, #6]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d004      	beq.n	8007f98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8cc 	bl	800812e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f96:	e021      	b.n	8007fdc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	db17      	blt.n	8007fd2 <USBD_GetConfig+0x56>
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	dd02      	ble.n	8007fac <USBD_GetConfig+0x30>
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d00b      	beq.n	8007fc2 <USBD_GetConfig+0x46>
 8007faa:	e012      	b.n	8007fd2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f922 	bl	8008204 <USBD_CtlSendData>
        break;
 8007fc0:	e00c      	b.n	8007fdc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f91a 	bl	8008204 <USBD_CtlSendData>
        break;
 8007fd0:	e004      	b.n	8007fdc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f8aa 	bl	800812e <USBD_CtlError>
        break;
 8007fda:	bf00      	nop
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d81e      	bhi.n	8008038 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d004      	beq.n	800800c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f892 	bl	800812e <USBD_CtlError>
        break;
 800800a:	e01a      	b.n	8008042 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f043 0202 	orr.w	r2, r3, #2
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	330c      	adds	r3, #12
 800802c:	2202      	movs	r2, #2
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8e7 	bl	8008204 <USBD_CtlSendData>
      break;
 8008036:	e004      	b.n	8008042 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f877 	bl	800812e <USBD_CtlError>
      break;
 8008040:	bf00      	nop
  }
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	885b      	ldrh	r3, [r3, #2]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d106      	bne.n	800806a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f92b 	bl	80082c0 <USBD_CtlSendStatus>
  }
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008082:	3b01      	subs	r3, #1
 8008084:	2b02      	cmp	r3, #2
 8008086:	d80b      	bhi.n	80080a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10c      	bne.n	80080aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f911 	bl	80082c0 <USBD_CtlSendStatus>
      }
      break;
 800809e:	e004      	b.n	80080aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f843 	bl	800812e <USBD_CtlError>
      break;
 80080a8:	e000      	b.n	80080ac <USBD_ClrFeature+0x3a>
      break;
 80080aa:	bf00      	nop
  }
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	785a      	ldrb	r2, [r3, #1]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	3302      	adds	r3, #2
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	3303      	adds	r3, #3
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	3304      	adds	r3, #4
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3305      	adds	r3, #5
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4413      	add	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	3306      	adds	r3, #6
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29a      	uxth	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3307      	adds	r3, #7
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	b29b      	uxth	r3, r3
 800811a:	4413      	add	r3, r2
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	80da      	strh	r2, [r3, #6]

}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008138:	2180      	movs	r1, #128	; 0x80
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc7a 	bl	8008a34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc76 	bl	8008a34 <USBD_LL_StallEP>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d032      	beq.n	80081cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 f834 	bl	80081d4 <USBD_GetLen>
 800816c:	4603      	mov	r3, r0
 800816e:	3301      	adds	r3, #1
 8008170:	b29b      	uxth	r3, r3
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	75fa      	strb	r2, [r7, #23]
 8008180:	461a      	mov	r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4413      	add	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	75fa      	strb	r2, [r7, #23]
 8008192:	461a      	mov	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4413      	add	r3, r2
 8008198:	2203      	movs	r2, #3
 800819a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800819c:	e012      	b.n	80081c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	60fa      	str	r2, [r7, #12]
 80081a4:	7dfa      	ldrb	r2, [r7, #23]
 80081a6:	1c51      	adds	r1, r2, #1
 80081a8:	75f9      	strb	r1, [r7, #23]
 80081aa:	4611      	mov	r1, r2
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	440a      	add	r2, r1
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	75fa      	strb	r2, [r7, #23]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4413      	add	r3, r2
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e8      	bne.n	800819e <USBD_GetString+0x4e>
    }
  }
}
 80081cc:	bf00      	nop
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081e0:	e005      	b.n	80081ee <USBD_GetLen+0x1a>
  {
    len++;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	3301      	adds	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3301      	adds	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f5      	bne.n	80081e2 <USBD_GetLen+0xe>
  }

  return len;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2202      	movs	r2, #2
 8008216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800821a:	88fa      	ldrh	r2, [r7, #6]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	2100      	movs	r1, #0
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fc84 	bl	8008b3a <USBD_LL_Transmit>

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	2100      	movs	r1, #0
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 fc72 	bl	8008b3a <USBD_LL_Transmit>

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2203      	movs	r2, #3
 8008272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008276:	88fa      	ldrh	r2, [r7, #6]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fc77 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	2100      	movs	r1, #0
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fc65 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2204      	movs	r2, #4
 80082cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082d0:	2300      	movs	r3, #0
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fc2f 	bl	8008b3a <USBD_LL_Transmit>

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2205      	movs	r2, #5
 80082f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082f6:	2300      	movs	r3, #0
 80082f8:	2200      	movs	r2, #0
 80082fa:	2100      	movs	r1, #0
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc3f 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008310:	2200      	movs	r2, #0
 8008312:	4912      	ldr	r1, [pc, #72]	; (800835c <MX_USB_DEVICE_Init+0x50>)
 8008314:	4812      	ldr	r0, [pc, #72]	; (8008360 <MX_USB_DEVICE_Init+0x54>)
 8008316:	f7fe ff65 	bl	80071e4 <USBD_Init>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008320:	f7f8 fc8c 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008324:	490f      	ldr	r1, [pc, #60]	; (8008364 <MX_USB_DEVICE_Init+0x58>)
 8008326:	480e      	ldr	r0, [pc, #56]	; (8008360 <MX_USB_DEVICE_Init+0x54>)
 8008328:	f7fe ff87 	bl	800723a <USBD_RegisterClass>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008332:	f7f8 fc83 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008336:	490c      	ldr	r1, [pc, #48]	; (8008368 <MX_USB_DEVICE_Init+0x5c>)
 8008338:	4809      	ldr	r0, [pc, #36]	; (8008360 <MX_USB_DEVICE_Init+0x54>)
 800833a:	f7fe feb5 	bl	80070a8 <USBD_CDC_RegisterInterface>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008344:	f7f8 fc7a 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008348:	4805      	ldr	r0, [pc, #20]	; (8008360 <MX_USB_DEVICE_Init+0x54>)
 800834a:	f7fe ff90 	bl	800726e <USBD_Start>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008354:	f7f8 fc72 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008358:	bf00      	nop
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000130 	.word	0x20000130
 8008360:	20000508 	.word	0x20000508
 8008364:	2000001c 	.word	0x2000001c
 8008368:	20000120 	.word	0x20000120

0800836c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008370:	2200      	movs	r2, #0
 8008372:	4905      	ldr	r1, [pc, #20]	; (8008388 <CDC_Init_FS+0x1c>)
 8008374:	4805      	ldr	r0, [pc, #20]	; (800838c <CDC_Init_FS+0x20>)
 8008376:	f7fe feae 	bl	80070d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800837a:	4905      	ldr	r1, [pc, #20]	; (8008390 <CDC_Init_FS+0x24>)
 800837c:	4803      	ldr	r0, [pc, #12]	; (800838c <CDC_Init_FS+0x20>)
 800837e:	f7fe fec4 	bl	800710a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008382:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008384:	4618      	mov	r0, r3
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000bb4 	.word	0x20000bb4
 800838c:	20000508 	.word	0x20000508
 8008390:	200007cc 	.word	0x200007cc

08008394 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008398:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800839a:	4618      	mov	r0, r3
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	4613      	mov	r3, r2
 80083b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2b23      	cmp	r3, #35	; 0x23
 80083b8:	d84a      	bhi.n	8008450 <CDC_Control_FS+0xac>
 80083ba:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <CDC_Control_FS+0x1c>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008451 	.word	0x08008451
 80083c4:	08008451 	.word	0x08008451
 80083c8:	08008451 	.word	0x08008451
 80083cc:	08008451 	.word	0x08008451
 80083d0:	08008451 	.word	0x08008451
 80083d4:	08008451 	.word	0x08008451
 80083d8:	08008451 	.word	0x08008451
 80083dc:	08008451 	.word	0x08008451
 80083e0:	08008451 	.word	0x08008451
 80083e4:	08008451 	.word	0x08008451
 80083e8:	08008451 	.word	0x08008451
 80083ec:	08008451 	.word	0x08008451
 80083f0:	08008451 	.word	0x08008451
 80083f4:	08008451 	.word	0x08008451
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008451 	.word	0x08008451
 8008400:	08008451 	.word	0x08008451
 8008404:	08008451 	.word	0x08008451
 8008408:	08008451 	.word	0x08008451
 800840c:	08008451 	.word	0x08008451
 8008410:	08008451 	.word	0x08008451
 8008414:	08008451 	.word	0x08008451
 8008418:	08008451 	.word	0x08008451
 800841c:	08008451 	.word	0x08008451
 8008420:	08008451 	.word	0x08008451
 8008424:	08008451 	.word	0x08008451
 8008428:	08008451 	.word	0x08008451
 800842c:	08008451 	.word	0x08008451
 8008430:	08008451 	.word	0x08008451
 8008434:	08008451 	.word	0x08008451
 8008438:	08008451 	.word	0x08008451
 800843c:	08008451 	.word	0x08008451
 8008440:	08008451 	.word	0x08008451
 8008444:	08008451 	.word	0x08008451
 8008448:	08008451 	.word	0x08008451
 800844c:	08008451 	.word	0x08008451
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008450:	bf00      	nop
  }

  return (USBD_OK);
 8008452:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4808      	ldr	r0, [pc, #32]	; (8008490 <CDC_Receive_FS+0x30>)
 800846e:	f7fe fe4c 	bl	800710a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008472:	4807      	ldr	r0, [pc, #28]	; (8008490 <CDC_Receive_FS+0x30>)
 8008474:	f7fe fe8c 	bl	8007190 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,*Len);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7f7 feb4 	bl	80001ec <CDC_ReceiveCallback>
  return (USBD_OK);
 8008484:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000508 	.word	0x20000508

08008494 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <CDC_Transmit_FS+0x48>)
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e00b      	b.n	80084d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084ba:	887b      	ldrh	r3, [r7, #2]
 80084bc:	461a      	mov	r2, r3
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4806      	ldr	r0, [pc, #24]	; (80084dc <CDC_Transmit_FS+0x48>)
 80084c2:	f7fe fe08 	bl	80070d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084c6:	4805      	ldr	r0, [pc, #20]	; (80084dc <CDC_Transmit_FS+0x48>)
 80084c8:	f7fe fe33 	bl	8007132 <USBD_CDC_TransmitPacket>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000508 	.word	0x20000508

080084e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2212      	movs	r2, #18
 80084f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	2000014c 	.word	0x2000014c

08008504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2204      	movs	r2, #4
 8008514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008516:	4b03      	ldr	r3, [pc, #12]	; (8008524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	20000160 	.word	0x20000160

08008528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	4907      	ldr	r1, [pc, #28]	; (800855c <USBD_FS_ProductStrDescriptor+0x34>)
 800853e:	4808      	ldr	r0, [pc, #32]	; (8008560 <USBD_FS_ProductStrDescriptor+0x38>)
 8008540:	f7ff fe06 	bl	8008150 <USBD_GetString>
 8008544:	e004      	b.n	8008550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4904      	ldr	r1, [pc, #16]	; (800855c <USBD_FS_ProductStrDescriptor+0x34>)
 800854a:	4805      	ldr	r0, [pc, #20]	; (8008560 <USBD_FS_ProductStrDescriptor+0x38>)
 800854c:	f7ff fe00 	bl	8008150 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000f9c 	.word	0x20000f9c
 8008560:	08008cfc 	.word	0x08008cfc

08008564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	4904      	ldr	r1, [pc, #16]	; (8008584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008574:	4804      	ldr	r0, [pc, #16]	; (8008588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008576:	f7ff fdeb 	bl	8008150 <USBD_GetString>
  return USBD_StrDesc;
 800857a:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000f9c 	.word	0x20000f9c
 8008588:	08008d0c 	.word	0x08008d0c

0800858c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	221a      	movs	r2, #26
 800859c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800859e:	f000 f843 	bl	8008628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085a2:	4b02      	ldr	r3, [pc, #8]	; (80085ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000164 	.word	0x20000164

080085b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4907      	ldr	r1, [pc, #28]	; (80085e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085c8:	f7ff fdc2 	bl	8008150 <USBD_GetString>
 80085cc:	e004      	b.n	80085d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4904      	ldr	r1, [pc, #16]	; (80085e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085d2:	4805      	ldr	r0, [pc, #20]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085d4:	f7ff fdbc 	bl	8008150 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000f9c 	.word	0x20000f9c
 80085e8:	08008d20 	.word	0x08008d20

080085ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	4907      	ldr	r1, [pc, #28]	; (8008620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008602:	4808      	ldr	r0, [pc, #32]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008604:	f7ff fda4 	bl	8008150 <USBD_GetString>
 8008608:	e004      	b.n	8008614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4904      	ldr	r1, [pc, #16]	; (8008620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800860e:	4805      	ldr	r0, [pc, #20]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008610:	f7ff fd9e 	bl	8008150 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000f9c 	.word	0x20000f9c
 8008624:	08008d2c 	.word	0x08008d2c

08008628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <Get_SerialNum+0x44>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <Get_SerialNum+0x48>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <Get_SerialNum+0x4c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800864e:	2208      	movs	r2, #8
 8008650:	4909      	ldr	r1, [pc, #36]	; (8008678 <Get_SerialNum+0x50>)
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f814 	bl	8008680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008658:	2204      	movs	r2, #4
 800865a:	4908      	ldr	r1, [pc, #32]	; (800867c <Get_SerialNum+0x54>)
 800865c:	68b8      	ldr	r0, [r7, #8]
 800865e:	f000 f80f 	bl	8008680 <IntToUnicode>
  }
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	1ffff7ac 	.word	0x1ffff7ac
 8008670:	1ffff7b0 	.word	0x1ffff7b0
 8008674:	1ffff7b4 	.word	0x1ffff7b4
 8008678:	20000166 	.word	0x20000166
 800867c:	20000176 	.word	0x20000176

08008680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
 8008696:	e027      	b.n	80086e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	0f1b      	lsrs	r3, r3, #28
 800869c:	2b09      	cmp	r3, #9
 800869e:	d80b      	bhi.n	80086b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	4619      	mov	r1, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	440b      	add	r3, r1
 80086b0:	3230      	adds	r2, #48	; 0x30
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e00a      	b.n	80086ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0f1b      	lsrs	r3, r3, #28
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	4619      	mov	r1, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	440b      	add	r3, r1
 80086c8:	3237      	adds	r2, #55	; 0x37
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	3301      	adds	r3, #1
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	3301      	adds	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	7dfa      	ldrb	r2, [r7, #23]
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d3d3      	bcc.n	8008698 <IntToUnicode+0x18>
  }
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	605a      	str	r2, [r3, #4]
 800870e:	609a      	str	r2, [r3, #8]
 8008710:	60da      	str	r2, [r3, #12]
 8008712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1c      	ldr	r2, [pc, #112]	; (800878c <HAL_PCD_MspInit+0x90>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d131      	bne.n	8008782 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800871e:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <HAL_PCD_MspInit+0x94>)
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <HAL_PCD_MspInit+0x94>)
 8008724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008728:	6153      	str	r3, [r2, #20]
 800872a:	4b19      	ldr	r3, [pc, #100]	; (8008790 <HAL_PCD_MspInit+0x94>)
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800873a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800873c:	2302      	movs	r3, #2
 800873e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008740:	2300      	movs	r3, #0
 8008742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008744:	2303      	movs	r3, #3
 8008746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008748:	230e      	movs	r3, #14
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800874c:	f107 0314 	add.w	r3, r7, #20
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008756:	f7f9 fe6d 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <HAL_PCD_MspInit+0x94>)
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4a0c      	ldr	r2, [pc, #48]	; (8008790 <HAL_PCD_MspInit+0x94>)
 8008760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008764:	61d3      	str	r3, [r2, #28]
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <HAL_PCD_MspInit+0x94>)
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	2014      	movs	r0, #20
 8008778:	f7f9 fc73 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800877c:	2014      	movs	r0, #20
 800877e:	f7f9 fc8c 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008782:	bf00      	nop
 8008784:	3728      	adds	r7, #40	; 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40005c00 	.word	0x40005c00
 8008790:	40021000 	.word	0x40021000

08008794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f7fe fda8 	bl	8007300 <USBD_LL_SetupStage>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	015b      	lsls	r3, r3, #5
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	4619      	mov	r1, r3
 80087dc:	f7fe fddb 	bl	8007396 <USBD_LL_DataOutStage>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	015b      	lsls	r3, r3, #5
 8008800:	4413      	add	r3, r2
 8008802:	333c      	adds	r3, #60	; 0x3c
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	4619      	mov	r1, r3
 800880a:	f7fe fe35 	bl	8007478 <USBD_LL_DataInStage>
}
 800880e:	bf00      	nop
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe ff48 	bl	80076ba <USBD_LL_SOF>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d001      	beq.n	800884a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008846:	f7f8 f9f9 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008850:	7bfa      	ldrb	r2, [r7, #15]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fef5 	bl	8007644 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe feae 	bl	80075c2 <USBD_LL_Reset>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fef0 	bl	8007664 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <HAL_PCD_SuspendCallback+0x30>)
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4a03      	ldr	r2, [pc, #12]	; (80088a0 <HAL_PCD_SuspendCallback+0x30>)
 8008892:	f043 0306 	orr.w	r3, r3, #6
 8008896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008898:	bf00      	nop
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe feeb 	bl	800768e <USBD_LL_Resume>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088c8:	4a28      	ldr	r2, [pc, #160]	; (800896c <USBD_LL_Init+0xac>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a26      	ldr	r2, [pc, #152]	; (800896c <USBD_LL_Init+0xac>)
 80088d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088d8:	4b24      	ldr	r3, [pc, #144]	; (800896c <USBD_LL_Init+0xac>)
 80088da:	4a25      	ldr	r2, [pc, #148]	; (8008970 <USBD_LL_Init+0xb0>)
 80088dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088de:	4b23      	ldr	r3, [pc, #140]	; (800896c <USBD_LL_Init+0xac>)
 80088e0:	2208      	movs	r2, #8
 80088e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088e4:	4b21      	ldr	r3, [pc, #132]	; (800896c <USBD_LL_Init+0xac>)
 80088e6:	2202      	movs	r2, #2
 80088e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088ea:	4b20      	ldr	r3, [pc, #128]	; (800896c <USBD_LL_Init+0xac>)
 80088ec:	2202      	movs	r2, #2
 80088ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088f0:	4b1e      	ldr	r3, [pc, #120]	; (800896c <USBD_LL_Init+0xac>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088f6:	4b1d      	ldr	r3, [pc, #116]	; (800896c <USBD_LL_Init+0xac>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088fc:	481b      	ldr	r0, [pc, #108]	; (800896c <USBD_LL_Init+0xac>)
 80088fe:	f7f9 ff43 	bl	8002788 <HAL_PCD_Init>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008908:	f7f8 f998 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008912:	2318      	movs	r3, #24
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	f7fa fda8 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008922:	2358      	movs	r3, #88	; 0x58
 8008924:	2200      	movs	r2, #0
 8008926:	2180      	movs	r1, #128	; 0x80
 8008928:	f7fa fda0 	bl	800346c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008932:	23c0      	movs	r3, #192	; 0xc0
 8008934:	2200      	movs	r2, #0
 8008936:	2181      	movs	r1, #129	; 0x81
 8008938:	f7fa fd98 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008942:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008946:	2200      	movs	r2, #0
 8008948:	2101      	movs	r1, #1
 800894a:	f7fa fd8f 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008958:	2200      	movs	r2, #0
 800895a:	2182      	movs	r1, #130	; 0x82
 800895c:	f7fa fd86 	bl	800346c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	2000119c 	.word	0x2000119c
 8008970:	40005c00 	.word	0x40005c00

08008974 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800898a:	4618      	mov	r0, r3
 800898c:	f7f9 ffb0 	bl	80028f0 <HAL_PCD_Start>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f94c 	bl	8008c34 <USBD_Get_USB_Status>
 800899c:	4603      	mov	r3, r0
 800899e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	461a      	mov	r2, r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	70fb      	strb	r3, [r7, #3]
 80089bc:	460b      	mov	r3, r1
 80089be:	70bb      	strb	r3, [r7, #2]
 80089c0:	4613      	mov	r3, r2
 80089c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089d2:	78bb      	ldrb	r3, [r7, #2]
 80089d4:	883a      	ldrh	r2, [r7, #0]
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	f7fa f8d7 	bl	8002b8a <HAL_PCD_EP_Open>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f926 	bl	8008c34 <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fa f918 	bl	8002c4a <HAL_PCD_EP_Close>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 f907 	bl	8008c34 <USBD_Get_USB_Status>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fa f9c3 	bl	8002dde <HAL_PCD_EP_SetStall>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f8e8 	bl	8008c34 <USBD_Get_USB_Status>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fa f9fe 	bl	8002e92 <HAL_PCD_EP_ClrStall>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f8c9 	bl	8008c34 <USBD_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ac2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	da08      	bge.n	8008ade <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	015b      	lsls	r3, r3, #5
 8008ad6:	4413      	add	r3, r2
 8008ad8:	332a      	adds	r3, #42	; 0x2a
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	e008      	b.n	8008af0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	015b      	lsls	r3, r3, #5
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008aee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fa f810 	bl	8002b40 <HAL_PCD_SetAddress>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f884 	bl	8008c34 <USBD_Get_USB_Status>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	461a      	mov	r2, r3
 8008b46:	460b      	mov	r3, r1
 8008b48:	72fb      	strb	r3, [r7, #11]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b5c:	893b      	ldrh	r3, [r7, #8]
 8008b5e:	7af9      	ldrb	r1, [r7, #11]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	f7fa f903 	bl	8002d6c <HAL_PCD_EP_Transmit>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f861 	bl	8008c34 <USBD_Get_USB_Status>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008b76:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	72fb      	strb	r3, [r7, #11]
 8008b90:	4613      	mov	r3, r2
 8008b92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	7af9      	ldrb	r1, [r7, #11]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	f7fa f891 	bl	8002cce <HAL_PCD_EP_Receive>
 8008bac:	4603      	mov	r3, r0
 8008bae:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f83e 	bl	8008c34 <USBD_Get_USB_Status>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008bbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd8:	78fa      	ldrb	r2, [r7, #3]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fa f8b0 	bl	8002d42 <HAL_PCD_EP_GetRxCount>
 8008be2:	4603      	mov	r3, r0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bf4:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <USBD_static_malloc+0x18>)
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200001a4 	.word	0x200001a4

08008c08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d817      	bhi.n	8008c78 <USBD_Get_USB_Status+0x44>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <USBD_Get_USB_Status+0x1c>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c61 	.word	0x08008c61
 8008c54:	08008c67 	.word	0x08008c67
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c73 	.word	0x08008c73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e00b      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e008      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e005      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c72:	2302      	movs	r3, #2
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	e002      	b.n	8008c7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7c:	bf00      	nop
  }
  return usb_status;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <__libc_init_array>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	4e0d      	ldr	r6, [pc, #52]	; (8008cc4 <__libc_init_array+0x38>)
 8008c90:	4c0d      	ldr	r4, [pc, #52]	; (8008cc8 <__libc_init_array+0x3c>)
 8008c92:	1ba4      	subs	r4, r4, r6
 8008c94:	10a4      	asrs	r4, r4, #2
 8008c96:	2500      	movs	r5, #0
 8008c98:	42a5      	cmp	r5, r4
 8008c9a:	d109      	bne.n	8008cb0 <__libc_init_array+0x24>
 8008c9c:	4e0b      	ldr	r6, [pc, #44]	; (8008ccc <__libc_init_array+0x40>)
 8008c9e:	4c0c      	ldr	r4, [pc, #48]	; (8008cd0 <__libc_init_array+0x44>)
 8008ca0:	f000 f820 	bl	8008ce4 <_init>
 8008ca4:	1ba4      	subs	r4, r4, r6
 8008ca6:	10a4      	asrs	r4, r4, #2
 8008ca8:	2500      	movs	r5, #0
 8008caa:	42a5      	cmp	r5, r4
 8008cac:	d105      	bne.n	8008cba <__libc_init_array+0x2e>
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cb4:	4798      	blx	r3
 8008cb6:	3501      	adds	r5, #1
 8008cb8:	e7ee      	b.n	8008c98 <__libc_init_array+0xc>
 8008cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cbe:	4798      	blx	r3
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	e7f2      	b.n	8008caa <__libc_init_array+0x1e>
 8008cc4:	08008d6c 	.word	0x08008d6c
 8008cc8:	08008d6c 	.word	0x08008d6c
 8008ccc:	08008d6c 	.word	0x08008d6c
 8008cd0:	08008d70 	.word	0x08008d70

08008cd4 <memset>:
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <memset+0xa>
 8008cdc:	4770      	bx	lr
 8008cde:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce2:	e7f9      	b.n	8008cd8 <memset+0x4>

08008ce4 <_init>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr

08008cf0 <_fini>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr
