
f303vc_logeris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800c768  0800c768  0001c768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9b0  0800c9b0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9b0  0800c9b0  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9b0  0800c9b0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9b0  0800c9b0  0001c9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9b4  0800c9b4  0001c9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c0  2000017c  0800cb34  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  0800cb34  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db69  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fed  00000000  00000000  0003dd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00041d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  00043180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002228b  00000000  00000000  00044440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9df  00000000  00000000  000666cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c23eb  00000000  00000000  000830aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005914  00000000  00000000  001454e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c74c 	.word	0x0800c74c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800c74c 	.word	0x0800c74c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <HAL_ADC_ConvCpltCallback>:
uint8_t DS18B20_Start(void);
void DS18B20_Write(uint8_t data);
uint8_t DS18B20_Read(void);
void measTemp();

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	mVeliavos.adcDone = 1;
 8000b0c:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b0e:	7813      	ldrb	r3, [r2, #0]
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	7013      	strb	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200003c0 	.word	0x200003c0

08000b28 <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	mUSB_data.data = buf;
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <CDC_ReceiveCallback+0x2c>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]
	mUSB_data.len = len;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <CDC_ReceiveCallback+0x2c>)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	6053      	str	r3, [r2, #4]
	mVeliavos.usbDRDY = 1;
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <CDC_ReceiveCallback+0x30>)
 8000b40:	7813      	ldrb	r3, [r2, #0]
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	7013      	strb	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	200004bc 	.word	0x200004bc
 8000b58:	200003c0 	.word	0x200003c0
 8000b5c:	00000000 	.word	0x00000000

08000b60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b0b4      	sub	sp, #208	; 0xd0
 8000b64:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint16_t dacSignal[DAC_SIGNAL_STEPS] = { 0 };
 8000b66:	463b      	mov	r3, r7
 8000b68:	22c8      	movs	r2, #200	; 0xc8
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00a fdaf 	bl	800b6d0 <memset>
	generateSine(dacSignal, DAC_SIGNAL_STEPS, 2000);
 8000b72:	463b      	mov	r3, r7
 8000b74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b78:	2164      	movs	r1, #100	; 0x64
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fc2c 	bl	80013d8 <generateSine>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b80:	f001 f846 	bl	8001c10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b84:	f000 f930 	bl	8000de8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b88:	f000 fbaa 	bl	80012e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b8c:	f000 fb76 	bl	800127c <MX_DMA_Init>
	MX_ADC2_Init();
 8000b90:	f000 f98a 	bl	8000ea8 <MX_ADC2_Init>
	MX_USB_DEVICE_Init();
 8000b94:	f00a f8a8 	bl	800ace8 <MX_USB_DEVICE_Init>
	MX_TIM3_Init();
 8000b98:	f000 fa8e 	bl	80010b8 <MX_TIM3_Init>
	MX_TIM6_Init();
 8000b9c:	f000 fb02 	bl	80011a4 <MX_TIM6_Init>
	MX_DAC_Init();
 8000ba0:	f000 fa60 	bl	8001064 <MX_DAC_Init>
	MX_TIM7_Init();
 8000ba4:	f000 fb34 	bl	8001210 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	4880      	ldr	r0, [pc, #512]	; (8000db0 <main+0x250>)
 8000bae:	f002 fe89 	bl	80038c4 <HAL_GPIO_TogglePin>

	CHANGE_SINE_F(50);
 8000bb2:	f005 fa89 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fc47 	bl	800044c <__aeabi_ui2d>
 8000bbe:	a37a      	add	r3, pc, #488	; (adr r3, 8000da8 <main+0x248>)
 8000bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc4:	f7ff fcbc 	bl	8000540 <__aeabi_dmul>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4614      	mov	r4, r2
 8000bce:	461d      	mov	r5, r3
 8000bd0:	4b78      	ldr	r3, [pc, #480]	; (8000db4 <main+0x254>)
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc38 	bl	800044c <__aeabi_ui2d>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4620      	mov	r0, r4
 8000be2:	4629      	mov	r1, r5
 8000be4:	f7ff fdd6 	bl	8000794 <__aeabi_ddiv>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <main+0x258>)
 8000bf6:	f7ff fdcd 	bl	8000794 <__aeabi_ddiv>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <main+0x25c>)
 8000c08:	f7ff fae2 	bl	80001d0 <__aeabi_dsub>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4c68      	ldr	r4, [pc, #416]	; (8000db4 <main+0x254>)
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff ff55 	bl	8000ac4 <__aeabi_d2uiz>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	//TODO sugeneruot perkelus visas init ir panasiai i atskirus failus del tvarkos cia (kube)

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dacSignal, DAC_SIGNAL_STEPS, DAC_ALIGN_12B_R);
 8000c1e:	463a      	mov	r2, r7
 8000c20:	2300      	movs	r3, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2100      	movs	r1, #0
 8000c28:	4865      	ldr	r0, [pc, #404]	; (8000dc0 <main+0x260>)
 8000c2a:	f002 f8f7 	bl	8002e1c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);
 8000c2e:	4865      	ldr	r0, [pc, #404]	; (8000dc4 <main+0x264>)
 8000c30:	f005 fc5e 	bl	80064f0 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) mPaketasSiuntimui.adcData, KANALU_SKAICIUS);
 8000c34:	220a      	movs	r2, #10
 8000c36:	4964      	ldr	r1, [pc, #400]	; (8000dc8 <main+0x268>)
 8000c38:	4864      	ldr	r0, [pc, #400]	; (8000dcc <main+0x26c>)
 8000c3a:	f001 fa67 	bl	800210c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000c3e:	4864      	ldr	r0, [pc, #400]	; (8000dd0 <main+0x270>)
 8000c40:	f005 fc56 	bl	80064f0 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim6);
 8000c44:	4863      	ldr	r0, [pc, #396]	; (8000dd4 <main+0x274>)
 8000c46:	f005 fc53 	bl	80064f0 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mVeliavos.usbDRDY) {
 8000c4a:	4b63      	ldr	r3, [pc, #396]	; (8000dd8 <main+0x278>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 8083 	beq.w	8000d60 <main+0x200>
			switch (*mUSB_data.data) {
 8000c5a:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <main+0x27c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d02b      	beq.n	8000cbc <main+0x15c>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	dc73      	bgt.n	8000d50 <main+0x1f0>
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	dc02      	bgt.n	8000c72 <main+0x112>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da03      	bge.n	8000c78 <main+0x118>
			case 3:
				// Change sine wave frequency
				CHANGE_SINE_F(*(uint16_t* ) (mUSB_data.data + 1));
				break;
			default:
				break;
 8000c70:	e06e      	b.n	8000d50 <main+0x1f0>
			switch (*mUSB_data.data) {
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d00c      	beq.n	8000c90 <main+0x130>
				break;
 8000c76:	e06b      	b.n	8000d50 <main+0x1f0>
				mVeliavos.start = *mUSB_data.data;
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <main+0x27c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	4a54      	ldr	r2, [pc, #336]	; (8000dd8 <main+0x278>)
 8000c86:	7813      	ldrb	r3, [r2, #0]
 8000c88:	f361 0382 	bfi	r3, r1, #2, #1
 8000c8c:	7013      	strb	r3, [r2, #0]
				break;
 8000c8e:	e062      	b.n	8000d56 <main+0x1f6>
				if (mUSB_data.len == 3)
 8000c90:	4b52      	ldr	r3, [pc, #328]	; (8000ddc <main+0x27c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d15d      	bne.n	8000d54 <main+0x1f4>
					TIM3->ARR = *(uint16_t*) (mUSB_data.data + 1) - 1 < 299 ? 299 : *(uint16_t*) (mUSB_data.data + 1) - 1;
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <main+0x27c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ca4:	d305      	bcc.n	8000cb2 <main+0x152>
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <main+0x27c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	e001      	b.n	8000cb6 <main+0x156>
 8000cb2:	f240 132b 	movw	r3, #299	; 0x12b
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	; (8000de0 <main+0x280>)
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8000cba:	e04b      	b.n	8000d54 <main+0x1f4>
				CHANGE_SINE_F(*(uint16_t* ) (mUSB_data.data + 1));
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <main+0x27c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fbd1 	bl	800046c <__aeabi_i2d>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	493a      	ldr	r1, [pc, #232]	; (8000dbc <main+0x25c>)
 8000cd4:	f7ff fd5e 	bl	8000794 <__aeabi_ddiv>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4614      	mov	r4, r2
 8000cde:	461d      	mov	r5, r3
 8000ce0:	f005 f9f2 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fbb0 	bl	800044c <__aeabi_ui2d>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f7ff fc24 	bl	8000540 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <main+0x254>)
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	3301      	adds	r3, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fba0 	bl	800044c <__aeabi_ui2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	f7ff fd3e 	bl	8000794 <__aeabi_ddiv>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <main+0x258>)
 8000d26:	f7ff fd35 	bl	8000794 <__aeabi_ddiv>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <main+0x25c>)
 8000d38:	f7ff fa4a 	bl	80001d0 <__aeabi_dsub>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4c1c      	ldr	r4, [pc, #112]	; (8000db4 <main+0x254>)
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff febd 	bl	8000ac4 <__aeabi_d2uiz>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
				break;
 8000d4e:	e002      	b.n	8000d56 <main+0x1f6>
				break;
 8000d50:	bf00      	nop
 8000d52:	e000      	b.n	8000d56 <main+0x1f6>
				break;
 8000d54:	bf00      	nop
			}
			mVeliavos.usbDRDY = 0;
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <main+0x278>)
 8000d58:	7813      	ldrb	r3, [r2, #0]
 8000d5a:	f36f 0341 	bfc	r3, #1, #1
 8000d5e:	7013      	strb	r3, [r2, #0]
		}

		if (mVeliavos.adcDone) {
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <main+0x278>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f43f af6d 	beq.w	8000c4a <main+0xea>
			mVeliavos.adcDone = 0;
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <main+0x278>)
 8000d72:	7813      	ldrb	r3, [r2, #0]
 8000d74:	f36f 0300 	bfc	r3, #0, #1
 8000d78:	7013      	strb	r3, [r2, #0]
			ledsToggle();
 8000d7a:	f000 fb91 	bl	80014a0 <ledsToggle>
			measTemp();
 8000d7e:	f000 fcad 	bl	80016dc <measTemp>
			mPaketasSiuntimui.temperatura = TEMP;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <main+0x284>)
 8000d84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <main+0x268>)
 8000d8a:	829a      	strh	r2, [r3, #20]

			if (mVeliavos.start)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <main+0x278>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f43f af57 	beq.w	8000c4a <main+0xea>
				CDC_Transmit_FS((uint8_t*) mPaketasSiuntimui.adcData, KANALU_SKAICIUS * 2 + 2);
 8000d9c:	2116      	movs	r1, #22
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <main+0x268>)
 8000da0:	f00a f866 	bl	800ae70 <CDC_Transmit_FS>
		if (mVeliavos.usbDRDY) {
 8000da4:	e751      	b.n	8000c4a <main+0xea>
 8000da6:	bf00      	nop
 8000da8:	47ae147b 	.word	0x47ae147b
 8000dac:	3f947ae1 	.word	0x3f947ae1
 8000db0:	48001000 	.word	0x48001000
 8000db4:	40001400 	.word	0x40001400
 8000db8:	40590000 	.word	0x40590000
 8000dbc:	3ff00000 	.word	0x3ff00000
 8000dc0:	200004a8 	.word	0x200004a8
 8000dc4:	20000554 	.word	0x20000554
 8000dc8:	200005a0 	.word	0x200005a0
 8000dcc:	200003c4 	.word	0x200003c4
 8000dd0:	20000414 	.word	0x20000414
 8000dd4:	200004c4 	.word	0x200004c4
 8000dd8:	200003c0 	.word	0x200003c0
 8000ddc:	200004bc 	.word	0x200004bc
 8000de0:	40000400 	.word	0x40000400
 8000de4:	200004a4 	.word	0x200004a4

08000de8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09e      	sub	sp, #120	; 0x78
 8000dec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00a fc6a 	bl	800b6d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	223c      	movs	r2, #60	; 0x3c
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00a fc5c 	bl	800b6d0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e32:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f004 f854 	bl	8004eec <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
		Error_Handler();
 8000e4a:	f000 fcb3 	bl	80017b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2302      	movs	r3, #2
 8000e54:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000e64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 ff46 	bl	8005cfc <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x92>
		Error_Handler();
 8000e76:	f000 fc9d 	bl	80017b4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC12;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SystemClock_Config+0xbc>)
 8000e7c:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 f927 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xb4>
		Error_Handler();
 8000e98:	f000 fc8c 	bl	80017b4 <Error_Handler>
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3778      	adds	r7, #120	; 0x78
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	00020080 	.word	0x00020080

08000ea8 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000ebe:	4b67      	ldr	r3, [pc, #412]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ec0:	4a67      	ldr	r2, [pc, #412]	; (8001060 <MX_ADC2_Init+0x1b8>)
 8000ec2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec4:	4b65      	ldr	r3, [pc, #404]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ed0:	4b62      	ldr	r3, [pc, #392]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	765a      	strb	r2, [r3, #25]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b5f      	ldr	r3, [pc, #380]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee4:	4b5d      	ldr	r3, [pc, #372]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b59      	ldr	r3, [pc, #356]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 10;
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f00:	4b56      	ldr	r3, [pc, #344]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f08:	4b54      	ldr	r3, [pc, #336]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	761a      	strb	r2, [r3, #24]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f1a:	4850      	ldr	r0, [pc, #320]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f1c:	f000 ff16 	bl	8001d4c <HAL_ADC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC2_Init+0x82>
		Error_Handler();
 8000f26:	f000 fc45 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000f36:	2306      	movs	r3, #6
 8000f38:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4845      	ldr	r0, [pc, #276]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f48:	f001 f9fc 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC2_Init+0xae>
		Error_Handler();
 8000f52:	f000 fc2f 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000f56:	2303      	movs	r3, #3
 8000f58:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	483e      	ldr	r0, [pc, #248]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f64:	f001 f9ee 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC2_Init+0xca>
		Error_Handler();
 8000f6e:	f000 fc21 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000f72:	2304      	movs	r3, #4
 8000f74:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f76:	2303      	movs	r3, #3
 8000f78:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4837      	ldr	r0, [pc, #220]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f80:	f001 f9e0 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC2_Init+0xe6>
		Error_Handler();
 8000f8a:	f000 fc13 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f92:	2304      	movs	r3, #4
 8000f94:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4830      	ldr	r0, [pc, #192]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000f9c:	f001 f9d2 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC2_Init+0x102>
		Error_Handler();
 8000fa6:	f000 fc05 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000faa:	2306      	movs	r3, #6
 8000fac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4829      	ldr	r0, [pc, #164]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000fb8:	f001 f9c4 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC2_Init+0x11e>
		Error_Handler();
 8000fc2:	f000 fbf7 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000fd4:	f001 f9b6 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC2_Init+0x13a>
		Error_Handler();
 8000fde:	f000 fbe9 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <MX_ADC2_Init+0x1b4>)
 8000ff0:	f001 f9a8 	bl	8002344 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC2_Init+0x156>
		Error_Handler();
 8000ffa:	f000 fbdb 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000ffe:	2309      	movs	r3, #9
 8001000:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 8001002:	2308      	movs	r3, #8
 8001004:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_ADC2_Init+0x1b4>)
 800100c:	f001 f99a 	bl	8002344 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC2_Init+0x172>
		Error_Handler();
 8001016:	f000 fbcd 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800101e:	2309      	movs	r3, #9
 8001020:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_ADC2_Init+0x1b4>)
 8001028:	f001 f98c 	bl	8002344 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC2_Init+0x18e>
		Error_Handler();
 8001032:	f000 fbbf 	bl	80017b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001036:	230b      	movs	r3, #11
 8001038:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800103a:	230a      	movs	r3, #10
 800103c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_ADC2_Init+0x1b4>)
 8001044:	f001 f97e 	bl	8002344 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC2_Init+0x1aa>
		Error_Handler();
 800104e:	f000 fbb1 	bl	80017b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200003c4 	.word	0x200003c4
 8001060:	50000100 	.word	0x50000100

08001064 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_DAC_Init+0x4c>)
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <MX_DAC_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_DAC_Init+0x4c>)
 800107c:	f001 fe83 	bl	8002d86 <HAL_DAC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_DAC_Init+0x26>
		Error_Handler();
 8001086:	f000 fb95 	bl	80017b4 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800108a:	2314      	movs	r3, #20
 800108c:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_DAC_Init+0x4c>)
 800109a:	f001 ffd5 	bl	8003048 <HAL_DAC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_DAC_Init+0x44>
		Error_Handler();
 80010a4:	f000 fb86 	bl	80017b4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200004a8 	.word	0x200004a8
 80010b4:	40007400 	.word	0x40007400

080010b8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_TIM3_Init+0xe4>)
 80010ec:	4a2c      	ldr	r2, [pc, #176]	; (80011a0 <MX_TIM3_Init+0xe8>)
 80010ee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48000 - 1;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_TIM3_Init+0xe4>)
 80010f2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80010f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_TIM3_Init+0xe4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <MX_TIM3_Init+0xe4>)
 8001100:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001104:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_TIM3_Init+0xe4>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_TIM3_Init+0xe4>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <MX_TIM3_Init+0xe4>)
 8001114:	f005 f994 	bl	8006440 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0x6a>
		Error_Handler();
 800111e:	f000 fb49 	bl	80017b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	4619      	mov	r1, r3
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <MX_TIM3_Init+0xe4>)
 8001130:	f005 fc36 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x86>
		Error_Handler();
 800113a:	f000 fb3b 	bl	80017b4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_TIM3_Init+0xe4>)
 8001140:	f005 fa38 	bl	80065b4 <HAL_TIM_OC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x96>
		Error_Handler();
 800114a:	f000 fb33 	bl	80017b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800114e:	2320      	movs	r3, #32
 8001150:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <MX_TIM3_Init+0xe4>)
 800115e:	f006 f917 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0xb4>
		Error_Handler();
 8001168:	f000 fb24 	bl	80017b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800117c:	463b      	mov	r3, r7
 800117e:	220c      	movs	r2, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM3_Init+0xe4>)
 8001184:	f005 fb96 	bl	80068b4 <HAL_TIM_OC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0xda>
		Error_Handler();
 800118e:	f000 fb11 	bl	80017b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	; 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000414 	.word	0x20000414
 80011a0:	40000400 	.word	0x40000400

080011a4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_TIM6_Init+0x64>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <MX_TIM6_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 48 - 1;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_TIM6_Init+0x64>)
 80011bc:	222f      	movs	r2, #47	; 0x2f
 80011be:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_TIM6_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0xfff;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_TIM6_Init+0x64>)
 80011c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011cc:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_TIM6_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_TIM6_Init+0x64>)
 80011d6:	f005 f933 	bl	8006440 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM6_Init+0x40>
		Error_Handler();
 80011e0:	f000 fae8 	bl	80017b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM6_Init+0x64>)
 80011f2:	f006 f8cd 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM6_Init+0x5c>
		Error_Handler();
 80011fc:	f000 fada 	bl	80017b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200004c4 	.word	0x200004c4
 800120c:	40001000 	.word	0x40001000

08001210 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_TIM7_Init+0x64>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <MX_TIM7_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 48 - 1;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_TIM7_Init+0x64>)
 8001228:	222f      	movs	r2, #47	; 0x2f
 800122a:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_TIM7_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 200 - 1;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_TIM7_Init+0x64>)
 8001234:	22c7      	movs	r2, #199	; 0xc7
 8001236:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_TIM7_Init+0x64>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_TIM7_Init+0x64>)
 8001240:	f005 f8fe 	bl	8006440 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM7_Init+0x3e>
		Error_Handler();
 800124a:	f000 fab3 	bl	80017b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800124e:	2320      	movs	r3, #32
 8001250:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_TIM7_Init+0x64>)
 800125c:	f006 f898 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM7_Init+0x5a>
		Error_Handler();
 8001266:	f000 faa5 	bl	80017b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000554 	.word	0x20000554
 8001278:	40001400 	.word	0x40001400

0800127c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_DMA_Init+0x60>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_DMA_Init+0x60>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_DMA_Init+0x60>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x60>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x60>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x60>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	200d      	movs	r0, #13
 80012b8:	f001 fd2f 	bl	8002d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012bc:	200d      	movs	r0, #13
 80012be:	f001 fd48 	bl	8002d52 <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2038      	movs	r0, #56	; 0x38
 80012c8:	f001 fd27 	bl	8002d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80012cc:	2038      	movs	r0, #56	; 0x38
 80012ce:	f001 fd40 	bl	8002d52 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_GPIO_Init+0xe8>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <MX_GPIO_Init+0xe8>)
 80012fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	6153      	str	r3, [r2, #20]
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_GPIO_Init+0xec>)
 8001374:	f002 fa8e 	bl	8003894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, led1_Pin | led0_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <MX_GPIO_Init+0xf0>)
 8001380:	f002 fa88 	bl	8003894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : temp_Pin */
	GPIO_InitStruct.Pin = temp_Pin;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(temp_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_GPIO_Init+0xec>)
 800139c:	f002 f8e8 	bl	8003570 <HAL_GPIO_Init>

	/*Configure GPIO pins : led1_Pin led0_Pin */
	GPIO_InitStruct.Pin = led1_Pin | led0_Pin;
 80013a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_GPIO_Init+0xf0>)
 80013ba:	f002 f8d9 	bl	8003570 <HAL_GPIO_Init>

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48001000 	.word	0x48001000
 80013d4:	00000000 	.word	0x00000000

080013d8 <generateSine>:

/* USER CODE BEGIN 4 */
void generateSine(uint16_t *array, uint32_t len, uint16_t amplitude) {
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80fb      	strh	r3, [r7, #6]
	amplitude /= 2;
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	80fb      	strh	r3, [r7, #6]
	//	Generate sine wave for DAC
	for (uint8_t i = 0; i < len; i++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
 80013f2:	e047      	b.n	8001484 <generateSine+0xac>
		*(uint16_t*) (array + i) = amplitude + amplitude * sin(2 * M_PI * i / len);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f838 	bl	800046c <__aeabi_i2d>
 80013fc:	4604      	mov	r4, r0
 80013fe:	460d      	mov	r5, r1
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f832 	bl	800046c <__aeabi_i2d>
 8001408:	4680      	mov	r8, r0
 800140a:	4689      	mov	r9, r1
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f82c 	bl	800046c <__aeabi_i2d>
 8001414:	a320      	add	r3, pc, #128	; (adr r3, 8001498 <generateSine+0xc0>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f891 	bl	8000540 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4692      	mov	sl, r2
 8001424:	469b      	mov	fp, r3
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f7ff f810 	bl	800044c <__aeabi_ui2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4650      	mov	r0, sl
 8001432:	4659      	mov	r1, fp
 8001434:	f7ff f9ae 	bl	8000794 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	ec43 2b17 	vmov	d7, r2, r3
 8001440:	eeb0 0a47 	vmov.f32	s0, s14
 8001444:	eef0 0a67 	vmov.f32	s1, s15
 8001448:	f00a f94a 	bl	800b6e0 <sin>
 800144c:	ec53 2b10 	vmov	r2, r3, d0
 8001450:	4640      	mov	r0, r8
 8001452:	4649      	mov	r1, r9
 8001454:	f7ff f874 	bl	8000540 <__aeabi_dmul>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4620      	mov	r0, r4
 800145e:	4629      	mov	r1, r5
 8001460:	f7fe feb8 	bl	80001d4 <__adddf3>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	18d4      	adds	r4, r2, r3
 8001474:	f7ff fb26 	bl	8000ac4 <__aeabi_d2uiz>
 8001478:	4603      	mov	r3, r0
 800147a:	b29b      	uxth	r3, r3
 800147c:	8023      	strh	r3, [r4, #0]
	for (uint8_t i = 0; i < len; i++) {
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	3301      	adds	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8b3      	bhi.n	80013f4 <generateSine+0x1c>
	}

}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001498:	54442d18 	.word	0x54442d18
 800149c:	401921fb 	.word	0x401921fb

080014a0 <ledsToggle>:

void ledsToggle() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led0_GPIO_Port, led0_Pin);
 80014a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <ledsToggle+0x1c>)
 80014aa:	f002 fa0b 	bl	80038c4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <ledsToggle+0x1c>)
 80014b4:	f002 fa06 	bl	80038c4 <HAL_GPIO_TogglePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	48001000 	.word	0x48001000

080014c0 <delay>:

void delay(uint16_t time) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <delay+0x30>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 80014d2:	bf00      	nop
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <delay+0x30>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3f9      	bcc.n	80014d4 <delay+0x14>
		;
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200004c4 	.word	0x200004c4

080014f4 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f002 f824 	bl	8003570 <HAL_GPIO_Init>
}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f002 f806 	bl	8003570 <HAL_GPIO_Init>
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <DS18B20_Start>:

uint8_t DS18B20_Start(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set the pin as output
 8001576:	2101      	movs	r1, #1
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <DS18B20_Start+0x5c>)
 800157a:	f7ff ffbb 	bl	80014f4 <Set_Pin_Output>
	HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin low
 800157e:	2200      	movs	r2, #0
 8001580:	2101      	movs	r1, #1
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <DS18B20_Start+0x5c>)
 8001584:	f002 f986 	bl	8003894 <HAL_GPIO_WritePin>
	delay(480);   // delay according to datasheet
 8001588:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800158c:	f7ff ff98 	bl	80014c0 <delay>

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);    // set the pin as input
 8001590:	2101      	movs	r1, #1
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <DS18B20_Start+0x5c>)
 8001594:	f7ff ffcc 	bl	8001530 <Set_Pin_Input>
	delay(80);    // delay according to datasheet
 8001598:	2050      	movs	r0, #80	; 0x50
 800159a:	f7ff ff91 	bl	80014c0 <delay>

	if (!(HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin)))
 800159e:	2101      	movs	r1, #1
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <DS18B20_Start+0x5c>)
 80015a2:	f002 f95f 	bl	8003864 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <DS18B20_Start+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80015ac:	2301      	movs	r3, #1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	e001      	b.n	80015b6 <DS18B20_Start+0x4a>
	else
		Response = -1;
 80015b2:	23ff      	movs	r3, #255	; 0xff
 80015b4:	71fb      	strb	r3, [r7, #7]

	delay(400); // 480 us delay totally.
 80015b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015ba:	f7ff ff81 	bl	80014c0 <delay>

	return Response;
 80015be:	79fb      	ldrb	r3, [r7, #7]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	48000400 	.word	0x48000400

080015cc <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 80015d6:	2101      	movs	r1, #1
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <DS18B20_Write+0x88>)
 80015da:	f7ff ff8b 	bl	80014f4 <Set_Pin_Output>
//	delay(1);

	for (int i = 0; i < 8; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e02e      	b.n	8001642 <DS18B20_Write+0x76>

		if ((data & (1 << i)) != 0)  // if the bit is high
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	fa42 f303 	asr.w	r3, r2, r3
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <DS18B20_Write+0x50>
				{
			// write 1

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);  // set as output
 80015f4:	2101      	movs	r1, #1
 80015f6:	4817      	ldr	r0, [pc, #92]	; (8001654 <DS18B20_Write+0x88>)
 80015f8:	f7ff ff7c 	bl	80014f4 <Set_Pin_Output>
			HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <DS18B20_Write+0x88>)
 8001602:	f002 f947 	bl	8003894 <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff ff5a 	bl	80014c0 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 800160c:	2101      	movs	r1, #1
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <DS18B20_Write+0x88>)
 8001610:	f7ff ff8e 	bl	8001530 <Set_Pin_Input>
//			HAL_GPIO_WritePin (temp_GPIO_Port, temp_Pin, 1);
			delay(60);  // wait for 60 us
 8001614:	203c      	movs	r0, #60	; 0x3c
 8001616:	f7ff ff53 	bl	80014c0 <delay>
 800161a:	e00f      	b.n	800163c <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(temp_GPIO_Port, temp_Pin);
 800161c:	2101      	movs	r1, #1
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <DS18B20_Write+0x88>)
 8001620:	f7ff ff68 	bl	80014f4 <Set_Pin_Output>
			HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the pin LOW
 8001624:	2200      	movs	r2, #0
 8001626:	2101      	movs	r1, #1
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <DS18B20_Write+0x88>)
 800162a:	f002 f933 	bl	8003894 <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 800162e:	203c      	movs	r0, #60	; 0x3c
 8001630:	f7ff ff46 	bl	80014c0 <delay>

			Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 8001634:	2101      	movs	r1, #1
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <DS18B20_Write+0x88>)
 8001638:	f7ff ff7a 	bl	8001530 <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b07      	cmp	r3, #7
 8001646:	ddcd      	ble.n	80015e4 <DS18B20_Write+0x18>
		}
	}
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	48000400 	.word	0x48000400

08001658 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
	uint8_t nuskaityta = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(temp_GPIO_Port, temp_Pin);
 8001666:	2101      	movs	r1, #1
 8001668:	481b      	ldr	r0, [pc, #108]	; (80016d8 <DS18B20_Read+0x80>)
 800166a:	f7ff ff61 	bl	8001530 <Set_Pin_Input>

	for (int i = 0; i < 8; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	e028      	b.n	80016c6 <DS18B20_Read+0x6e>
		Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 8001674:	2101      	movs	r1, #1
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <DS18B20_Read+0x80>)
 8001678:	f7ff ff3c 	bl	80014f4 <Set_Pin_Output>
		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 800167c:	2200      	movs	r2, #0
 800167e:	2101      	movs	r1, #1
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <DS18B20_Read+0x80>)
 8001682:	f002 f907 	bl	8003894 <HAL_GPIO_WritePin>
		delay(2);  // wait for > 1us
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff ff1a 	bl	80014c0 <delay>

		Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 800168c:	2101      	movs	r1, #1
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <DS18B20_Read+0x80>)
 8001690:	f7ff ff4e 	bl	8001530 <Set_Pin_Input>
		delay(8);
 8001694:	2008      	movs	r0, #8
 8001696:	f7ff ff13 	bl	80014c0 <delay>

		nuskaityta = HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin);
 800169a:	2101      	movs	r1, #1
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <DS18B20_Read+0x80>)
 800169e:	f002 f8e1 	bl	8003864 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]

		value |= nuskaityta << i;  // read = 1
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]

		delay(60);  // wait for 60 us
 80016ba:	203c      	movs	r0, #60	; 0x3c
 80016bc:	f7ff ff00 	bl	80014c0 <delay>
	for (int i = 0; i < 8; i++) {
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b07      	cmp	r3, #7
 80016ca:	ddd3      	ble.n	8001674 <DS18B20_Read+0x1c>
	}
	return value;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	48000400 	.word	0x48000400

080016dc <measTemp>:

void measTemp() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

	uint8_t Temp_byte1, Temp_byte2;

	Presence = DS18B20_Start();
 80016e2:	f7ff ff43 	bl	800156c <DS18B20_Start>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <measTemp+0xc8>)
 80016ec:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 faf4 	bl	8001cdc <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 80016f4:	20cc      	movs	r0, #204	; 0xcc
 80016f6:	f7ff ff69 	bl	80015cc <DS18B20_Write>
	DS18B20_Write(0x44);  // convert t
 80016fa:	2044      	movs	r0, #68	; 0x44
 80016fc:	f7ff ff66 	bl	80015cc <DS18B20_Write>

	do {
		HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f000 faeb 	bl	8001cdc <HAL_Delay>
		Set_Pin_Output(temp_GPIO_Port, temp_Pin);   // set as output
 8001706:	2101      	movs	r1, #1
 8001708:	4827      	ldr	r0, [pc, #156]	; (80017a8 <measTemp+0xcc>)
 800170a:	f7ff fef3 	bl	80014f4 <Set_Pin_Output>

		HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, 0);  // pull the data pin LOW
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	4825      	ldr	r0, [pc, #148]	; (80017a8 <measTemp+0xcc>)
 8001714:	f002 f8be 	bl	8003894 <HAL_GPIO_WritePin>
		delay(2);  // wait for > 1us
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff fed1 	bl	80014c0 <delay>

		Set_Pin_Input(temp_GPIO_Port, temp_Pin);  // set as input
 800171e:	2101      	movs	r1, #1
 8001720:	4821      	ldr	r0, [pc, #132]	; (80017a8 <measTemp+0xcc>)
 8001722:	f7ff ff05 	bl	8001530 <Set_Pin_Input>
		delay(10);
 8001726:	200a      	movs	r0, #10
 8001728:	f7ff feca 	bl	80014c0 <delay>
	} while (!HAL_GPIO_ReadPin(temp_GPIO_Port, temp_Pin));
 800172c:	2101      	movs	r1, #1
 800172e:	481e      	ldr	r0, [pc, #120]	; (80017a8 <measTemp+0xcc>)
 8001730:	f002 f898 	bl	8003864 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0e2      	beq.n	8001700 <measTemp+0x24>

	Presence = DS18B20_Start();
 800173a:	f7ff ff17 	bl	800156c <DS18B20_Start>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <measTemp+0xc8>)
 8001744:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fac8 	bl	8001cdc <HAL_Delay>
	DS18B20_Write(0xCC);  // skip ROM
 800174c:	20cc      	movs	r0, #204	; 0xcc
 800174e:	f7ff ff3d 	bl	80015cc <DS18B20_Write>
	DS18B20_Write(0xBE);  // Read Scratch-pad
 8001752:	20be      	movs	r0, #190	; 0xbe
 8001754:	f7ff ff3a 	bl	80015cc <DS18B20_Write>
	HAL_Delay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f000 fabf 	bl	8001cdc <HAL_Delay>

	Temp_byte1 = DS18B20_Read();
 800175e:	f7ff ff7b 	bl	8001658 <DS18B20_Read>
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	Temp_byte2 = DS18B20_Read();
 8001766:	f7ff ff77 	bl	8001658 <DS18B20_Read>
 800176a:	4603      	mov	r3, r0
 800176c:	71bb      	strb	r3, [r7, #6]
	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <measTemp+0xd0>)
 800177e:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <measTemp+0xd0>)
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <measTemp+0xd4>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000019c 	.word	0x2000019c
 80017a8:	48000400 	.word	0x48000400
 80017ac:	200004a4 	.word	0x200004a4
 80017b0:	20000198 	.word	0x20000198

080017b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_ADC_MspInit+0x124>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d17c      	bne.n	8001928 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6153      	str	r3, [r2, #20]
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_ADC_MspInit+0x128>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <HAL_ADC_MspInit+0x128>)
 800184c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800185e:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a34      	ldr	r2, [pc, #208]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_ADC_MspInit+0x128>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_ADC_MspInit+0x128>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <HAL_ADC_MspInit+0x128>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    PC5     ------> ADC2_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800188e:	233f      	movs	r3, #63	; 0x3f
 8001890:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	4825      	ldr	r0, [pc, #148]	; (8001938 <HAL_ADC_MspInit+0x12c>)
 80018a2:	f001 fe65 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a6:	2304      	movs	r3, #4
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4820      	ldr	r0, [pc, #128]	; (800193c <HAL_ADC_MspInit+0x130>)
 80018ba:	f001 fe59 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23e0      	movs	r3, #224	; 0xe0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f001 fe4c 	bl	8003570 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_ADC_MspInit+0x138>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_ADC_MspInit+0x134>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_ADC_MspInit+0x134>)
 8001902:	2220      	movs	r2, #32
 8001904:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_ADC_MspInit+0x134>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <HAL_ADC_MspInit+0x134>)
 800190e:	f001 fc7c 	bl	800320a <HAL_DMA_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001918:	f7ff ff4c 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_ADC_MspInit+0x134>)
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_ADC_MspInit+0x134>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	50000100 	.word	0x50000100
 8001934:	40021000 	.word	0x40021000
 8001938:	48000800 	.word	0x48000800
 800193c:	48001400 	.word	0x48001400
 8001940:	20000510 	.word	0x20000510
 8001944:	40020408 	.word	0x40020408

08001948 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <HAL_DAC_MspInit+0xe4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d15b      	bne.n	8001a22 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 8001970:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_DAC_MspInit+0xe8>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800199a:	2310      	movs	r3, #16
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199e:	2303      	movs	r3, #3
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f001 fdde 	bl	8003570 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_DAC_MspInit+0xf0>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019bc:	2210      	movs	r2, #16
 80019be:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019da:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019de:	2220      	movs	r2, #32
 80019e0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 80019ec:	f001 fc0d 	bl	800320a <HAL_DMA_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80019f6:	f7ff fedd 	bl	80017b4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_DAC_MspInit+0xf4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_DAC_MspInit+0xf4>)
 8001a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a04:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_DAC_MspInit+0xec>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2036      	movs	r0, #54	; 0x36
 8001a18:	f001 f97f 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a1c:	2036      	movs	r0, #54	; 0x36
 8001a1e:	f001 f998 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40007400 	.word	0x40007400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	20000460 	.word	0x20000460
 8001a38:	40020030 	.word	0x40020030
 8001a3c:	40010000 	.word	0x40010000

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_TIM_Base_MspInit+0x8c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10c      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a6a:	e02a      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_TIM_Base_MspInit+0x94>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d114      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2036      	movs	r0, #54	; 0x36
 8001a94:	f001 f941 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a98:	2036      	movs	r0, #54	; 0x36
 8001a9a:	f001 f95a 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8001a9e:	e010      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_TIM_Base_MspInit+0x98>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001ab0:	f043 0320 	orr.w	r3, r3, #32
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_TIM_Base_MspInit+0x90>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40001000 	.word	0x40001000
 8001ad8:	40001400 	.word	0x40001400

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8b4 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA1_Channel3_IRQHandler+0x10>)
 8001b3e:	f001 fc0a 	bl	8003356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000460 	.word	0x20000460

08001b4c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001b52:	f001 ffd5 	bl	8003b00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20001250 	.word	0x20001250

08001b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <TIM6_DAC_IRQHandler+0x14>)
 8001b66:	f004 fd86 	bl	8006676 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <TIM6_DAC_IRQHandler+0x18>)
 8001b6c:	f001 fa12 	bl	8002f94 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200004c4 	.word	0x200004c4
 8001b78:	200004a8 	.word	0x200004a8

08001b7c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Channel1_IRQHandler+0x10>)
 8001b82:	f001 fbe8 	bl	8003356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000510 	.word	0x20000510

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <SystemInit+0x28>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <SystemInit+0x28>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SystemInit+0x28>)
 8001ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001baa:	609a      	str	r2, [r3, #8]
#endif
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
	ldr	r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <LoopForever+0x16>)
	cmp	r2, r3
 8001be2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffd3 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f009 fd4d 	bl	800b688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7fe ffb7 	bl	8000b60 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001bf8:	0800c9b8 	.word	0x0800c9b8
	ldr	r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c00:	2000017c 	.word	0x2000017c
	ldr	r2, =_sbss
 8001c04:	2000017c 	.word	0x2000017c
	ldr	r3, = _ebss
 8001c08:	2000153c 	.word	0x2000153c

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 f86f 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fdca 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f887 	bl	8002d6e <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f001 f84f 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	200005b8 	.word	0x200005b8

08001cc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200005b8 	.word	0x200005b8

08001cdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09a      	sub	sp, #104	; 0x68
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e1c9      	b.n	8002100 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d176      	bne.n	8001e6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d152      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fd33 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d13b      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fe75 	bl	8002aa4 <ADC_Disable>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12f      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
 8001dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12b      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ddc:	f023 0302 	bic.w	r3, r3, #2
 8001de0:	f043 0202 	orr.w	r2, r3, #2
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e08:	4b86      	ldr	r3, [pc, #536]	; (8002024 <HAL_ADC_Init+0x2d8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_ADC_Init+0x2dc>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9a      	lsrs	r2, r3, #18
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e48:	d110      	bne.n	8001e6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f023 0312 	bic.w	r3, r3, #18
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f040 8136 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
 8001e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8131 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8129 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_Init+0x16c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5e      	ldr	r2, [pc, #376]	; (800202c <HAL_ADC_Init+0x2e0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_Init+0x170>
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_ADC_Init+0x2e4>)
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0x172>
 8001ebc:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_ADC_Init+0x2e8>)
 8001ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec8:	d102      	bne.n	8001ed0 <HAL_ADC_Init+0x184>
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_ADC_Init+0x2e0>)
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e01a      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_ADC_Init+0x2e0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d103      	bne.n	8001ee2 <HAL_ADC_Init+0x196>
 8001eda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e011      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_ADC_Init+0x2ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d102      	bne.n	8001ef2 <HAL_ADC_Init+0x1a6>
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_ADC_Init+0x2f0>)
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e009      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_ADC_Init+0x2f0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <HAL_ADC_Init+0x1b6>
 8001efc:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <HAL_ADC_Init+0x2ec>)
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e001      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <HAL_ADC_Init+0x1da>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x1da>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x1dc>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11c      	bne.n	8001f66 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_ADC_Init+0x202>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x202>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f64:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e5b      	ldrb	r3, [r3, #25]
 8001f6a:	035b      	lsls	r3, r3, #13
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	d002      	beq.n	8001f7a <HAL_ADC_Init+0x22e>
 8001f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_Init+0x230>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d11b      	bne.n	8001fd2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7e5b      	ldrb	r3, [r3, #25]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	045a      	lsls	r2, r3, #17
 8001faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb4:	e00d      	b.n	8001fd2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d03a      	beq.n	8002050 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_ADC_Init+0x2ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_ADC_Init+0x2a2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_ADC_Init+0x2f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_ADC_Init+0x2f4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ff6:	d012      	beq.n	800201e <HAL_ADC_Init+0x2d2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002000:	d00a      	beq.n	8002018 <HAL_ADC_Init+0x2cc>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800200a:	d002      	beq.n	8002012 <HAL_ADC_Init+0x2c6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	e018      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	e015      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002018:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800201c:	e012      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 800201e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002022:	e00f      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83
 800202c:	50000100 	.word	0x50000100
 8002030:	50000300 	.word	0x50000300
 8002034:	50000700 	.word	0x50000700
 8002038:	50000400 	.word	0x50000400
 800203c:	50000500 	.word	0x50000500
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002048:	4313      	orrs	r3, r2
 800204a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800204c:	4313      	orrs	r3, r2
 800204e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d114      	bne.n	8002088 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e1b      	ldrb	r3, [r3, #24]
 8002076:	039a      	lsls	r2, r3, #14
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4313      	orrs	r3, r2
 8002082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002084:	4313      	orrs	r3, r2
 8002086:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_ADC_Init+0x3bc>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10c      	bne.n	80020be <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f023 010f 	bic.w	r1, r3, #15
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	e007      	b.n	80020ce <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020f 	bic.w	r2, r2, #15
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f023 0303 	bic.w	r3, r3, #3
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
 80020e4:	e00a      	b.n	80020fc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f023 0312 	bic.w	r3, r3, #18
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002100:	4618      	mov	r0, r3
 8002102:	3768      	adds	r7, #104	; 0x68
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fff0c007 	.word	0xfff0c007

0800210c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80f7 	bne.w	800231a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Start_DMA+0x2e>
 8002136:	2302      	movs	r3, #2
 8002138:	e0f2      	b.n	8002320 <HAL_ADC_Start_DMA+0x214>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800214a:	d004      	beq.n	8002156 <HAL_ADC_Start_DMA+0x4a>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_ADC_Start_DMA+0x21c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d109      	bne.n	800216a <HAL_ADC_Start_DMA+0x5e>
 8002156:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_ADC_Start_DMA+0x220>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e008      	b.n	800217c <HAL_ADC_Start_DMA+0x70>
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_ADC_Start_DMA+0x224>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80c5 	beq.w	800230c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fc30 	bl	80029e8 <ADC_Enable>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 80b7 	bne.w	8002302 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b0:	d004      	beq.n	80021bc <HAL_ADC_Start_DMA+0xb0>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <HAL_ADC_Start_DMA+0x21c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <HAL_ADC_Start_DMA+0xbe>
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_ADC_Start_DMA+0x220>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_ADC_Start_DMA+0xde>
 80021c8:	e005      	b.n	80021d6 <HAL_ADC_Start_DMA+0xca>
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_ADC_Start_DMA+0x224>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_ADC_Start_DMA+0xde>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021de:	d004      	beq.n	80021ea <HAL_ADC_Start_DMA+0xde>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_ADC_Start_DMA+0x228>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d115      	bne.n	8002216 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d036      	beq.n	8002272 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800220c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002214:	e02d      	b.n	8002272 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222a:	d004      	beq.n	8002236 <HAL_ADC_Start_DMA+0x12a>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3d      	ldr	r2, [pc, #244]	; (8002328 <HAL_ADC_Start_DMA+0x21c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10a      	bne.n	800224c <HAL_ADC_Start_DMA+0x140>
 8002236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e008      	b.n	800225e <HAL_ADC_Start_DMA+0x152>
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_ADC_Start_DMA+0x228>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d106      	bne.n	800228e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	f023 0206 	bic.w	r2, r3, #6
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
 800228c:	e002      	b.n	8002294 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <HAL_ADC_Start_DMA+0x22c>)
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_ADC_Start_DMA+0x230>)
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_ADC_Start_DMA+0x234>)
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	221c      	movs	r2, #28
 80022ba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0210 	orr.w	r2, r2, #16
 80022ca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	4619      	mov	r1, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f000 ffd4 	bl	8003298 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0204 	orr.w	r2, r2, #4
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e00d      	b.n	800231e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800230a:	e008      	b.n	800231e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002318:	e001      	b.n	800231e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800231a:	2302      	movs	r3, #2
 800231c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	50000100 	.word	0x50000100
 800232c:	50000300 	.word	0x50000300
 8002330:	50000700 	.word	0x50000700
 8002334:	50000400 	.word	0x50000400
 8002338:	0800291d 	.word	0x0800291d
 800233c:	08002997 	.word	0x08002997
 8002340:	080029b3 	.word	0x080029b3

08002344 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b09b      	sub	sp, #108	; 0x6c
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x22>
 8002362:	2302      	movs	r3, #2
 8002364:	e2cb      	b.n	80028fe <HAL_ADC_ConfigChannel+0x5ba>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 82af 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b04      	cmp	r3, #4
 8002384:	d81c      	bhi.n	80023c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	461a      	mov	r2, r3
 800239a:	231f      	movs	r3, #31
 800239c:	4093      	lsls	r3, r2
 800239e:	43db      	mvns	r3, r3
 80023a0:	4019      	ands	r1, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa00 f203 	lsl.w	r2, r0, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
 80023be:	e063      	b.n	8002488 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d81e      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3b1e      	subs	r3, #30
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
 8002404:	e040      	b.n	8002488 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b0e      	cmp	r3, #14
 800240c:	d81e      	bhi.n	800244c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3b3c      	subs	r3, #60	; 0x3c
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	4019      	ands	r1, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	3b3c      	subs	r3, #60	; 0x3c
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
 800244a:	e01d      	b.n	8002488 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	3b5a      	subs	r3, #90	; 0x5a
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	4019      	ands	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	3b5a      	subs	r3, #90	; 0x5a
 800247c:	fa00 f203 	lsl.w	r2, r0, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80e5 	bne.w	8002662 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b09      	cmp	r3, #9
 800249e:	d91c      	bls.n	80024da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6999      	ldr	r1, [r3, #24]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	3b1e      	subs	r3, #30
 80024b2:	2207      	movs	r2, #7
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6898      	ldr	r0, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	3b1e      	subs	r3, #30
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e019      	b.n	800250e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6959      	ldr	r1, [r3, #20]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	2207      	movs	r2, #7
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4019      	ands	r1, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6898      	ldr	r0, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	3b01      	subs	r3, #1
 800252c:	2b03      	cmp	r3, #3
 800252e:	d84f      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0x28c>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_ADC_ConfigChannel+0x1f4>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800256b 	.word	0x0800256b
 8002540:	0800258d 	.word	0x0800258d
 8002544:	080025af 	.word	0x080025af
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800254e:	4b9f      	ldr	r3, [pc, #636]	; (80027cc <HAL_ADC_ConfigChannel+0x488>)
 8002550:	4013      	ands	r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	0691      	lsls	r1, r2, #26
 8002558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800255a:	430a      	orrs	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002566:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002568:	e07e      	b.n	8002668 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002570:	4b96      	ldr	r3, [pc, #600]	; (80027cc <HAL_ADC_ConfigChannel+0x488>)
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	0691      	lsls	r1, r2, #26
 800257a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800257c:	430a      	orrs	r2, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002588:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800258a:	e06d      	b.n	8002668 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002592:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_ADC_ConfigChannel+0x488>)
 8002594:	4013      	ands	r3, r2
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	0691      	lsls	r1, r2, #26
 800259c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800259e:	430a      	orrs	r2, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025aa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025ac:	e05c      	b.n	8002668 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025b4:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_ADC_ConfigChannel+0x488>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	0691      	lsls	r1, r2, #26
 80025be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025c0:	430a      	orrs	r2, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025cc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025ce:	e04b      	b.n	8002668 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002616:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800261e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	069b      	lsls	r3, r3, #26
 8002628:	429a      	cmp	r2, r3
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800263a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	429a      	cmp	r2, r3
 800264e:	d10a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800265e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002660:	e001      	b.n	8002666 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002666:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x344>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x344>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_ADC_ConfigChannel+0x346>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8131 	bne.w	80028f2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00f      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80026b6:	e049      	b.n	800274c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b09      	cmp	r3, #9
 80026d8:	d91c      	bls.n	8002714 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6999      	ldr	r1, [r3, #24]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	3b1b      	subs	r3, #27
 80026ec:	2207      	movs	r2, #7
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4019      	ands	r1, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6898      	ldr	r0, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1b      	subs	r3, #27
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	619a      	str	r2, [r3, #24]
 8002712:	e01b      	b.n	800274c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6959      	ldr	r1, [r3, #20]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	2207      	movs	r2, #7
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	4019      	ands	r1, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6898      	ldr	r0, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	fa00 f203 	lsl.w	r2, r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002754:	d004      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x41c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_ADC_ConfigChannel+0x48c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x420>
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_ADC_ConfigChannel+0x490>)
 8002762:	e000      	b.n	8002766 <HAL_ADC_ConfigChannel+0x422>
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_ADC_ConfigChannel+0x494>)
 8002766:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b10      	cmp	r3, #16
 800276e:	d105      	bne.n	800277c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002780:	2b11      	cmp	r3, #17
 8002782:	d105      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002794:	2b12      	cmp	r3, #18
 8002796:	f040 80ac 	bne.w	80028f2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800279a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 80a5 	bne.w	80028f2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b0:	d102      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x474>
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_ADC_ConfigChannel+0x48c>)
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e023      	b.n	8002800 <HAL_ADC_ConfigChannel+0x4bc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_ADC_ConfigChannel+0x48c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10c      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x498>
 80027c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e01a      	b.n	8002800 <HAL_ADC_ConfigChannel+0x4bc>
 80027ca:	bf00      	nop
 80027cc:	83fff000 	.word	0x83fff000
 80027d0:	50000100 	.word	0x50000100
 80027d4:	50000300 	.word	0x50000300
 80027d8:	50000700 	.word	0x50000700
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4a      	ldr	r2, [pc, #296]	; (800290c <HAL_ADC_ConfigChannel+0x5c8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x4a8>
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_ADC_ConfigChannel+0x5cc>)
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e009      	b.n	8002800 <HAL_ADC_ConfigChannel+0x4bc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_ADC_ConfigChannel+0x5cc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x4b8>
 80027f6:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_ADC_ConfigChannel+0x5c8>)
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e001      	b.n	8002800 <HAL_ADC_ConfigChannel+0x4bc>
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x4dc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x4dc>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_ADC_ConfigChannel+0x4de>
 8002820:	2300      	movs	r3, #0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d150      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002826:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x504>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x504>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_ADC_ConfigChannel+0x506>
 8002848:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13c      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b10      	cmp	r3, #16
 8002854:	d11d      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x54e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285e:	d118      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_ADC_ConfigChannel+0x5d0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a29      	ldr	r2, [pc, #164]	; (8002918 <HAL_ADC_ConfigChannel+0x5d4>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9a      	lsrs	r2, r3, #18
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002882:	e002      	b.n	800288a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3b01      	subs	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002890:	e02e      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b11      	cmp	r3, #17
 8002898:	d10b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x56e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a2:	d106      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80028a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028b0:	e01e      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d11a      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028c6:	e013      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028da:	e00a      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028ee:	e000      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028fe:	4618      	mov	r0, r3
 8002900:	376c      	adds	r7, #108	; 0x6c
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	50000400 	.word	0x50000400
 8002910:	50000500 	.word	0x50000500
 8002914:	20000000 	.word	0x20000000
 8002918:	431bde83 	.word	0x431bde83

0800291c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d126      	bne.n	8002984 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7fe f8c1 	bl	8000b04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002982:	e004      	b.n	800298e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff f9bd 	bl	8001d24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f043 0204 	orr.w	r2, r3, #4
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff f9ad 	bl	8001d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <ADC_Enable+0x2c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <ADC_Enable+0x2c>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <ADC_Enable+0x2e>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d13c      	bne.n	8002a94 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <ADC_Enable+0xb8>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e028      	b.n	8002a96 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a54:	f7ff f936 	bl	8001cc4 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a5a:	e014      	b.n	8002a86 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a5c:	f7ff f932 	bl	8001cc4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d90d      	bls.n	8002a86 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d1e3      	bne.n	8002a5c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	8000003f 	.word	0x8000003f

08002aa4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <ADC_Disable+0x2c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <ADC_Disable+0x2c>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <ADC_Disable+0x2e>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d040      	beq.n	8002b58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030d 	and.w	r3, r3, #13
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0202 	orr.w	r2, r2, #2
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2203      	movs	r2, #3
 8002afa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002afc:	f7ff f8e2 	bl	8001cc4 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b02:	e022      	b.n	8002b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01c      	b.n	8002b5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b20:	f7ff f8d0 	bl	8001cc4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d90d      	bls.n	8002b4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d0e3      	beq.n	8002b20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff3e 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff8e 	bl	8002c58 <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff31 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e014      	b.n	8002dc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fdcd 	bl	8001948 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	795b      	ldrb	r3, [r3, #5]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_DAC_Start_DMA+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e09b      	b.n	8002f72 <HAL_DAC_Start_DMA+0x156>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2202      	movs	r2, #2
 8002e44:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d12f      	bne.n	8002eac <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a4a      	ldr	r2, [pc, #296]	; (8002f7c <HAL_DAC_Start_DMA+0x160>)
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_DAC_Start_DMA+0x164>)
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <HAL_DAC_Start_DMA+0x168>)
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e72:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d013      	beq.n	8002ea2 <HAL_DAC_Start_DMA+0x86>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d845      	bhi.n	8002f0c <HAL_DAC_Start_DMA+0xf0>
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_DAC_Start_DMA+0x72>
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d005      	beq.n	8002e98 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e8c:	e03e      	b.n	8002f0c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3308      	adds	r3, #8
 8002e94:	617b      	str	r3, [r7, #20]
        break;
 8002e96:	e03c      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	617b      	str	r3, [r7, #20]
        break;
 8002ea0:	e037      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	617b      	str	r3, [r7, #20]
        break;
 8002eaa:	e032      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <HAL_DAC_Start_DMA+0x16c>)
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_DAC_Start_DMA+0x170>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <HAL_DAC_Start_DMA+0x174>)
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d013      	beq.n	8002f02 <HAL_DAC_Start_DMA+0xe6>
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d817      	bhi.n	8002f10 <HAL_DAC_Start_DMA+0xf4>
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_DAC_Start_DMA+0xd2>
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d005      	beq.n	8002ef8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002eec:	e010      	b.n	8002f10 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	617b      	str	r3, [r7, #20]
        break;
 8002ef6:	e00c      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3318      	adds	r3, #24
 8002efe:	617b      	str	r3, [r7, #20]
        break;
 8002f00:	e007      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	331c      	adds	r3, #28
 8002f08:	617b      	str	r3, [r7, #20]
        break;
 8002f0a:	e002      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f10:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6898      	ldr	r0, [r3, #8]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	f000 f9b1 	bl	8003298 <HAL_DMA_Start_IT>
 8002f36:	e00e      	b.n	8002f56 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68d8      	ldr	r0, [r3, #12]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	f000 f9a1 	bl	8003298 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08003133 	.word	0x08003133
 8002f80:	08003155 	.word	0x08003155
 8002f84:	08003171 	.word	0x08003171
 8002f88:	0800319f 	.word	0x0800319f
 8002f8c:	080031c1 	.word	0x080031c1
 8002f90:	080031dd 	.word	0x080031dd

08002f94 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	d120      	bne.n	8002fee <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fba:	d118      	bne.n	8002fee <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fe6:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff0c 	bl	8002e06 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d120      	bne.n	8003040 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d118      	bne.n	8003040 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003038:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f86f 	bl	800311e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	795b      	ldrb	r3, [r3, #5]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DAC_ConfigChannel+0x20>
 8003064:	2302      	movs	r3, #2
 8003066:	e036      	b.n	80030d6 <HAL_DAC_ConfigChannel+0x8e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2202      	movs	r2, #2
 8003072:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800307c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	22c0      	movs	r2, #192	; 0xc0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff fe42 	bl	8002dca <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	711a      	strb	r2, [r3, #4]
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fe3b 	bl	8002dde <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff fe31 	bl	8002df2 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	711a      	strb	r2, [r3, #4]
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ff98 	bl	80030e2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	711a      	strb	r2, [r3, #4]
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff ff91 	bl	80030f6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff ff87 	bl	800310a <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	711a      	strb	r2, [r3, #4]
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e037      	b.n	8003290 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003236:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800323a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f940 	bl	80034f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}  
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_DMA_Start_IT+0x20>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e04a      	b.n	800334e <HAL_DMA_Start_IT+0xb6>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d13a      	bne.n	8003340 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8d4 	bl	800349c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 020e 	orr.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e00f      	b.n	800332e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 020a 	orr.w	r2, r2, #10
 800331c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0204 	bic.w	r2, r2, #4
 800332c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e005      	b.n	800334c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003348:	2302      	movs	r3, #2
 800334a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800334c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x72>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0204 	bic.w	r2, r2, #4
 80033a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	2104      	movs	r1, #4
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06a      	beq.n	8003494 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80033c6:	e065      	b.n	8003494 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2202      	movs	r2, #2
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_IRQHandler+0xdc>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020a 	bic.w	r2, r2, #10
 80033fe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2102      	movs	r1, #2
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d035      	beq.n	8003494 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003430:	e030      	b.n	8003494 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2208      	movs	r2, #8
 8003438:	409a      	lsls	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d028      	beq.n	8003494 <HAL_DMA_IRQHandler+0x13e>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020e 	bic.w	r2, r2, #14
 800345a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
    }
  }
}  
 8003492:	e7ff      	b.n	8003494 <HAL_DMA_IRQHandler+0x13e>
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d108      	bne.n	80034dc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034da:	e007      	b.n	80034ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <DMA_CalcBaseAndBitshift+0x60>)
 8003508:	429a      	cmp	r2, r3
 800350a:	d80f      	bhi.n	800352c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <DMA_CalcBaseAndBitshift+0x64>)
 8003514:	4413      	add	r3, r2
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <DMA_CalcBaseAndBitshift+0x68>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <DMA_CalcBaseAndBitshift+0x6c>)
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800352a:	e00e      	b.n	800354a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <DMA_CalcBaseAndBitshift+0x70>)
 8003534:	4413      	add	r3, r2
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <DMA_CalcBaseAndBitshift+0x68>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	009a      	lsls	r2, r3, #2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <DMA_CalcBaseAndBitshift+0x74>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40020407 	.word	0x40020407
 800355c:	bffdfff8 	.word	0xbffdfff8
 8003560:	cccccccd 	.word	0xcccccccd
 8003564:	40020000 	.word	0x40020000
 8003568:	bffdfbf8 	.word	0xbffdfbf8
 800356c:	40020400 	.word	0x40020400

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	e154      	b.n	800382a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8146 	beq.w	8003824 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d00b      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d007      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ac:	2b11      	cmp	r3, #17
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b12      	cmp	r3, #18
 80035b6:	d130      	bne.n	800361a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ee:	2201      	movs	r2, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0201 	and.w	r2, r3, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0xea>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b12      	cmp	r3, #18
 8003658:	d123      	bne.n	80036a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	6939      	ldr	r1, [r7, #16]
 800369e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a0 	beq.w	8003824 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_GPIO_Init+0x2d8>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <HAL_GPIO_Init+0x2d8>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6193      	str	r3, [r2, #24]
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_GPIO_Init+0x2d8>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036fc:	4a53      	ldr	r2, [pc, #332]	; (800384c <HAL_GPIO_Init+0x2dc>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003726:	d019      	beq.n	800375c <HAL_GPIO_Init+0x1ec>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a49      	ldr	r2, [pc, #292]	; (8003850 <HAL_GPIO_Init+0x2e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_GPIO_Init+0x1e8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a48      	ldr	r2, [pc, #288]	; (8003854 <HAL_GPIO_Init+0x2e4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00d      	beq.n	8003754 <HAL_GPIO_Init+0x1e4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <HAL_GPIO_Init+0x2e8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <HAL_GPIO_Init+0x1e0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a46      	ldr	r2, [pc, #280]	; (800385c <HAL_GPIO_Init+0x2ec>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_GPIO_Init+0x1dc>
 8003748:	2304      	movs	r3, #4
 800374a:	e008      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 800374c:	2305      	movs	r3, #5
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003750:	2303      	movs	r3, #3
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 800375c:	2300      	movs	r3, #0
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800376e:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_GPIO_Init+0x2dc>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037a0:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ca:	4a25      	ldr	r2, [pc, #148]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037f4:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f aea3 	bne.w	8003580 <HAL_GPIO_Init+0x10>
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	40010400 	.word	0x40010400

08003864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43d9      	mvns	r1, r3
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	400b      	ands	r3, r1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	619a      	str	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	b08b      	sub	sp, #44	; 0x2c
 80038fc:	af06      	add	r7, sp, #24
 80038fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e0d0      	b.n	8003aac <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f007 fbdc 	bl	800b0dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f003 fde2 	bl	80074fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	e04c      	b.n	80039d6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	3301      	adds	r3, #1
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	440b      	add	r3, r1
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	b298      	uxth	r0, r3
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	3336      	adds	r3, #54	; 0x36
 800397a:	4602      	mov	r2, r0
 800397c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	3303      	adds	r3, #3
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	3338      	adds	r3, #56	; 0x38
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	333c      	adds	r3, #60	; 0x3c
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	3340      	adds	r3, #64	; 0x40
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d3ad      	bcc.n	800393c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	e044      	b.n	8003a70 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3b5      	bcc.n	80039e6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	687e      	ldr	r6, [r7, #4]
 8003a82:	466d      	mov	r5, sp
 8003a84:	f106 0410 	add.w	r4, r6, #16
 8003a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	1d33      	adds	r3, r6, #4
 8003a92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f003 fd4b 	bl	8007530 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ab4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_Start+0x16>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e016      	b.n	8003af8 <HAL_PCD_Start+0x44>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fcf8 	bl	80074cc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003adc:	2101      	movs	r1, #1
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f007 fd9a 	bl	800b618 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f005 fcd1 	bl	8009490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f005 fcca 	bl	80094a6 <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d102      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 faf6 	bl	8004110 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 fcbc 	bl	80094a6 <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d112      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f007 fb63 	bl	800b21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b58:	2100      	movs	r1, #0
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8c7 	bl	8003cee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fc9e 	bl	80094a6 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b74:	d10b      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fc87 	bl	80094a6 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f005 fc70 	bl	80094a6 <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d126      	bne.n	8003c20 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	b292      	uxth	r2, r2
 8003be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0208 	bic.w	r2, r2, #8
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f007 fb44 	bl	800b290 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f005 fc3e 	bl	80094a6 <USB_ReadInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c34:	d126      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0208 	orr.w	r2, r2, #8
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c60:	b292      	uxth	r2, r2
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0204 	orr.w	r2, r2, #4
 8003c78:	b292      	uxth	r2, r2
 8003c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f007 faec 	bl	800b25c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f005 fc0c 	bl	80094a6 <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d10e      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cac:	b292      	uxth	r2, r2
 8003cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f007 faa5 	bl	800b202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f005 fbf2 	bl	80094a6 <USB_ReadInterrupts>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_PCD_SetAddress+0x1a>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e013      	b.n	8003d30 <HAL_PCD_SetAddress+0x42>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fba1 	bl	8009468 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	70fb      	strb	r3, [r7, #3]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	803b      	strh	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da0e      	bge.n	8003d7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	705a      	strb	r2, [r3, #1]
 8003d7a:	e00e      	b.n	8003d9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 0207 	and.w	r2, r3, #7
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003da6:	883a      	ldrh	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	78ba      	ldrb	r2, [r7, #2]
 8003db0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dc4:	78bb      	ldrb	r3, [r7, #2]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d102      	bne.n	8003dd0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_EP_Open+0xa6>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e00e      	b.n	8003dfc <HAL_PCD_EP_Open+0xc4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 fbc1 	bl	8007574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da0e      	bge.n	8003e36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	705a      	strb	r2, [r3, #1]
 8003e34:	e00e      	b.n	8003e54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 0207 	and.w	r2, r3, #7
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_PCD_EP_Close+0x6a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e00e      	b.n	8003e8c <HAL_PCD_EP_Close+0x88>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f003 fee7 	bl	8007c50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
 8003ea6:	f003 0207 	and.w	r2, r3, #7
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 f89a 	bl	800802a <USB_EPStartXfer>
 8003ef6:	e005      	b.n	8003f04 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 f893 	bl	800802a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	f003 0207 	and.w	r2, r3, #7
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f30:	681b      	ldr	r3, [r3, #0]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2201      	movs	r2, #1
 8003f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 f83f 	bl	800802a <USB_EPStartXfer>
 8003fac:	e005      	b.n	8003fba <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6979      	ldr	r1, [r7, #20]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f004 f838 	bl	800802a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d901      	bls.n	8003fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e03e      	b.n	8004060 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da0e      	bge.n	8004008 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	705a      	strb	r2, [r3, #1]
 8004006:	e00c      	b.n	8004022 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	b2da      	uxtb	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_PCD_EP_SetStall+0x7e>
 800403e:	2302      	movs	r3, #2
 8004040:	e00e      	b.n	8004060 <HAL_PCD_EP_SetStall+0x9c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	4618      	mov	r0, r3
 8004052:	f005 f90a 	bl	800926a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	d901      	bls.n	8004086 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e040      	b.n	8004108 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da0e      	bge.n	80040ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	705a      	strb	r2, [r3, #1]
 80040aa:	e00e      	b.n	80040ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_PCD_EP_ClrStall+0x82>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e00e      	b.n	8004108 <HAL_PCD_EP_ClrStall+0xa0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f005 f907 	bl	800930c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004118:	e2df      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004122:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 8158 	bne.w	80043ea <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800413a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d152      	bne.n	80041ea <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	81fb      	strh	r3, [r7, #14]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	89fb      	ldrh	r3, [r7, #14]
 800415c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3328      	adds	r3, #40	; 0x28
 800416c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	3302      	adds	r3, #2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	441a      	add	r2, r3
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041a8:	2100      	movs	r1, #0
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f007 f80f 	bl	800b1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 828e 	beq.w	80046da <PCD_EP_ISR_Handler+0x5ca>
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 8289 	bne.w	80046da <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b292      	uxth	r2, r2
 80041dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041e8:	e277      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	2b00      	cmp	r3, #0
 8004202:	d034      	beq.n	800426e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	3306      	adds	r3, #6
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004242:	b29b      	uxth	r3, r3
 8004244:	f005 f985 	bl	8009552 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29a      	uxth	r2, r3
 8004250:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004254:	4013      	ands	r3, r2
 8004256:	823b      	strh	r3, [r7, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	8a3a      	ldrh	r2, [r7, #16]
 800425e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004262:	b292      	uxth	r2, r2
 8004264:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f006 ff84 	bl	800b174 <HAL_PCD_SetupStageCallback>
 800426c:	e235      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800426e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004272:	2b00      	cmp	r3, #0
 8004274:	f280 8231 	bge.w	80046da <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004284:	4013      	ands	r3, r2
 8004286:	83bb      	strh	r3, [r7, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	8bba      	ldrh	r2, [r7, #28]
 800428e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004292:	b292      	uxth	r2, r2
 8004294:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	3306      	adds	r3, #6
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d019      	beq.n	80042fe <PCD_EP_ISR_Handler+0x1ee>
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d015      	beq.n	80042fe <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6959      	ldr	r1, [r3, #20]
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f005 f935 	bl	8009552 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	441a      	add	r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042f6:	2100      	movs	r1, #0
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f006 ff4d 	bl	800b198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430c:	b29b      	uxth	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d112      	bne.n	800434c <PCD_EP_ISR_Handler+0x23c>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004330:	b29a      	uxth	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004344:	b29a      	uxth	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e02f      	b.n	80043ac <PCD_EP_ISR_Handler+0x29c>
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b3e      	cmp	r3, #62	; 0x3e
 8004352:	d813      	bhi.n	800437c <PCD_EP_ISR_Handler+0x26c>
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <PCD_EP_ISR_Handler+0x25e>
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	3301      	adds	r3, #1
 800436c:	633b      	str	r3, [r7, #48]	; 0x30
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	b29b      	uxth	r3, r3
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	b29a      	uxth	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	801a      	strh	r2, [r3, #0]
 800437a:	e017      	b.n	80043ac <PCD_EP_ISR_Handler+0x29c>
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	633b      	str	r3, [r7, #48]	; 0x30
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <PCD_EP_ISR_Handler+0x286>
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	3b01      	subs	r3, #1
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	b29b      	uxth	r3, r3
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	827b      	strh	r3, [r7, #18]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043c4:	827b      	strh	r3, [r7, #18]
 80043c6:	8a7b      	ldrh	r3, [r7, #18]
 80043c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043cc:	827b      	strh	r3, [r7, #18]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	8a7b      	ldrh	r3, [r7, #18]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
 80043e8:	e177      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004400:	2b00      	cmp	r3, #0
 8004402:	f280 80ea 	bge.w	80045da <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29a      	uxth	r2, r3
 8004418:	f640 738f 	movw	r3, #3983	; 0xf8f
 800441c:	4013      	ands	r3, r2
 800441e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	7b1b      	ldrb	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d122      	bne.n	800449c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	3306      	adds	r3, #6
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8087 	beq.w	8004596 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	6959      	ldr	r1, [r3, #20]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	88da      	ldrh	r2, [r3, #6]
 8004494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004496:	f005 f85c 	bl	8009552 <USB_ReadPMA>
 800449a:	e07c      	b.n	8004596 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	78db      	ldrb	r3, [r3, #3]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d108      	bne.n	80044b6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044a6:	461a      	mov	r2, r3
 80044a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f923 	bl	80046f6 <HAL_PCD_EP_DB_Receive>
 80044b0:	4603      	mov	r3, r0
 80044b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044b4:	e06f      	b.n	8004596 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d021      	beq.n	8004554 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	3302      	adds	r3, #2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004538:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800453a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02a      	beq.n	8004596 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	6959      	ldr	r1, [r3, #20]
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	891a      	ldrh	r2, [r3, #8]
 800454c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800454e:	f005 f800 	bl	8009552 <USB_ReadPMA>
 8004552:	e020      	b.n	8004596 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	3306      	adds	r3, #6
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800457e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	6959      	ldr	r1, [r3, #20]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	895a      	ldrh	r2, [r3, #10]
 8004590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004592:	f004 ffde 	bl	8009552 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800459c:	441a      	add	r2, r3
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045a8:	441a      	add	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <PCD_EP_ISR_Handler+0x4b0>
 80045b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d206      	bcs.n	80045ce <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f006 fde6 	bl	800b198 <HAL_PCD_DataOutStageCallback>
 80045cc:	e005      	b.n	80045da <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f003 fd28 	bl	800802a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80045da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d07a      	beq.n	80046da <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80045e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	843b      	strh	r3, [r7, #32]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	8c3b      	ldrh	r3, [r7, #32]
 8004624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462c:	b29b      	uxth	r3, r3
 800462e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	78db      	ldrb	r3, [r3, #3]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d108      	bne.n	800464a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800463c:	2b02      	cmp	r3, #2
 800463e:	d146      	bne.n	80046ce <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d141      	bne.n	80046ce <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	3302      	adds	r3, #2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004672:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	8bfb      	ldrh	r3, [r7, #30]
 800467a:	429a      	cmp	r2, r3
 800467c:	d906      	bls.n	800468c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	8bfb      	ldrh	r3, [r7, #30]
 8004684:	1ad2      	subs	r2, r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	619a      	str	r2, [r3, #24]
 800468a:	e002      	b.n	8004692 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	2200      	movs	r2, #0
 8004690:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f006 fd94 	bl	800b1ce <HAL_PCD_DataInStageCallback>
 80046a6:	e018      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	8bfb      	ldrh	r3, [r7, #30]
 80046ae:	441a      	add	r2, r3
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	8bfb      	ldrh	r3, [r7, #30]
 80046ba:	441a      	add	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f003 fcaf 	bl	800802a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80046cc:	e005      	b.n	80046da <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046d0:	461a      	mov	r2, r3
 80046d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f91b 	bl	8004910 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	b21b      	sxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f6ff ad17 	blt.w	800411a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3738      	adds	r7, #56	; 0x38
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b088      	sub	sp, #32
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	4613      	mov	r3, r2
 8004702:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d07e      	beq.n	800480c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	3302      	adds	r3, #2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004736:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	8b7b      	ldrh	r3, [r7, #26]
 800473e:	429a      	cmp	r2, r3
 8004740:	d306      	bcc.n	8004750 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	8b7b      	ldrh	r3, [r7, #26]
 8004748:	1ad2      	subs	r2, r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	619a      	str	r2, [r3, #24]
 800474e:	e002      	b.n	8004756 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d123      	bne.n	80047a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	833b      	strh	r3, [r7, #24]
 800477a:	8b3b      	ldrh	r3, [r7, #24]
 800477c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004780:	833b      	strh	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	8b3b      	ldrh	r3, [r7, #24]
 8004792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01f      	beq.n	80047f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	82fb      	strh	r3, [r7, #22]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047f0:	8b7b      	ldrh	r3, [r7, #26]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8087 	beq.w	8004906 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	891a      	ldrh	r2, [r3, #8]
 8004804:	8b7b      	ldrh	r3, [r7, #26]
 8004806:	f004 fea4 	bl	8009552 <USB_ReadPMA>
 800480a:	e07c      	b.n	8004906 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	3306      	adds	r3, #6
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004834:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	8b7b      	ldrh	r3, [r7, #26]
 800483c:	429a      	cmp	r2, r3
 800483e:	d306      	bcc.n	800484e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	8b7b      	ldrh	r3, [r7, #26]
 8004846:	1ad2      	subs	r2, r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	e002      	b.n	8004854 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d123      	bne.n	80048a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	83fb      	strh	r3, [r7, #30]
 8004878:	8bfb      	ldrh	r3, [r7, #30]
 800487a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800487e:	83fb      	strh	r3, [r7, #30]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	8bfb      	ldrh	r3, [r7, #30]
 8004890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11f      	bne.n	80048ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c8:	83bb      	strh	r3, [r7, #28]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8bbb      	ldrh	r3, [r7, #28]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6959      	ldr	r1, [r3, #20]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	895a      	ldrh	r2, [r3, #10]
 8004900:	8b7b      	ldrh	r3, [r7, #26]
 8004902:	f004 fe26 	bl	8009552 <USB_ReadPMA>
    }
  }

  return count;
 8004906:	8b7b      	ldrh	r3, [r7, #26]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b094      	sub	sp, #80	; 0x50
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8138 	beq.w	8004b9a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004932:	b29b      	uxth	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	3302      	adds	r3, #2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004952:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800495e:	429a      	cmp	r2, r3
 8004960:	d907      	bls.n	8004972 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	619a      	str	r2, [r3, #24]
 8004970:	e002      	b.n	8004978 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d12c      	bne.n	80049da <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f006 fc21 	bl	800b1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 823a 	beq.w	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	82fb      	strh	r3, [r7, #22]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
 80049d8:	e218      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01f      	beq.n	8004a24 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	f040 81ee 	bne.w	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a38:	441a      	add	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a46:	441a      	add	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d309      	bcc.n	8004a6c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	621a      	str	r2, [r3, #32]
 8004a6a:	e015      	b.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d107      	bne.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004a74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a82:	e009      	b.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d155      	bne.n	8004b4c <HAL_PCD_EP_DB_Transmit+0x23c>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	011a      	lsls	r2, r3, #4
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d112      	bne.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e047      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x274>
 8004af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af6:	2b3e      	cmp	r3, #62	; 0x3e
 8004af8:	d811      	bhi.n	8004b1e <HAL_PCD_EP_DB_Transmit+0x20e>
 8004afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x200>
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e032      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x274>
 8004b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x224>
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	3b01      	subs	r3, #1
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e01b      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x274>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d117      	bne.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x274>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	4413      	add	r3, r2
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	011a      	lsls	r2, r3, #4
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6959      	ldr	r1, [r3, #20]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	891a      	ldrh	r2, [r3, #8]
 8004b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f004 fc97 	bl	80094c6 <USB_WritePMA>
 8004b98:	e138      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	3306      	adds	r3, #6
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d307      	bcc.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	619a      	str	r2, [r3, #24]
 8004be0:	e002      	b.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d12e      	bne.n	8004c4e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f006 fae9 	bl	800b1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 8102 	bne.w	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]
 8004c4c:	e0de      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11f      	bne.n	8004c98 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f040 80b4 	bne.w	8004e0c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cac:	441a      	add	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cba:	441a      	add	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d309      	bcc.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd8:	1ad2      	subs	r2, r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	621a      	str	r2, [r3, #32]
 8004cde:	e015      	b.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004ce8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cf6:	e009      	b.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2200      	movs	r2, #0
 8004d02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d155      	bne.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	4413      	add	r3, r2
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	011a      	lsls	r2, r3, #4
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
 8004d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d112      	bne.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x45e>
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e044      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d70:	2b3e      	cmp	r3, #62	; 0x3e
 8004d72:	d811      	bhi.n	8004d98 <HAL_PCD_EP_DB_Transmit+0x488>
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_PCD_EP_DB_Transmit+0x47a>
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	3301      	adds	r3, #1
 8004d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	029b      	lsls	r3, r3, #10
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e02f      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_PCD_EP_DB_Transmit+0x49e>
 8004da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004daa:	3b01      	subs	r3, #1
 8004dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e018      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d114      	bne.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	4413      	add	r3, r2
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	895a      	ldrh	r2, [r3, #10]
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f004 fb5d 	bl	80094c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e26:	82bb      	strh	r3, [r7, #20]
 8004e28:	8abb      	ldrh	r3, [r7, #20]
 8004e2a:	f083 0310 	eor.w	r3, r3, #16
 8004e2e:	82bb      	strh	r3, [r7, #20]
 8004e30:	8abb      	ldrh	r3, [r7, #20]
 8004e32:	f083 0320 	eor.w	r3, r3, #32
 8004e36:	82bb      	strh	r3, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	8abb      	ldrh	r3, [r7, #20]
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3750      	adds	r7, #80	; 0x50
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	817b      	strh	r3, [r7, #10]
 8004e74:	4613      	mov	r3, r2
 8004e76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e78:	897b      	ldrh	r3, [r7, #10]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e84:	897b      	ldrh	r3, [r7, #10]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e009      	b.n	8004eb0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e9c:	897a      	ldrh	r2, [r7, #10]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004eb0:	893b      	ldrh	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d107      	bne.n	8004ec6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	80da      	strh	r2, [r3, #6]
 8004ec4:	e00b      	b.n	8004ede <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f000 bef4 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 816a 	beq.w	80051ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f16:	4bb3      	ldr	r3, [pc, #716]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d00c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f22:	4bb0      	ldr	r3, [pc, #704]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d159      	bne.n	8004fe2 <HAL_RCC_OscConfig+0xf6>
 8004f2e:	4bad      	ldr	r3, [pc, #692]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3a:	d152      	bne.n	8004fe2 <HAL_RCC_OscConfig+0xf6>
 8004f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d102      	bne.n	8004f6e <HAL_RCC_OscConfig+0x82>
 8004f68:	4b9e      	ldr	r3, [pc, #632]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0xae>
 8004f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004f8e:	fa93 f3a3 	rbit	r3, r3
 8004f92:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004f96:	4b93      	ldr	r3, [pc, #588]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004fa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fa6:	fa92 f2a2 	rbit	r2, r2
 8004faa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004fb2:	fab2 f282 	clz	r2, r2
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	f042 0220 	orr.w	r2, r2, #32
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	f002 021f 	and.w	r2, r2, #31
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 810c 	beq.w	80051e8 <HAL_RCC_OscConfig+0x2fc>
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 8106 	bne.w	80051e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f000 be86 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x110>
 8004fee:	4b7d      	ldr	r3, [pc, #500]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7c      	ldr	r2, [pc, #496]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e030      	b.n	800505e <HAL_RCC_OscConfig+0x172>
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x134>
 8005006:	4b77      	ldr	r3, [pc, #476]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a76      	ldr	r2, [pc, #472]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b74      	ldr	r3, [pc, #464]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a73      	ldr	r2, [pc, #460]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01e      	b.n	800505e <HAL_RCC_OscConfig+0x172>
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502a:	d10c      	bne.n	8005046 <HAL_RCC_OscConfig+0x15a>
 800502c:	4b6d      	ldr	r3, [pc, #436]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6c      	ldr	r2, [pc, #432]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b6a      	ldr	r3, [pc, #424]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a69      	ldr	r2, [pc, #420]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e00b      	b.n	800505e <HAL_RCC_OscConfig+0x172>
 8005046:	4b67      	ldr	r3, [pc, #412]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a66      	ldr	r2, [pc, #408]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a63      	ldr	r2, [pc, #396]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800505e:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f023 020f 	bic.w	r2, r3, #15
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	495d      	ldr	r1, [pc, #372]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800506e:	4313      	orrs	r3, r2
 8005070:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d059      	beq.n	8005130 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fc fe22 	bl	8001cc4 <HAL_GetTick>
 8005080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005086:	f7fc fe1d 	bl	8001cc4 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d902      	bls.n	800509c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	f000 be29 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
 800509c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050a8:	fa93 f3a3 	rbit	r3, r3
 80050ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80050b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d102      	bne.n	80050ce <HAL_RCC_OscConfig+0x1e2>
 80050c8:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	e015      	b.n	80050fa <HAL_RCC_OscConfig+0x20e>
 80050ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80050f6:	4b3b      	ldr	r3, [pc, #236]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005102:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005106:	fa92 f2a2 	rbit	r2, r2
 800510a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800510e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005112:	fab2 f282 	clz	r2, r2
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	f042 0220 	orr.w	r2, r2, #32
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	f002 021f 	and.w	r2, r2, #31
 8005122:	2101      	movs	r1, #1
 8005124:	fa01 f202 	lsl.w	r2, r1, r2
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ab      	beq.n	8005086 <HAL_RCC_OscConfig+0x19a>
 800512e:	e05c      	b.n	80051ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fc fdc8 	bl	8001cc4 <HAL_GetTick>
 8005134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513a:	f7fc fdc3 	bl	8001cc4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d902      	bls.n	8005150 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	f000 bdcf 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
 8005150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005154:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800515c:	fa93 f3a3 	rbit	r3, r3
 8005160:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005164:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005168:	fab3 f383 	clz	r3, r3
 800516c:	b2db      	uxtb	r3, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <HAL_RCC_OscConfig+0x296>
 800517c:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	e015      	b.n	80051ae <HAL_RCC_OscConfig+0x2c2>
 8005182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005186:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800519a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800519e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80051aa:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <HAL_RCC_OscConfig+0x2f8>)
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80051b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051ba:	fa92 f2a2 	rbit	r2, r2
 80051be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80051c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80051c6:	fab2 f282 	clz	r2, r2
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	f042 0220 	orr.w	r2, r2, #32
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	f002 021f 	and.w	r2, r2, #31
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f202 	lsl.w	r2, r1, r2
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ab      	bne.n	800513a <HAL_RCC_OscConfig+0x24e>
 80051e2:	e002      	b.n	80051ea <HAL_RCC_OscConfig+0x2fe>
 80051e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 816f 	beq.w	80054d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80051fa:	4bd0      	ldr	r3, [pc, #832]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005206:	4bcd      	ldr	r3, [pc, #820]	; (800553c <HAL_RCC_OscConfig+0x650>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b08      	cmp	r3, #8
 8005210:	d16c      	bne.n	80052ec <HAL_RCC_OscConfig+0x400>
 8005212:	4bca      	ldr	r3, [pc, #808]	; (800553c <HAL_RCC_OscConfig+0x650>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d166      	bne.n	80052ec <HAL_RCC_OscConfig+0x400>
 800521e:	2302      	movs	r3, #2
 8005220:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005230:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005234:	fab3 f383 	clz	r3, r3
 8005238:	b2db      	uxtb	r3, r3
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	d102      	bne.n	800524e <HAL_RCC_OscConfig+0x362>
 8005248:	4bbc      	ldr	r3, [pc, #752]	; (800553c <HAL_RCC_OscConfig+0x650>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	e013      	b.n	8005276 <HAL_RCC_OscConfig+0x38a>
 800524e:	2302      	movs	r3, #2
 8005250:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005260:	2302      	movs	r3, #2
 8005262:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005266:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005272:	4bb2      	ldr	r3, [pc, #712]	; (800553c <HAL_RCC_OscConfig+0x650>)
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2202      	movs	r2, #2
 8005278:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800527c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005280:	fa92 f2a2 	rbit	r2, r2
 8005284:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005288:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800528c:	fab2 f282 	clz	r2, r2
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	f042 0220 	orr.w	r2, r2, #32
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	f002 021f 	and.w	r2, r2, #31
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_RCC_OscConfig+0x3cc>
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f000 bd1b 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	4ba0      	ldr	r3, [pc, #640]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	21f8      	movs	r1, #248	; 0xf8
 80052c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052d0:	fa91 f1a1 	rbit	r1, r1
 80052d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80052d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80052dc:	fab1 f181 	clz	r1, r1
 80052e0:	b2c9      	uxtb	r1, r1
 80052e2:	408b      	lsls	r3, r1
 80052e4:	4995      	ldr	r1, [pc, #596]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	e0f5      	b.n	80054d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8085 	beq.w	8005402 <HAL_RCC_OscConfig+0x516>
 80052f8:	2301      	movs	r3, #1
 80052fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800530a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	461a      	mov	r2, r3
 8005320:	2301      	movs	r3, #1
 8005322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fc fcce 	bl	8001cc4 <HAL_GetTick>
 8005328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532e:	f7fc fcc9 	bl	8001cc4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d902      	bls.n	8005344 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	f000 bcd5 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
 8005344:	2302      	movs	r3, #2
 8005346:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005356:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d102      	bne.n	8005374 <HAL_RCC_OscConfig+0x488>
 800536e:	4b73      	ldr	r3, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x650>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	e013      	b.n	800539c <HAL_RCC_OscConfig+0x4b0>
 8005374:	2302      	movs	r3, #2
 8005376:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800537e:	fa93 f3a3 	rbit	r3, r3
 8005382:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005386:	2302      	movs	r3, #2
 8005388:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800538c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005390:	fa93 f3a3 	rbit	r3, r3
 8005394:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005398:	4b68      	ldr	r3, [pc, #416]	; (800553c <HAL_RCC_OscConfig+0x650>)
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2202      	movs	r2, #2
 800539e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80053a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053a6:	fa92 f2a2 	rbit	r2, r2
 80053aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80053ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80053b2:	fab2 f282 	clz	r2, r2
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f042 0220 	orr.w	r2, r2, #32
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f002 021f 	and.w	r2, r2, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f202 	lsl.w	r2, r1, r2
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0af      	beq.n	800532e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	4b5b      	ldr	r3, [pc, #364]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	21f8      	movs	r1, #248	; 0xf8
 80053de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80053e6:	fa91 f1a1 	rbit	r1, r1
 80053ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80053ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80053f2:	fab1 f181 	clz	r1, r1
 80053f6:	b2c9      	uxtb	r1, r1
 80053f8:	408b      	lsls	r3, r1
 80053fa:	4950      	ldr	r1, [pc, #320]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
 8005400:	e06a      	b.n	80054d8 <HAL_RCC_OscConfig+0x5ec>
 8005402:	2301      	movs	r3, #1
 8005404:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005408:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800540c:	fa93 f3a3 	rbit	r3, r3
 8005410:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005414:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005422:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fc fc49 	bl	8001cc4 <HAL_GetTick>
 8005432:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e00a      	b.n	800544e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fc fc44 	bl	8001cc4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d902      	bls.n	800544e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	f000 bc50 	b.w	8005cee <HAL_RCC_OscConfig+0xe02>
 800544e:	2302      	movs	r3, #2
 8005450:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <HAL_RCC_OscConfig+0x592>
 8005478:	4b30      	ldr	r3, [pc, #192]	; (800553c <HAL_RCC_OscConfig+0x650>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	e013      	b.n	80054a6 <HAL_RCC_OscConfig+0x5ba>
 800547e:	2302      	movs	r3, #2
 8005480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005490:	2302      	movs	r3, #2
 8005492:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005496:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <HAL_RCC_OscConfig+0x650>)
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2202      	movs	r2, #2
 80054a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80054ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054b0:	fa92 f2a2 	rbit	r2, r2
 80054b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80054b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054bc:	fab2 f282 	clz	r2, r2
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	f042 0220 	orr.w	r2, r2, #32
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	f002 021f 	and.w	r2, r2, #31
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1af      	bne.n	8005438 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d8:	1d3b      	adds	r3, r7, #4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80da 	beq.w	800569c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d069      	beq.n	80055c6 <HAL_RCC_OscConfig+0x6da>
 80054f2:	2301      	movs	r3, #1
 80054f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054fc:	fa93 f3a3 	rbit	r3, r3
 8005500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_OscConfig+0x654>)
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	461a      	mov	r2, r3
 8005518:	2301      	movs	r3, #1
 800551a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551c:	f7fc fbd2 	bl	8001cc4 <HAL_GetTick>
 8005520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005524:	e00e      	b.n	8005544 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005526:	f7fc fbcd 	bl	8001cc4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d906      	bls.n	8005544 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e3d9      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	10908120 	.word	0x10908120
 8005544:	2302      	movs	r3, #2
 8005546:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005556:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800555a:	2202      	movs	r2, #2
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005572:	2202      	movs	r2, #2
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005584:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005586:	4ba5      	ldr	r3, [pc, #660]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800558e:	2102      	movs	r1, #2
 8005590:	6019      	str	r1, [r3, #0]
 8005592:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f1a3 	rbit	r1, r3
 800559c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055a0:	6019      	str	r1, [r3, #0]
  return result;
 80055a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0b0      	beq.n	8005526 <HAL_RCC_OscConfig+0x63a>
 80055c4:	e06a      	b.n	800569c <HAL_RCC_OscConfig+0x7b0>
 80055c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	fa93 f2a3 	rbit	r2, r3
 80055d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055dc:	601a      	str	r2, [r3, #0]
  return result;
 80055de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e4:	fab3 f383 	clz	r3, r3
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <HAL_RCC_OscConfig+0x934>)
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f8:	f7fc fb64 	bl	8001cc4 <HAL_GetTick>
 80055fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005600:	e009      	b.n	8005616 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005602:	f7fc fb5f 	bl	8001cc4 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e36b      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 8005616:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800561a:	2202      	movs	r2, #2
 800561c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fa93 f2a3 	rbit	r2, r3
 8005628:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005632:	2202      	movs	r2, #2
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	fa93 f2a3 	rbit	r2, r3
 8005640:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800564a:	2202      	movs	r2, #2
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fa93 f2a3 	rbit	r2, r3
 8005658:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800565c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565e:	4b6f      	ldr	r3, [pc, #444]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005662:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005666:	2102      	movs	r1, #2
 8005668:	6019      	str	r1, [r3, #0]
 800566a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	fa93 f1a3 	rbit	r1, r3
 8005674:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005678:	6019      	str	r1, [r3, #0]
  return result;
 800567a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1b2      	bne.n	8005602 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8158 	beq.w	800595c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b2:	4b5a      	ldr	r3, [pc, #360]	; (800581c <HAL_RCC_OscConfig+0x930>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d112      	bne.n	80056e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056be:	4b57      	ldr	r3, [pc, #348]	; (800581c <HAL_RCC_OscConfig+0x930>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4a56      	ldr	r2, [pc, #344]	; (800581c <HAL_RCC_OscConfig+0x930>)
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	61d3      	str	r3, [r2, #28]
 80056ca:	4b54      	ldr	r3, [pc, #336]	; (800581c <HAL_RCC_OscConfig+0x930>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80056d2:	f107 0308 	add.w	r3, r7, #8
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <HAL_RCC_OscConfig+0x938>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11a      	bne.n	8005726 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f0:	4b4c      	ldr	r3, [pc, #304]	; (8005824 <HAL_RCC_OscConfig+0x938>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a4b      	ldr	r2, [pc, #300]	; (8005824 <HAL_RCC_OscConfig+0x938>)
 80056f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fc:	f7fc fae2 	bl	8001cc4 <HAL_GetTick>
 8005700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	e009      	b.n	800571a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005706:	f7fc fadd 	bl	8001cc4 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e2e9      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <HAL_RCC_OscConfig+0x938>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ef      	beq.n	8005706 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x852>
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4a39      	ldr	r2, [pc, #228]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6213      	str	r3, [r2, #32]
 800573c:	e02f      	b.n	800579e <HAL_RCC_OscConfig+0x8b2>
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10c      	bne.n	8005762 <HAL_RCC_OscConfig+0x876>
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	4a33      	ldr	r2, [pc, #204]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6213      	str	r3, [r2, #32]
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a30      	ldr	r2, [pc, #192]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	e01d      	b.n	800579e <HAL_RCC_OscConfig+0x8b2>
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b05      	cmp	r3, #5
 800576a:	d10c      	bne.n	8005786 <HAL_RCC_OscConfig+0x89a>
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	6213      	str	r3, [r2, #32]
 8005778:	4b28      	ldr	r3, [pc, #160]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6213      	str	r3, [r2, #32]
 8005784:	e00b      	b.n	800579e <HAL_RCC_OscConfig+0x8b2>
 8005786:	4b25      	ldr	r3, [pc, #148]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	4a24      	ldr	r2, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x930>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6213      	str	r3, [r2, #32]
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d06b      	beq.n	8005880 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a8:	f7fc fa8c 	bl	8001cc4 <HAL_GetTick>
 80057ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b0:	e00b      	b.n	80057ca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f7fc fa87 	bl	8001cc4 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e291      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 80057ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057ce:	2202      	movs	r2, #2
 80057d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	fa93 f2a3 	rbit	r2, r3
 80057dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057e6:	2202      	movs	r2, #2
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	fa93 f2a3 	rbit	r2, r3
 80057f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057f8:	601a      	str	r2, [r3, #0]
  return result;
 80057fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f043 0302 	orr.w	r3, r3, #2
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d109      	bne.n	8005828 <HAL_RCC_OscConfig+0x93c>
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <HAL_RCC_OscConfig+0x930>)
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	e014      	b.n	8005844 <HAL_RCC_OscConfig+0x958>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
 8005820:	10908120 	.word	0x10908120
 8005824:	40007000 	.word	0x40007000
 8005828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800582c:	2202      	movs	r2, #2
 800582e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	fa93 f2a3 	rbit	r2, r3
 800583a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	4bbb      	ldr	r3, [pc, #748]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005848:	2102      	movs	r1, #2
 800584a:	6011      	str	r1, [r2, #0]
 800584c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	fa92 f1a2 	rbit	r1, r2
 8005856:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800585a:	6011      	str	r1, [r2, #0]
  return result;
 800585c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	f002 021f 	and.w	r2, r2, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d099      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8c6>
 800587e:	e063      	b.n	8005948 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005880:	f7fc fa20 	bl	8001cc4 <HAL_GetTick>
 8005884:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005888:	e00b      	b.n	80058a2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fc fa1b 	bl	8001cc4 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e225      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 80058a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058a6:	2202      	movs	r2, #2
 80058a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	fa93 f2a3 	rbit	r2, r3
 80058b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058be:	2202      	movs	r2, #2
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	fa93 f2a3 	rbit	r2, r3
 80058cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058d0:	601a      	str	r2, [r3, #0]
  return result;
 80058d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_OscConfig+0xa06>
 80058ec:	4b90      	ldr	r3, [pc, #576]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	e00d      	b.n	800590e <HAL_RCC_OscConfig+0xa22>
 80058f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058f6:	2202      	movs	r2, #2
 80058f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	fa93 f2a3 	rbit	r2, r3
 8005904:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005912:	2102      	movs	r1, #2
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	fa92 f1a2 	rbit	r1, r2
 8005920:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005924:	6011      	str	r1, [r2, #0]
  return result;
 8005926:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	fab2 f282 	clz	r2, r2
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	f002 021f 	and.w	r2, r2, #31
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f202 	lsl.w	r2, r1, r2
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1a0      	bne.n	800588a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005948:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b77      	ldr	r3, [pc, #476]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4a76      	ldr	r2, [pc, #472]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 81c2 	beq.w	8005cec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005968:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b08      	cmp	r3, #8
 8005972:	f000 819c 	beq.w	8005cae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b02      	cmp	r3, #2
 800597e:	f040 8114 	bne.w	8005baa <HAL_RCC_OscConfig+0xcbe>
 8005982:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800598a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	fa93 f2a3 	rbit	r2, r3
 8005996:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800599a:	601a      	str	r2, [r3, #0]
  return result;
 800599c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fc f984 	bl	8001cc4 <HAL_GetTick>
 80059bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c0:	e009      	b.n	80059d6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fc f97f 	bl	8001cc4 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e18b      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 80059d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	fa93 f2a3 	rbit	r2, r3
 80059ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059ee:	601a      	str	r2, [r3, #0]
  return result;
 80059f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_OscConfig+0xb24>
 8005a0a:	4b49      	ldr	r3, [pc, #292]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	e01b      	b.n	8005a48 <HAL_RCC_OscConfig+0xb5c>
 8005a10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	fa93 f2a3 	rbit	r2, r3
 8005a24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	fa93 f2a3 	rbit	r2, r3
 8005a3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	4b3a      	ldr	r3, [pc, #232]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	fa92 f1a2 	rbit	r1, r2
 8005a5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a60:	6011      	str	r1, [r2, #0]
  return result;
 8005a62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	fab2 f282 	clz	r2, r2
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	f042 0220 	orr.w	r2, r2, #32
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	f002 021f 	and.w	r2, r2, #31
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d19e      	bne.n	80059c2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a84:	4b2a      	ldr	r3, [pc, #168]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	4925      	ldr	r1, [pc, #148]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	fa93 f2a3 	rbit	r2, r3
 8005ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ab8:	601a      	str	r2, [r3, #0]
  return result;
 8005aba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005abe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005aca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fc f8f5 	bl	8001cc4 <HAL_GetTick>
 8005ada:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ade:	e009      	b.n	8005af4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fc f8f0 	bl	8001cc4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0fc      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 8005af4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	fa93 f2a3 	rbit	r2, r3
 8005b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b0c:	601a      	str	r2, [r3, #0]
  return result;
 8005b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b14:	fab3 f383 	clz	r3, r3
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0xc48>
 8005b28:	4b01      	ldr	r3, [pc, #4]	; (8005b30 <HAL_RCC_OscConfig+0xc44>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	e01e      	b.n	8005b6c <HAL_RCC_OscConfig+0xc80>
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	fa93 f2a3 	rbit	r2, r3
 8005b48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	fa93 f2a3 	rbit	r2, r3
 8005b62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	4b63      	ldr	r3, [pc, #396]	; (8005cf8 <HAL_RCC_OscConfig+0xe0c>)
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	fa92 f1a2 	rbit	r1, r2
 8005b80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b84:	6011      	str	r1, [r2, #0]
  return result;
 8005b86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	f002 021f 	and.w	r2, r2, #31
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d09b      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xbf4>
 8005ba8:	e0a0      	b.n	8005cec <HAL_RCC_OscConfig+0xe00>
 8005baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	fa93 f2a3 	rbit	r2, r3
 8005bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc2:	601a      	str	r2, [r3, #0]
  return result;
 8005bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bca:	fab3 f383 	clz	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fc f870 	bl	8001cc4 <HAL_GetTick>
 8005be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005be8:	e009      	b.n	8005bfe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bea:	f7fc f86b 	bl	8001cc4 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e077      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
 8005bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	fa93 f2a3 	rbit	r2, r3
 8005c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c16:	601a      	str	r2, [r3, #0]
  return result;
 8005c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1e:	fab3 f383 	clz	r3, r3
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d102      	bne.n	8005c38 <HAL_RCC_OscConfig+0xd4c>
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <HAL_RCC_OscConfig+0xe0c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	e01b      	b.n	8005c70 <HAL_RCC_OscConfig+0xd84>
 8005c38:	f107 0320 	add.w	r3, r7, #32
 8005c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	f107 0320 	add.w	r3, r7, #32
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	fa93 f2a3 	rbit	r2, r3
 8005c4c:	f107 031c 	add.w	r3, r7, #28
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	f107 0318 	add.w	r3, r7, #24
 8005c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f107 0318 	add.w	r3, r7, #24
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	fa93 f2a3 	rbit	r2, r3
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	4b22      	ldr	r3, [pc, #136]	; (8005cf8 <HAL_RCC_OscConfig+0xe0c>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	f107 0210 	add.w	r2, r7, #16
 8005c74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	f107 0210 	add.w	r2, r7, #16
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	fa92 f1a2 	rbit	r1, r2
 8005c84:	f107 020c 	add.w	r2, r7, #12
 8005c88:	6011      	str	r1, [r2, #0]
  return result;
 8005c8a:	f107 020c 	add.w	r2, r7, #12
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	fab2 f282 	clz	r2, r2
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	f042 0220 	orr.w	r2, r2, #32
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f002 021f 	and.w	r2, r2, #31
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d19e      	bne.n	8005bea <HAL_RCC_OscConfig+0xcfe>
 8005cac:	e01e      	b.n	8005cec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cae:	1d3b      	adds	r3, r7, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e018      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <HAL_RCC_OscConfig+0xe0c>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d108      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005cd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000

08005cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b09e      	sub	sp, #120	; 0x78
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e162      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d14:	4b90      	ldr	r3, [pc, #576]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d910      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b8d      	ldr	r3, [pc, #564]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f023 0207 	bic.w	r2, r3, #7
 8005d2a:	498b      	ldr	r1, [pc, #556]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e14a      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d50:	4b82      	ldr	r3, [pc, #520]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	497f      	ldr	r1, [pc, #508]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80dc 	beq.w	8005f28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d13c      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xf6>
 8005d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d80:	fa93 f3a3 	rbit	r3, r3
 8005d84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d88:	fab3 f383 	clz	r3, r3
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d102      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xa6>
 8005d9c:	4b6f      	ldr	r3, [pc, #444]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0xc6>
 8005da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005daa:	fa93 f3a3 	rbit	r3, r3
 8005dae:	667b      	str	r3, [r7, #100]	; 0x64
 8005db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005db4:	663b      	str	r3, [r7, #96]	; 0x60
 8005db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db8:	fa93 f3a3 	rbit	r3, r3
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbe:	4b67      	ldr	r3, [pc, #412]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dca:	fa92 f2a2 	rbit	r2, r2
 8005dce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dd2:	fab2 f282 	clz	r2, r2
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f042 0220 	orr.w	r2, r2, #32
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f002 021f 	and.w	r2, r2, #31
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d17b      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e0f3      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d13c      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x178>
 8005dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e02:	fa93 f3a3 	rbit	r3, r3
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0a:	fab3 f383 	clz	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d102      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x128>
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	e00f      	b.n	8005e44 <HAL_RCC_ClockConfig+0x148>
 8005e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2c:	fa93 f3a3 	rbit	r3, r3
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
 8005e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40
 8005e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e48:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4c:	fa92 f2a2 	rbit	r2, r2
 8005e50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e54:	fab2 f282 	clz	r2, r2
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	f042 0220 	orr.w	r2, r2, #32
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	f002 021f 	and.w	r2, r2, #31
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d13a      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0b2      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
 8005e74:	2302      	movs	r3, #2
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e82:	fab3 f383 	clz	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d102      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x1a0>
 8005e96:	4b31      	ldr	r3, [pc, #196]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	e00d      	b.n	8005eb8 <HAL_RCC_ClockConfig+0x1bc>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2202      	movs	r2, #2
 8005eba:	61ba      	str	r2, [r7, #24]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	fa92 f2a2 	rbit	r2, r2
 8005ec2:	617a      	str	r2, [r7, #20]
  return result;
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	fab2 f282 	clz	r2, r2
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	f002 021f 	and.w	r2, r2, #31
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e079      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	491a      	ldr	r1, [pc, #104]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fb fee4 	bl	8001cc4 <HAL_GetTick>
 8005efc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fb fee0 	bl	8001cc4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e061      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <HAL_RCC_ClockConfig+0x260>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d214      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0207 	bic.w	r2, r3, #7
 8005f3e:	4906      	ldr	r1, [pc, #24]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <HAL_RCC_ClockConfig+0x25c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e040      	b.n	8005fda <HAL_RCC_ClockConfig+0x2de>
 8005f58:	40022000 	.word	0x40022000
 8005f5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	491a      	ldr	r1, [pc, #104]	; (8005fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4912      	ldr	r1, [pc, #72]	; (8005fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f9e:	f000 f829 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fac:	22f0      	movs	r2, #240	; 0xf0
 8005fae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	fa92 f2a2 	rbit	r2, r2
 8005fb6:	60fa      	str	r2, [r7, #12]
  return result;
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	fab2 f282 	clz	r2, r2
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	40d3      	lsrs	r3, r2
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <HAL_RCC_ClockConfig+0x2ec>)
 8005fc4:	5cd3      	ldrb	r3, [r2, r3]
 8005fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8005fca:	4a08      	ldr	r2, [pc, #32]	; (8005fec <HAL_RCC_ClockConfig+0x2f0>)
 8005fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <HAL_RCC_ClockConfig+0x2f4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fb fe32 	bl	8001c3c <HAL_InitTick>
  
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3778      	adds	r7, #120	; 0x78
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	0800c7a8 	.word	0x0800c7a8
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	20000004 	.word	0x20000004

08005ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b08b      	sub	sp, #44	; 0x2c
 8005ff8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	2300      	movs	r3, #0
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b04      	cmp	r3, #4
 800601c:	d002      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x30>
 800601e:	2b08      	cmp	r3, #8
 8006020:	d003      	beq.n	800602a <HAL_RCC_GetSysClockFreq+0x36>
 8006022:	e03c      	b.n	800609e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006024:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006026:	623b      	str	r3, [r7, #32]
      break;
 8006028:	e03c      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006030:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006034:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	fa92 f2a2 	rbit	r2, r2
 800603c:	607a      	str	r2, [r7, #4]
  return result;
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	fab2 f282 	clz	r2, r2
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	40d3      	lsrs	r3, r2
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800604a:	5cd3      	ldrb	r3, [r2, r3]
 800604c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800604e:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	220f      	movs	r2, #15
 8006058:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	fa92 f2a2 	rbit	r2, r2
 8006060:	60fa      	str	r2, [r7, #12]
  return result;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	fab2 f282 	clz	r2, r2
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	40d3      	lsrs	r3, r2
 800606c:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800607c:	4a0e      	ldr	r2, [pc, #56]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	fbb2 f2f3 	udiv	r2, r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	e004      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	623b      	str	r3, [r7, #32]
      break;
 800609c:	e002      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060a0:	623b      	str	r3, [r7, #32]
      break;
 80060a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060a4:	6a3b      	ldr	r3, [r7, #32]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	372c      	adds	r7, #44	; 0x2c
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000
 80060b8:	007a1200 	.word	0x007a1200
 80060bc:	0800c7b8 	.word	0x0800c7b8
 80060c0:	0800c7c8 	.word	0x0800c7c8
 80060c4:	003d0900 	.word	0x003d0900

080060c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000000 	.word	0x20000000

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b092      	sub	sp, #72	; 0x48
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80d4 	beq.w	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006104:	4b4e      	ldr	r3, [pc, #312]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10e      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006110:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	4a4a      	ldr	r2, [pc, #296]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611a:	61d3      	str	r3, [r2, #28]
 800611c:	4b48      	ldr	r3, [pc, #288]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612e:	4b45      	ldr	r3, [pc, #276]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d118      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800613a:	4b42      	ldr	r3, [pc, #264]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a41      	ldr	r2, [pc, #260]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006144:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006146:	f7fb fdbd 	bl	8001cc4 <HAL_GetTick>
 800614a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614c:	e008      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614e:	f7fb fdb9 	bl	8001cc4 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b64      	cmp	r3, #100	; 0x64
 800615a:	d901      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e169      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006160:	4b38      	ldr	r3, [pc, #224]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800616c:	4b34      	ldr	r3, [pc, #208]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8084 	beq.w	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006188:	429a      	cmp	r2, r3
 800618a:	d07c      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800618c:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061a6:	fab3 f383 	clz	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b26      	ldr	r3, [pc, #152]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	461a      	mov	r2, r3
 80061b6:	2301      	movs	r3, #1
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ca:	fab3 f383 	clz	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	461a      	mov	r2, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061de:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d04b      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ee:	f7fb fd69 	bl	8001cc4 <HAL_GetTick>
 80061f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f4:	e00a      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fb fd65 	bl	8001cc4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e113      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800620c:	2302      	movs	r3, #2
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	2302      	movs	r3, #2
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	61fb      	str	r3, [r7, #28]
  return result;
 8006224:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f043 0302 	orr.w	r3, r3, #2
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d108      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800623a:	4b01      	ldr	r3, [pc, #4]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	e00d      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006240:	40021000 	.word	0x40021000
 8006244:	40007000 	.word	0x40007000
 8006248:	10908100 	.word	0x10908100
 800624c:	2302      	movs	r3, #2
 800624e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	4b78      	ldr	r3, [pc, #480]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2202      	movs	r2, #2
 800625e:	613a      	str	r2, [r7, #16]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	fa92 f2a2 	rbit	r2, r2
 8006266:	60fa      	str	r2, [r7, #12]
  return result;
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	fab2 f282 	clz	r2, r2
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	f002 021f 	and.w	r2, r2, #31
 800627a:	2101      	movs	r1, #1
 800627c:	fa01 f202 	lsl.w	r2, r1, r2
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0b7      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006286:	4b6d      	ldr	r3, [pc, #436]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	496a      	ldr	r1, [pc, #424]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a0:	4b66      	ldr	r3, [pc, #408]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	4a65      	ldr	r2, [pc, #404]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d008      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b8:	4b60      	ldr	r3, [pc, #384]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	f023 0203 	bic.w	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	495d      	ldr	r1, [pc, #372]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d6:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	4956      	ldr	r1, [pc, #344]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f4:	4b51      	ldr	r3, [pc, #324]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	494e      	ldr	r1, [pc, #312]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006302:	4313      	orrs	r3, r2
 8006304:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006312:	4b4a      	ldr	r3, [pc, #296]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	f023 0210 	bic.w	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4947      	ldr	r1, [pc, #284]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	493f      	ldr	r1, [pc, #252]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	f023 0220 	bic.w	r2, r3, #32
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	4938      	ldr	r1, [pc, #224]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800636c:	4b33      	ldr	r3, [pc, #204]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4930      	ldr	r1, [pc, #192]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800638a:	4b2c      	ldr	r3, [pc, #176]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	4929      	ldr	r1, [pc, #164]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063a8:	4b24      	ldr	r3, [pc, #144]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4921      	ldr	r1, [pc, #132]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	491a      	ldr	r1, [pc, #104]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	4912      	ldr	r1, [pc, #72]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006402:	4b0e      	ldr	r3, [pc, #56]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	490b      	ldr	r1, [pc, #44]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006410:	4313      	orrs	r3, r2
 8006412:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	4903      	ldr	r1, [pc, #12]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800642e:	4313      	orrs	r3, r2
 8006430:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3748      	adds	r7, #72	; 0x48
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40021000 	.word	0x40021000

08006440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e049      	b.n	80064e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb faea 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f000 fb86 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e042      	b.n	800658e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_TIM_Base_Start+0xac>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d018      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d013      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_TIM_Base_Start+0xb0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00e      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_TIM_Base_Start+0xb4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d009      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1a      	ldr	r2, [pc, #104]	; (80065a8 <HAL_TIM_Base_Start+0xb8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d004      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_TIM_Base_Start+0xbc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d115      	bne.n	8006578 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <HAL_TIM_Base_Start+0xc0>)
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d015      	beq.n	800658a <HAL_TIM_Base_Start+0x9a>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006564:	d011      	beq.n	800658a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	e008      	b.n	800658a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e000      	b.n	800658c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40013400 	.word	0x40013400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	00010007 	.word	0x00010007

080065b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e049      	b.n	800665a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f841 	bl	8006662 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f000 facc 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d122      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d11b      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f06f 0202 	mvn.w	r2, #2
 80066a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa4b 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 80066be:	e005      	b.n	80066cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fa3d 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa4e 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d122      	bne.n	8006726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d11b      	bne.n	8006726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0204 	mvn.w	r2, #4
 80066f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa21 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 8006712:	e005      	b.n	8006720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fa13 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa24 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b08      	cmp	r3, #8
 8006732:	d122      	bne.n	800677a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b08      	cmp	r3, #8
 8006740:	d11b      	bne.n	800677a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0208 	mvn.w	r2, #8
 800674a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9f7 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 8006766:	e005      	b.n	8006774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9e9 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9fa 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b10      	cmp	r3, #16
 8006786:	d122      	bne.n	80067ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b10      	cmp	r3, #16
 8006794:	d11b      	bne.n	80067ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f06f 0210 	mvn.w	r2, #16
 800679e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2208      	movs	r2, #8
 80067a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f9cd 	bl	8006b54 <HAL_TIM_IC_CaptureCallback>
 80067ba:	e005      	b.n	80067c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f9bf 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9d0 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d10e      	bne.n	80067fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d107      	bne.n	80067fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0201 	mvn.w	r2, #1
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f999 	bl	8006b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d10e      	bne.n	8006826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d107      	bne.n	8006826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800681e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fe3f 	bl	80074a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fe32 	bl	80074b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f97e 	bl	8006b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b20      	cmp	r3, #32
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0220 	mvn.w	r2, #32
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fdf2 	bl	8007490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_TIM_OC_ConfigChannel+0x1a>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e064      	b.n	8006998 <HAL_TIM_OC_ConfigChannel+0xe4>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b14      	cmp	r3, #20
 80068da:	d857      	bhi.n	800698c <HAL_TIM_OC_ConfigChannel+0xd8>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006939 	.word	0x08006939
 80068e8:	0800698d 	.word	0x0800698d
 80068ec:	0800698d 	.word	0x0800698d
 80068f0:	0800698d 	.word	0x0800698d
 80068f4:	08006947 	.word	0x08006947
 80068f8:	0800698d 	.word	0x0800698d
 80068fc:	0800698d 	.word	0x0800698d
 8006900:	0800698d 	.word	0x0800698d
 8006904:	08006955 	.word	0x08006955
 8006908:	0800698d 	.word	0x0800698d
 800690c:	0800698d 	.word	0x0800698d
 8006910:	0800698d 	.word	0x0800698d
 8006914:	08006963 	.word	0x08006963
 8006918:	0800698d 	.word	0x0800698d
 800691c:	0800698d 	.word	0x0800698d
 8006920:	0800698d 	.word	0x0800698d
 8006924:	08006971 	.word	0x08006971
 8006928:	0800698d 	.word	0x0800698d
 800692c:	0800698d 	.word	0x0800698d
 8006930:	0800698d 	.word	0x0800698d
 8006934:	0800697f 	.word	0x0800697f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f9b6 	bl	8006cb0 <TIM_OC1_SetConfig>
      break;
 8006944:	e023      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fa3f 	bl	8006dd0 <TIM_OC2_SetConfig>
      break;
 8006952:	e01c      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fac2 	bl	8006ee4 <TIM_OC3_SetConfig>
      break;
 8006960:	e015      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fb43 	bl	8006ff4 <TIM_OC4_SetConfig>
      break;
 800696e:	e00e      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fba6 	bl	80070c8 <TIM_OC5_SetConfig>
      break;
 800697c:	e007      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fc03 	bl	8007190 <TIM_OC6_SetConfig>
      break;
 800698a:	e000      	b.n	800698e <HAL_TIM_OC_ConfigChannel+0xda>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800698c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_ConfigClockSource+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0b5      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x184>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d03e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0xd4>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	f200 8087 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	f000 8085 	beq.w	8006b10 <HAL_TIM_ConfigClockSource+0x170>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d87f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d01a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xa6>
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d87b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d050      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x11a>
 8006a18:	2b60      	cmp	r3, #96	; 0x60
 8006a1a:	d877      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d03c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0xfa>
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d873      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d058      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x13a>
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d86f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d064      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d86b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d060      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d867      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d05a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a44:	e062      	b.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f000 fc7b 	bl	8007350 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	609a      	str	r2, [r3, #8]
      break;
 8006a72:	e04e      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f000 fc64 	bl	8007350 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e03b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fbd8 	bl	800725c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2150      	movs	r1, #80	; 0x50
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fc31 	bl	800731a <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e02b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fbf7 	bl	80072ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2160      	movs	r1, #96	; 0x60
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fc21 	bl	800731a <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e01b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fbb8 	bl	800725c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2140      	movs	r1, #64	; 0x40
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fc11 	bl	800731a <TIM_ITRx_SetConfig>
      break;
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 fc08 	bl	800731a <TIM_ITRx_SetConfig>
        break;
 8006b0a:	e002      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006b10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	; (8006c94 <TIM_Base_SetConfig+0x104>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <TIM_Base_SetConfig+0x38>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d00b      	beq.n	8006bc8 <TIM_Base_SetConfig+0x38>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a39      	ldr	r2, [pc, #228]	; (8006c98 <TIM_Base_SetConfig+0x108>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_Base_SetConfig+0x38>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a38      	ldr	r2, [pc, #224]	; (8006c9c <TIM_Base_SetConfig+0x10c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_Base_SetConfig+0x38>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <TIM_Base_SetConfig+0x110>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d108      	bne.n	8006bda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <TIM_Base_SetConfig+0x104>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01b      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be8:	d017      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <TIM_Base_SetConfig+0x108>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <TIM_Base_SetConfig+0x10c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00f      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <TIM_Base_SetConfig+0x110>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a27      	ldr	r2, [pc, #156]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0x8a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a25      	ldr	r2, [pc, #148]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a10      	ldr	r2, [pc, #64]	; (8006c94 <TIM_Base_SetConfig+0x104>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00f      	beq.n	8006c78 <TIM_Base_SetConfig+0xe8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a11      	ldr	r2, [pc, #68]	; (8006ca0 <TIM_Base_SetConfig+0x110>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <TIM_Base_SetConfig+0xe8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d007      	beq.n	8006c78 <TIM_Base_SetConfig+0xe8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_Base_SetConfig+0xe8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d103      	bne.n	8006c80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	615a      	str	r2, [r3, #20]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f023 0201 	bic.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 0302 	bic.w	r3, r3, #2
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <TIM_OC1_SetConfig+0x10c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00f      	beq.n	8006d30 <TIM_OC1_SetConfig+0x80>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <TIM_OC1_SetConfig+0x110>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_OC1_SetConfig+0x80>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <TIM_OC1_SetConfig+0x114>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_OC1_SetConfig+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <TIM_OC1_SetConfig+0x118>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC1_SetConfig+0x80>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <TIM_OC1_SetConfig+0x11c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10c      	bne.n	8006d4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 0308 	bic.w	r3, r3, #8
 8006d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 0304 	bic.w	r3, r3, #4
 8006d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <TIM_OC1_SetConfig+0x10c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00f      	beq.n	8006d72 <TIM_OC1_SetConfig+0xc2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <TIM_OC1_SetConfig+0x110>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <TIM_OC1_SetConfig+0xc2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <TIM_OC1_SetConfig+0x114>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <TIM_OC1_SetConfig+0xc2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <TIM_OC1_SetConfig+0x118>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_OC1_SetConfig+0xc2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a17      	ldr	r2, [pc, #92]	; (8006dcc <TIM_OC1_SetConfig+0x11c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d111      	bne.n	8006d96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0210 	bic.w	r2, r3, #16
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0320 	bic.w	r3, r3, #32
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <TIM_OC2_SetConfig+0x100>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC2_SetConfig+0x6c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <TIM_OC2_SetConfig+0x104>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10d      	bne.n	8006e58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ed0 <TIM_OC2_SetConfig+0x100>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_OC2_SetConfig+0xb0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <TIM_OC2_SetConfig+0x104>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_OC2_SetConfig+0xb0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1b      	ldr	r2, [pc, #108]	; (8006ed8 <TIM_OC2_SetConfig+0x108>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_OC2_SetConfig+0xb0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1a      	ldr	r2, [pc, #104]	; (8006edc <TIM_OC2_SetConfig+0x10c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC2_SetConfig+0xb0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <TIM_OC2_SetConfig+0x110>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d113      	bne.n	8006ea8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e86:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <TIM_OC3_SetConfig+0xfc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC3_SetConfig+0x6a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a26      	ldr	r2, [pc, #152]	; (8006fe4 <TIM_OC3_SetConfig+0x100>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d10d      	bne.n	8006f6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f68:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <TIM_OC3_SetConfig+0xfc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00f      	beq.n	8006f92 <TIM_OC3_SetConfig+0xae>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <TIM_OC3_SetConfig+0x100>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00b      	beq.n	8006f92 <TIM_OC3_SetConfig+0xae>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <TIM_OC3_SetConfig+0x104>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <TIM_OC3_SetConfig+0xae>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <TIM_OC3_SetConfig+0x108>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_OC3_SetConfig+0xae>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <TIM_OC3_SetConfig+0x10c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d113      	bne.n	8006fba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40013400 	.word	0x40013400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800

08006ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	031b      	lsls	r3, r3, #12
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <TIM_OC4_SetConfig+0xc0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00f      	beq.n	8007078 <TIM_OC4_SetConfig+0x84>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <TIM_OC4_SetConfig+0xc4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_OC4_SetConfig+0x84>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a16      	ldr	r2, [pc, #88]	; (80070bc <TIM_OC4_SetConfig+0xc8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_OC4_SetConfig+0x84>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <TIM_OC4_SetConfig+0xcc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC4_SetConfig+0x84>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <TIM_OC4_SetConfig+0xd0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d109      	bne.n	800708c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800707e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	019b      	lsls	r3, r3, #6
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	621a      	str	r2, [r3, #32]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800710c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a17      	ldr	r2, [pc, #92]	; (800717c <TIM_OC5_SetConfig+0xb4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_OC5_SetConfig+0x7a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a16      	ldr	r2, [pc, #88]	; (8007180 <TIM_OC5_SetConfig+0xb8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_OC5_SetConfig+0x7a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a15      	ldr	r2, [pc, #84]	; (8007184 <TIM_OC5_SetConfig+0xbc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_OC5_SetConfig+0x7a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC5_SetConfig+0xc0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC5_SetConfig+0x7a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <TIM_OC5_SetConfig+0xc4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d109      	bne.n	8007156 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40013400 	.word	0x40013400
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800

08007190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	051b      	lsls	r3, r3, #20
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <TIM_OC6_SetConfig+0xb8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00f      	beq.n	800720c <TIM_OC6_SetConfig+0x7c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <TIM_OC6_SetConfig+0xbc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00b      	beq.n	800720c <TIM_OC6_SetConfig+0x7c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a16      	ldr	r2, [pc, #88]	; (8007250 <TIM_OC6_SetConfig+0xc0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <TIM_OC6_SetConfig+0x7c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a15      	ldr	r2, [pc, #84]	; (8007254 <TIM_OC6_SetConfig+0xc4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_OC6_SetConfig+0x7c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <TIM_OC6_SetConfig+0xc8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d109      	bne.n	8007220 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	029b      	lsls	r3, r3, #10
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800

0800725c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0201 	bic.w	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f023 030a 	bic.w	r3, r3, #10
 8007298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b087      	sub	sp, #28
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f023 0210 	bic.w	r2, r3, #16
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	f043 0307 	orr.w	r3, r3, #7
 800733c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	609a      	str	r2, [r3, #8]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	021a      	lsls	r2, r3, #8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	431a      	orrs	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	609a      	str	r2, [r3, #8]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e063      	b.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a2b      	ldr	r2, [pc, #172]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2a      	ldr	r2, [pc, #168]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d108      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1b      	ldr	r2, [pc, #108]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741a:	d013      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a18      	ldr	r2, [pc, #96]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a12      	ldr	r2, [pc, #72]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a13      	ldr	r2, [pc, #76]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d10c      	bne.n	800745e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40014000 	.word	0x40014000

08007490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007502:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	b29b      	uxth	r3, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	4013      	ands	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007530:	b084      	sub	sp, #16
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	f107 0014 	add.w	r0, r7, #20
 800753e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	b004      	add	sp, #16
 8007570:	4770      	bx	lr
	...

08007574 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b09b      	sub	sp, #108	; 0x6c
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d81f      	bhi.n	80075e6 <USB_ActivateEndpoint+0x72>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <USB_ActivateEndpoint+0x38>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075ef 	.word	0x080075ef
 80075b8:	080075cb 	.word	0x080075cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075c8:	e012      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075d6:	e00b      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075e4:	e004      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075ec:	e000      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>
      break;
 80075ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	b21b      	sxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	b21a      	sxth	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b21b      	sxth	r3, r3
 8007632:	4313      	orrs	r3, r2
 8007634:	b21b      	sxth	r3, r3
 8007636:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	7b1b      	ldrb	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8149 	bne.w	80078f8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8084 	beq.w	8007778 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767a:	b29b      	uxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	81fb      	strh	r3, [r7, #14]
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <USB_ActivateEndpoint+0x180>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	81bb      	strh	r3, [r7, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	89bb      	ldrh	r3, [r7, #12]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	78db      	ldrb	r3, [r3, #3]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d020      	beq.n	800773e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007712:	813b      	strh	r3, [r7, #8]
 8007714:	893b      	ldrh	r3, [r7, #8]
 8007716:	f083 0320 	eor.w	r3, r3, #32
 800771a:	813b      	strh	r3, [r7, #8]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	893b      	ldrh	r3, [r7, #8]
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
 800773c:	e27f      	b.n	8007c3e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	897b      	ldrh	r3, [r7, #10]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
 8007776:	e262      	b.n	8007c3e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	4413      	add	r3, r2
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	011a      	lsls	r2, r3, #4
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	4413      	add	r3, r2
 8007796:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	4413      	add	r3, r2
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ce:	623b      	str	r3, [r7, #32]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d112      	bne.n	80077fe <USB_ActivateEndpoint+0x28a>
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e02f      	b.n	800785e <USB_ActivateEndpoint+0x2ea>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b3e      	cmp	r3, #62	; 0x3e
 8007804:	d813      	bhi.n	800782e <USB_ActivateEndpoint+0x2ba>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	663b      	str	r3, [r7, #96]	; 0x60
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <USB_ActivateEndpoint+0x2ac>
 800781a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781c:	3301      	adds	r3, #1
 800781e:	663b      	str	r3, [r7, #96]	; 0x60
 8007820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007822:	b29b      	uxth	r3, r3
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	b29a      	uxth	r2, r3
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e017      	b.n	800785e <USB_ActivateEndpoint+0x2ea>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	663b      	str	r3, [r7, #96]	; 0x60
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USB_ActivateEndpoint+0x2d4>
 8007842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007844:	3b01      	subs	r3, #1
 8007846:	663b      	str	r3, [r7, #96]	; 0x60
 8007848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784a:	b29b      	uxth	r3, r3
 800784c:	029b      	lsls	r3, r3, #10
 800784e:	b29b      	uxth	r3, r3
 8007850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007858:	b29a      	uxth	r2, r3
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	83fb      	strh	r3, [r7, #30]
 800786c:	8bfb      	ldrh	r3, [r7, #30]
 800786e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01b      	beq.n	80078ae <USB_ActivateEndpoint+0x33a>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	83bb      	strh	r3, [r7, #28]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	8bbb      	ldrh	r3, [r7, #28]
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	837b      	strh	r3, [r7, #26]
 80078c6:	8b7b      	ldrh	r3, [r7, #26]
 80078c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078cc:	837b      	strh	r3, [r7, #26]
 80078ce:	8b7b      	ldrh	r3, [r7, #26]
 80078d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078d4:	837b      	strh	r3, [r7, #26]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	8b7b      	ldrh	r3, [r7, #26]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
 80078f6:	e1a2      	b.n	8007c3e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007928:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800792c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007930:	b29b      	uxth	r3, r3
 8007932:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65bb      	str	r3, [r7, #88]	; 0x58
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007944:	4413      	add	r3, r2
 8007946:	65bb      	str	r3, [r7, #88]	; 0x58
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	011a      	lsls	r2, r3, #4
 800794e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007950:	4413      	add	r3, r2
 8007952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007956:	657b      	str	r3, [r7, #84]	; 0x54
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	891b      	ldrh	r3, [r3, #8]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	b29b      	uxth	r3, r3
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	653b      	str	r3, [r7, #80]	; 0x50
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007978:	4413      	add	r3, r2
 800797a:	653b      	str	r3, [r7, #80]	; 0x50
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	011a      	lsls	r2, r3, #4
 8007982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007984:	4413      	add	r3, r2
 8007986:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	895b      	ldrh	r3, [r3, #10]
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	b29b      	uxth	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8091 	bne.w	8007ac8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80079b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01b      	beq.n	80079f6 <USB_ActivateEndpoint+0x482>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d01b      	beq.n	8007a46 <USB_ActivateEndpoint+0x4d2>
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	441a      	add	r2, r3
 8007a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	441a      	add	r2, r3
 8007a78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa4:	867b      	strh	r3, [r7, #50]	; 0x32
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	441a      	add	r2, r3
 8007ab0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]
 8007ac6:	e0ba      	b.n	8007c3e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ad8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01d      	beq.n	8007b20 <USB_ActivateEndpoint+0x5ac>
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	441a      	add	r2, r3
 8007b08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01d      	beq.n	8007b78 <USB_ActivateEndpoint+0x604>
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	441a      	add	r2, r3
 8007b60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	78db      	ldrb	r3, [r3, #3]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d024      	beq.n	8007bca <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b9e:	f083 0320 	eor.w	r3, r3, #32
 8007ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	8013      	strh	r3, [r2, #0]
 8007bc8:	e01d      	b.n	8007c06 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	441a      	add	r2, r3
 8007bee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	441a      	add	r2, r3
 8007c28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	376c      	adds	r7, #108	; 0x6c
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop

08007c50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b08d      	sub	sp, #52	; 0x34
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	7b1b      	ldrb	r3, [r3, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 808e 	bne.w	8007d80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d044      	beq.n	8007cf6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	81bb      	strh	r3, [r7, #12]
 8007c7a:	89bb      	ldrh	r3, [r7, #12]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01b      	beq.n	8007cbc <USB_DeactivateEndpoint+0x6c>
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9a:	817b      	strh	r3, [r7, #10]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	897b      	ldrh	r3, [r7, #10]
 8007ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	813b      	strh	r3, [r7, #8]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	441a      	add	r2, r3
 8007cde:	893b      	ldrh	r3, [r7, #8]
 8007ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	8013      	strh	r3, [r2, #0]
 8007cf4:	e192      	b.n	800801c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	827b      	strh	r3, [r7, #18]
 8007d04:	8a7b      	ldrh	r3, [r7, #18]
 8007d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01b      	beq.n	8007d46 <USB_DeactivateEndpoint+0xf6>
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	823b      	strh	r3, [r7, #16]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	8a3b      	ldrh	r3, [r7, #16]
 8007d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5c:	81fb      	strh	r3, [r7, #14]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8013      	strh	r3, [r2, #0]
 8007d7e:	e14d      	b.n	800801c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f040 80a5 	bne.w	8007ed4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	843b      	strh	r3, [r7, #32]
 8007d98:	8c3b      	ldrh	r3, [r7, #32]
 8007d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01b      	beq.n	8007dda <USB_DeactivateEndpoint+0x18a>
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	83fb      	strh	r3, [r7, #30]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	8bfb      	ldrh	r3, [r7, #30]
 8007dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	83bb      	strh	r3, [r7, #28]
 8007de8:	8bbb      	ldrh	r3, [r7, #28]
 8007dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01b      	beq.n	8007e2a <USB_DeactivateEndpoint+0x1da>
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e08:	837b      	strh	r3, [r7, #26]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	8b7b      	ldrh	r3, [r7, #26]
 8007e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e40:	833b      	strh	r3, [r7, #24]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	8b3b      	ldrh	r3, [r7, #24]
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e78:	82fb      	strh	r3, [r7, #22]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	441a      	add	r2, r3
 8007e84:	8afb      	ldrh	r3, [r7, #22]
 8007e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	82bb      	strh	r3, [r7, #20]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	8abb      	ldrh	r3, [r7, #20]
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]
 8007ed2:	e0a3      	b.n	800801c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01b      	beq.n	8007f24 <USB_DeactivateEndpoint+0x2d4>
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01b      	beq.n	8007f74 <USB_DeactivateEndpoint+0x324>
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f52:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	441a      	add	r2, r3
 8007f5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	441a      	add	r2, r3
 8007f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffa:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	441a      	add	r2, r3
 8008006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008018:	b29b      	uxth	r3, r3
 800801a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3734      	adds	r7, #52	; 0x34
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b0c4      	sub	sp, #272	; 0x110
 800802e:	af00      	add	r7, sp, #0
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	6018      	str	r0, [r3, #0]
 8008034:	463b      	mov	r3, r7
 8008036:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008038:	463b      	mov	r3, r7
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	2b01      	cmp	r3, #1
 8008040:	f040 8557 	bne.w	8008af2 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	463b      	mov	r3, r7
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	429a      	cmp	r2, r3
 8008052:	d905      	bls.n	8008060 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800805e:	e004      	b.n	800806a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008060:	463b      	mov	r3, r7
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	7b1b      	ldrb	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d12c      	bne.n	80080ce <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008074:	463b      	mov	r3, r7
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6959      	ldr	r1, [r3, #20]
 800807a:	463b      	mov	r3, r7
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	88da      	ldrh	r2, [r3, #6]
 8008080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008084:	b29b      	uxth	r3, r3
 8008086:	1d38      	adds	r0, r7, #4
 8008088:	6800      	ldr	r0, [r0, #0]
 800808a:	f001 fa1c 	bl	80094c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	1d3b      	adds	r3, r7, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	4413      	add	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	463b      	mov	r3, r7
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	011a      	lsls	r2, r3, #4
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080b6:	f107 0310 	add.w	r3, r7, #16
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	f107 0310 	add.w	r3, r7, #16
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	f000 bcdd 	b.w	8008a88 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080ce:	463b      	mov	r3, r7
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	78db      	ldrb	r3, [r3, #3]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	f040 8347 	bne.w	8008768 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080da:	463b      	mov	r3, r7
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6a1a      	ldr	r2, [r3, #32]
 80080e0:	463b      	mov	r3, r7
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	f240 82eb 	bls.w	80086c2 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800810a:	1d3b      	adds	r3, r7, #4
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	463b      	mov	r3, r7
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800811c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008124:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812c:	b29b      	uxth	r3, r3
 800812e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008130:	463b      	mov	r3, r7
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6a1a      	ldr	r2, [r3, #32]
 8008136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	463b      	mov	r3, r7
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	463b      	mov	r3, r7
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8159 	beq.w	8008410 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d164      	bne.n	8008238 <USB_EPStartXfer+0x20e>
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	4413      	add	r3, r2
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008186:	463b      	mov	r3, r7
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	011a      	lsls	r2, r3, #4
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	4413      	add	r3, r2
 8008192:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
 8008198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d112      	bne.n	80081c6 <USB_EPStartXfer+0x19c>
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e054      	b.n	8008270 <USB_EPStartXfer+0x246>
 80081c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ca:	2b3e      	cmp	r3, #62	; 0x3e
 80081cc:	d817      	bhi.n	80081fe <USB_EPStartXfer+0x1d4>
 80081ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <USB_EPStartXfer+0x1c4>
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e8:	3301      	adds	r3, #1
 80081ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e038      	b.n	8008270 <USB_EPStartXfer+0x246>
 80081fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <USB_EPStartXfer+0x1f4>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	3b01      	subs	r3, #1
 800821a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008230:	b29a      	uxth	r2, r3
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e01b      	b.n	8008270 <USB_EPStartXfer+0x246>
 8008238:	463b      	mov	r3, r7
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d116      	bne.n	8008270 <USB_EPStartXfer+0x246>
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824a:	b29b      	uxth	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	4413      	add	r3, r2
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
 8008254:	463b      	mov	r3, r7
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	011a      	lsls	r2, r3, #4
 800825c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825e:	4413      	add	r3, r2
 8008260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008264:	633b      	str	r3, [r7, #48]	; 0x30
 8008266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826a:	b29a      	uxth	r2, r3
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008270:	463b      	mov	r3, r7
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	895b      	ldrh	r3, [r3, #10]
 8008276:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800827a:	463b      	mov	r3, r7
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6959      	ldr	r1, [r3, #20]
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008284:	b29b      	uxth	r3, r3
 8008286:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800828a:	1d38      	adds	r0, r7, #4
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f001 f91a 	bl	80094c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008292:	463b      	mov	r3, r7
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800829c:	441a      	add	r2, r3
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80082a4:	463b      	mov	r3, r7
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a1a      	ldr	r2, [r3, #32]
 80082aa:	463b      	mov	r3, r7
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d909      	bls.n	80082c8 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80082b4:	463b      	mov	r3, r7
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	463b      	mov	r3, r7
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	621a      	str	r2, [r3, #32]
 80082c6:	e008      	b.n	80082da <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80082c8:	463b      	mov	r3, r7
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2200      	movs	r2, #0
 80082d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082da:	463b      	mov	r3, r7
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d164      	bne.n	80083ae <USB_EPStartXfer+0x384>
 80082e4:	1d3b      	adds	r3, r7, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	1d3b      	adds	r3, r7, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	463b      	mov	r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	011a      	lsls	r2, r3, #4
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d112      	bne.n	800833c <USB_EPStartXfer+0x312>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008320:	b29a      	uxth	r2, r3
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008334:	b29a      	uxth	r2, r3
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	e057      	b.n	80083ec <USB_EPStartXfer+0x3c2>
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008340:	2b3e      	cmp	r3, #62	; 0x3e
 8008342:	d817      	bhi.n	8008374 <USB_EPStartXfer+0x34a>
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800834e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <USB_EPStartXfer+0x33a>
 800835a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800835e:	3301      	adds	r3, #1
 8008360:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008364:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008368:	b29b      	uxth	r3, r3
 800836a:	029b      	lsls	r3, r3, #10
 800836c:	b29a      	uxth	r2, r3
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e03b      	b.n	80083ec <USB_EPStartXfer+0x3c2>
 8008374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800837e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008382:	f003 031f 	and.w	r3, r3, #31
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <USB_EPStartXfer+0x36a>
 800838a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800838e:	3b01      	subs	r3, #1
 8008390:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008394:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e01e      	b.n	80083ec <USB_EPStartXfer+0x3c2>
 80083ae:	463b      	mov	r3, r7
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d119      	bne.n	80083ec <USB_EPStartXfer+0x3c2>
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	4413      	add	r3, r2
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
 80083d0:	463b      	mov	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	011a      	lsls	r2, r3, #4
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	4413      	add	r3, r2
 80083dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083ec:	463b      	mov	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	891b      	ldrh	r3, [r3, #8]
 80083f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083f6:	463b      	mov	r3, r7
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6959      	ldr	r1, [r3, #20]
 80083fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008400:	b29b      	uxth	r3, r3
 8008402:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008406:	1d38      	adds	r0, r7, #4
 8008408:	6800      	ldr	r0, [r0, #0]
 800840a:	f001 f85c 	bl	80094c6 <USB_WritePMA>
 800840e:	e33b      	b.n	8008a88 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008410:	463b      	mov	r3, r7
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d164      	bne.n	80084e4 <USB_EPStartXfer+0x4ba>
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008428:	b29b      	uxth	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842e:	4413      	add	r3, r2
 8008430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008432:	463b      	mov	r3, r7
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	011a      	lsls	r2, r3, #4
 800843a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843c:	4413      	add	r3, r2
 800843e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008442:	64bb      	str	r3, [r7, #72]	; 0x48
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d112      	bne.n	8008472 <USB_EPStartXfer+0x448>
 800844c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008456:	b29a      	uxth	r2, r3
 8008458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846a:	b29a      	uxth	r2, r3
 800846c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e057      	b.n	8008522 <USB_EPStartXfer+0x4f8>
 8008472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008476:	2b3e      	cmp	r3, #62	; 0x3e
 8008478:	d817      	bhi.n	80084aa <USB_EPStartXfer+0x480>
 800847a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <USB_EPStartXfer+0x470>
 8008490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008494:	3301      	adds	r3, #1
 8008496:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800849a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849e:	b29b      	uxth	r3, r3
 80084a0:	029b      	lsls	r3, r3, #10
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	e03b      	b.n	8008522 <USB_EPStartXfer+0x4f8>
 80084aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <USB_EPStartXfer+0x4a0>
 80084c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c4:	3b01      	subs	r3, #1
 80084c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	029b      	lsls	r3, r3, #10
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084dc:	b29a      	uxth	r2, r3
 80084de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	e01e      	b.n	8008522 <USB_EPStartXfer+0x4f8>
 80084e4:	463b      	mov	r3, r7
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	785b      	ldrb	r3, [r3, #1]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d119      	bne.n	8008522 <USB_EPStartXfer+0x4f8>
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	657b      	str	r3, [r7, #84]	; 0x54
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008502:	4413      	add	r3, r2
 8008504:	657b      	str	r3, [r7, #84]	; 0x54
 8008506:	463b      	mov	r3, r7
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	011a      	lsls	r2, r3, #4
 800850e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008510:	4413      	add	r3, r2
 8008512:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008516:	653b      	str	r3, [r7, #80]	; 0x50
 8008518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800851c:	b29a      	uxth	r2, r3
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008522:	463b      	mov	r3, r7
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	891b      	ldrh	r3, [r3, #8]
 8008528:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800852c:	463b      	mov	r3, r7
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6959      	ldr	r1, [r3, #20]
 8008532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008536:	b29b      	uxth	r3, r3
 8008538:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800853c:	1d38      	adds	r0, r7, #4
 800853e:	6800      	ldr	r0, [r0, #0]
 8008540:	f000 ffc1 	bl	80094c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008544:	463b      	mov	r3, r7
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800854e:	441a      	add	r2, r3
 8008550:	463b      	mov	r3, r7
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008556:	463b      	mov	r3, r7
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	429a      	cmp	r2, r3
 8008564:	d909      	bls.n	800857a <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008566:	463b      	mov	r3, r7
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6a1a      	ldr	r2, [r3, #32]
 800856c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008570:	1ad2      	subs	r2, r2, r3
 8008572:	463b      	mov	r3, r7
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	621a      	str	r2, [r3, #32]
 8008578:	e008      	b.n	800858c <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800857a:	463b      	mov	r3, r7
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008584:	463b      	mov	r3, r7
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	647b      	str	r3, [r7, #68]	; 0x44
 8008592:	463b      	mov	r3, r7
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d164      	bne.n	8008666 <USB_EPStartXfer+0x63c>
 800859c:	1d3b      	adds	r3, r7, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a2:	1d3b      	adds	r3, r7, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	4413      	add	r3, r2
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b4:	463b      	mov	r3, r7
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	011a      	lsls	r2, r3, #4
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085be:	4413      	add	r3, r2
 80085c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d112      	bne.n	80085f4 <USB_EPStartXfer+0x5ca>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085d8:	b29a      	uxth	r2, r3
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	801a      	strh	r2, [r3, #0]
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	801a      	strh	r2, [r3, #0]
 80085f2:	e054      	b.n	800869e <USB_EPStartXfer+0x674>
 80085f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f8:	2b3e      	cmp	r3, #62	; 0x3e
 80085fa:	d817      	bhi.n	800862c <USB_EPStartXfer+0x602>
 80085fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <USB_EPStartXfer+0x5f2>
 8008612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008616:	3301      	adds	r3, #1
 8008618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800861c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008620:	b29b      	uxth	r3, r3
 8008622:	029b      	lsls	r3, r3, #10
 8008624:	b29a      	uxth	r2, r3
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	e038      	b.n	800869e <USB_EPStartXfer+0x674>
 800862c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USB_EPStartXfer+0x622>
 8008642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008646:	3b01      	subs	r3, #1
 8008648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800864c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008650:	b29b      	uxth	r3, r3
 8008652:	029b      	lsls	r3, r3, #10
 8008654:	b29b      	uxth	r3, r3
 8008656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865e:	b29a      	uxth	r2, r3
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	e01b      	b.n	800869e <USB_EPStartXfer+0x674>
 8008666:	463b      	mov	r3, r7
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d116      	bne.n	800869e <USB_EPStartXfer+0x674>
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008678:	b29b      	uxth	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	4413      	add	r3, r2
 8008680:	647b      	str	r3, [r7, #68]	; 0x44
 8008682:	463b      	mov	r3, r7
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	011a      	lsls	r2, r3, #4
 800868a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868c:	4413      	add	r3, r2
 800868e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008692:	643b      	str	r3, [r7, #64]	; 0x40
 8008694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008698:	b29a      	uxth	r2, r3
 800869a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800869e:	463b      	mov	r3, r7
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	895b      	ldrh	r3, [r3, #10]
 80086a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086a8:	463b      	mov	r3, r7
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6959      	ldr	r1, [r3, #20]
 80086ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80086b8:	1d38      	adds	r0, r7, #4
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	f000 ff03 	bl	80094c6 <USB_WritePMA>
 80086c0:	e1e2      	b.n	8008a88 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086c2:	463b      	mov	r3, r7
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	463b      	mov	r3, r7
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	463b      	mov	r3, r7
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80086fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870c:	b29b      	uxth	r3, r3
 800870e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	663b      	str	r3, [r7, #96]	; 0x60
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800871e:	b29b      	uxth	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008724:	4413      	add	r3, r2
 8008726:	663b      	str	r3, [r7, #96]	; 0x60
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	011a      	lsls	r2, r3, #4
 8008730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008732:	4413      	add	r3, r2
 8008734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800873a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800873e:	b29a      	uxth	r2, r3
 8008740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008742:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008744:	463b      	mov	r3, r7
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	891b      	ldrh	r3, [r3, #8]
 800874a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800874e:	463b      	mov	r3, r7
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6959      	ldr	r1, [r3, #20]
 8008754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008758:	b29b      	uxth	r3, r3
 800875a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800875e:	1d38      	adds	r0, r7, #4
 8008760:	6800      	ldr	r0, [r0, #0]
 8008762:	f000 feb0 	bl	80094c6 <USB_WritePMA>
 8008766:	e18f      	b.n	8008a88 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008768:	1d3b      	adds	r3, r7, #4
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	463b      	mov	r3, r7
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 808f 	beq.w	80088a2 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008784:	1d3b      	adds	r3, r7, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	67bb      	str	r3, [r7, #120]	; 0x78
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d164      	bne.n	800885e <USB_EPStartXfer+0x834>
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	673b      	str	r3, [r7, #112]	; 0x70
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a8:	4413      	add	r3, r2
 80087aa:	673b      	str	r3, [r7, #112]	; 0x70
 80087ac:	463b      	mov	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	011a      	lsls	r2, r3, #4
 80087b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b6:	4413      	add	r3, r2
 80087b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d112      	bne.n	80087ec <USB_EPStartXfer+0x7c2>
 80087c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	e054      	b.n	8008896 <USB_EPStartXfer+0x86c>
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f0:	2b3e      	cmp	r3, #62	; 0x3e
 80087f2:	d817      	bhi.n	8008824 <USB_EPStartXfer+0x7fa>
 80087f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USB_EPStartXfer+0x7ea>
 800880a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880e:	3301      	adds	r3, #1
 8008810:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	b29b      	uxth	r3, r3
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	b29a      	uxth	r2, r3
 800881e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008820:	801a      	strh	r2, [r3, #0]
 8008822:	e038      	b.n	8008896 <USB_EPStartXfer+0x86c>
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800882e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <USB_EPStartXfer+0x81a>
 800883a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883e:	3b01      	subs	r3, #1
 8008840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	b29b      	uxth	r3, r3
 800884a:	029b      	lsls	r3, r3, #10
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008856:	b29a      	uxth	r2, r3
 8008858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e01b      	b.n	8008896 <USB_EPStartXfer+0x86c>
 800885e:	463b      	mov	r3, r7
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d116      	bne.n	8008896 <USB_EPStartXfer+0x86c>
 8008868:	1d3b      	adds	r3, r7, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008870:	b29b      	uxth	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008876:	4413      	add	r3, r2
 8008878:	67bb      	str	r3, [r7, #120]	; 0x78
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	011a      	lsls	r2, r3, #4
 8008882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008884:	4413      	add	r3, r2
 8008886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800888a:	677b      	str	r3, [r7, #116]	; 0x74
 800888c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008890:	b29a      	uxth	r2, r3
 8008892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	895b      	ldrh	r3, [r3, #10]
 800889c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80088a0:	e097      	b.n	80089d2 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088a2:	463b      	mov	r3, r7
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d168      	bne.n	800897e <USB_EPStartXfer+0x954>
 80088ac:	1d3b      	adds	r3, r7, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088bc:	b29b      	uxth	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088c4:	4413      	add	r3, r2
 80088c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	011a      	lsls	r2, r3, #4
 80088d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088d6:	4413      	add	r3, r2
 80088d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d112      	bne.n	800890c <USB_EPStartXfer+0x8e2>
 80088e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008904:	b29a      	uxth	r2, r3
 8008906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	e05d      	b.n	80089c8 <USB_EPStartXfer+0x99e>
 800890c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008910:	2b3e      	cmp	r3, #62	; 0x3e
 8008912:	d817      	bhi.n	8008944 <USB_EPStartXfer+0x91a>
 8008914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800891e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <USB_EPStartXfer+0x90a>
 800892a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800892e:	3301      	adds	r3, #1
 8008930:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008934:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008938:	b29b      	uxth	r3, r3
 800893a:	029b      	lsls	r3, r3, #10
 800893c:	b29a      	uxth	r2, r3
 800893e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	e041      	b.n	80089c8 <USB_EPStartXfer+0x99e>
 8008944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800894e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	2b00      	cmp	r3, #0
 8008958:	d104      	bne.n	8008964 <USB_EPStartXfer+0x93a>
 800895a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800895e:	3b01      	subs	r3, #1
 8008960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29b      	uxth	r3, r3
 800896e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008976:	b29a      	uxth	r2, r3
 8008978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800897a:	801a      	strh	r2, [r3, #0]
 800897c:	e024      	b.n	80089c8 <USB_EPStartXfer+0x99e>
 800897e:	463b      	mov	r3, r7
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d11f      	bne.n	80089c8 <USB_EPStartXfer+0x99e>
 8008988:	1d3b      	adds	r3, r7, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008990:	1d3b      	adds	r3, r7, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008998:	b29b      	uxth	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a0:	4413      	add	r3, r2
 80089a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	011a      	lsls	r2, r3, #4
 80089ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089b2:	4413      	add	r3, r2
 80089b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089c8:	463b      	mov	r3, r7
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	891b      	ldrh	r3, [r3, #8]
 80089ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6959      	ldr	r1, [r3, #20]
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80089e2:	1d38      	adds	r0, r7, #4
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	f000 fd6e 	bl	80094c6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80089ea:	463b      	mov	r3, r7
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d122      	bne.n	8008a3a <USB_EPStartXfer+0xa10>
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	463b      	mov	r3, r7
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	463b      	mov	r3, r7
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	441a      	add	r2, r3
 8008a20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	8013      	strh	r3, [r2, #0]
 8008a38:	e026      	b.n	8008a88 <USB_EPStartXfer+0xa5e>
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d121      	bne.n	8008a88 <USB_EPStartXfer+0xa5e>
 8008a44:	1d3b      	adds	r3, r7, #4
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	463b      	mov	r3, r7
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	441a      	add	r2, r3
 8008a70:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a88:	1d3b      	adds	r3, r7, #4
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f107 020e 	add.w	r2, r7, #14
 8008a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa6:	8013      	strh	r3, [r2, #0]
 8008aa8:	f107 030e 	add.w	r3, r7, #14
 8008aac:	f107 020e 	add.w	r2, r7, #14
 8008ab0:	8812      	ldrh	r2, [r2, #0]
 8008ab2:	f082 0210 	eor.w	r2, r2, #16
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	f107 030e 	add.w	r3, r7, #14
 8008abc:	f107 020e 	add.w	r2, r7, #14
 8008ac0:	8812      	ldrh	r2, [r2, #0]
 8008ac2:	f082 0220 	eor.w	r2, r2, #32
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	463b      	mov	r3, r7
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	f107 030e 	add.w	r3, r7, #14
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	8013      	strh	r3, [r2, #0]
 8008af0:	e3b5      	b.n	800925e <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008af2:	463b      	mov	r3, r7
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	7b1b      	ldrb	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 8090 	bne.w	8008c1e <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008afe:	463b      	mov	r3, r7
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	463b      	mov	r3, r7
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d90e      	bls.n	8008b2c <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008b0e:	463b      	mov	r3, r7
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008b18:	463b      	mov	r3, r7
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	463b      	mov	r3, r7
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	619a      	str	r2, [r3, #24]
 8008b2a:	e008      	b.n	8008b3e <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b56:	4413      	add	r3, r2
 8008b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <USB_EPStartXfer+0xb7e>
 8008b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	e32c      	b.n	8009202 <USB_EPStartXfer+0x11d8>
 8008ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bac:	2b3e      	cmp	r3, #62	; 0x3e
 8008bae:	d818      	bhi.n	8008be2 <USB_EPStartXfer+0xbb8>
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USB_EPStartXfer+0xba6>
 8008bc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e30f      	b.n	8009202 <USB_EPStartXfer+0x11d8>
 8008be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USB_EPStartXfer+0xbd8>
 8008bf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	029b      	lsls	r3, r3, #10
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	e2f1      	b.n	8009202 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c1e:	463b      	mov	r3, r7
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	f040 818f 	bne.w	8008f48 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d175      	bne.n	8008d20 <USB_EPStartXfer+0xcf6>
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c3c:	1d3b      	adds	r3, r7, #4
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c52:	463b      	mov	r3, r7
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	011a      	lsls	r2, r3, #4
 8008c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c5e:	4413      	add	r3, r2
 8008c60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c68:	463b      	mov	r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d116      	bne.n	8008ca0 <USB_EPStartXfer+0xc76>
 8008c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e065      	b.n	8008d6c <USB_EPStartXfer+0xd42>
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca8:	d81a      	bhi.n	8008ce0 <USB_EPStartXfer+0xcb6>
 8008caa:	463b      	mov	r3, r7
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	085b      	lsrs	r3, r3, #1
 8008cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <USB_EPStartXfer+0xca4>
 8008cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	029b      	lsls	r3, r3, #10
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cdc:	801a      	strh	r2, [r3, #0]
 8008cde:	e045      	b.n	8008d6c <USB_EPStartXfer+0xd42>
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cec:	463b      	mov	r3, r7
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 031f 	and.w	r3, r3, #31
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <USB_EPStartXfer+0xcda>
 8008cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	029b      	lsls	r3, r3, #10
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	e025      	b.n	8008d6c <USB_EPStartXfer+0xd42>
 8008d20:	463b      	mov	r3, r7
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d120      	bne.n	8008d6c <USB_EPStartXfer+0xd42>
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d42:	4413      	add	r3, r2
 8008d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d48:	463b      	mov	r3, r7
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	011a      	lsls	r2, r3, #4
 8008d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d54:	4413      	add	r3, r2
 8008d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d5e:	463b      	mov	r3, r7
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d74:	463b      	mov	r3, r7
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	785b      	ldrb	r3, [r3, #1]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d175      	bne.n	8008e6a <USB_EPStartXfer+0xe40>
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d96:	4413      	add	r3, r2
 8008d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	011a      	lsls	r2, r3, #4
 8008da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db2:	463b      	mov	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d116      	bne.n	8008dea <USB_EPStartXfer+0xdc0>
 8008dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	e061      	b.n	8008eae <USB_EPStartXfer+0xe84>
 8008dea:	463b      	mov	r3, r7
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b3e      	cmp	r3, #62	; 0x3e
 8008df2:	d81a      	bhi.n	8008e2a <USB_EPStartXfer+0xe00>
 8008df4:	463b      	mov	r3, r7
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e00:	463b      	mov	r3, r7
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <USB_EPStartXfer+0xdee>
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	3301      	adds	r3, #1
 8008e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	029b      	lsls	r3, r3, #10
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e041      	b.n	8008eae <USB_EPStartXfer+0xe84>
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	095b      	lsrs	r3, r3, #5
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e36:	463b      	mov	r3, r7
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <USB_EPStartXfer+0xe24>
 8008e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	029b      	lsls	r3, r3, #10
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e021      	b.n	8008eae <USB_EPStartXfer+0xe84>
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d11c      	bne.n	8008eae <USB_EPStartXfer+0xe84>
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e84:	4413      	add	r3, r2
 8008e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	011a      	lsls	r2, r3, #4
 8008e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008eac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008eae:	463b      	mov	r3, r7
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 81a4 	beq.w	8009202 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ece:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <USB_EPStartXfer+0xebc>
 8008eda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10d      	bne.n	8008f02 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ee6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f040 8187 	bne.w	8009202 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ef4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 8180 	bne.w	8009202 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008f02:	1d3b      	adds	r3, r7, #4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008f20:	1d3b      	adds	r3, r7, #4
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	441a      	add	r2, r3
 8008f2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
 8008f46:	e15c      	b.n	8009202 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	78db      	ldrb	r3, [r3, #3]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	f040 8155 	bne.w	80091fe <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f54:	463b      	mov	r3, r7
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	463b      	mov	r3, r7
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d90e      	bls.n	8008f82 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008f64:	463b      	mov	r3, r7
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008f6e:	463b      	mov	r3, r7
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f78:	1ad2      	subs	r2, r2, r3
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	619a      	str	r2, [r3, #24]
 8008f80:	e008      	b.n	8008f94 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008f82:	463b      	mov	r3, r7
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2200      	movs	r2, #0
 8008f92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f94:	463b      	mov	r3, r7
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d16f      	bne.n	800907e <USB_EPStartXfer+0x1054>
 8008f9e:	1d3b      	adds	r3, r7, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	011a      	lsls	r2, r3, #4
 8008fc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fc8:	4413      	add	r3, r2
 8008fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d116      	bne.n	8009008 <USB_EPStartXfer+0xfde>
 8008fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e05f      	b.n	80090c8 <USB_EPStartXfer+0x109e>
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800900c:	2b3e      	cmp	r3, #62	; 0x3e
 800900e:	d818      	bhi.n	8009042 <USB_EPStartXfer+0x1018>
 8009010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USB_EPStartXfer+0x1006>
 8009026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800902a:	3301      	adds	r3, #1
 800902c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009034:	b29b      	uxth	r3, r3
 8009036:	029b      	lsls	r3, r3, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	e042      	b.n	80090c8 <USB_EPStartXfer+0x109e>
 8009042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009046:	095b      	lsrs	r3, r3, #5
 8009048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800904c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <USB_EPStartXfer+0x1038>
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905c:	3b01      	subs	r3, #1
 800905e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29b      	uxth	r3, r3
 800906c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009074:	b29a      	uxth	r2, r3
 8009076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800907a:	801a      	strh	r2, [r3, #0]
 800907c:	e024      	b.n	80090c8 <USB_EPStartXfer+0x109e>
 800907e:	463b      	mov	r3, r7
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d11f      	bne.n	80090c8 <USB_EPStartXfer+0x109e>
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090a0:	4413      	add	r3, r2
 80090a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	011a      	lsls	r2, r3, #4
 80090ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090b2:	4413      	add	r3, r2
 80090b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	1d3b      	adds	r3, r7, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090d0:	463b      	mov	r3, r7
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d16f      	bne.n	80091ba <USB_EPStartXfer+0x1190>
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090e2:	1d3b      	adds	r3, r7, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090f2:	4413      	add	r3, r2
 80090f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090f8:	463b      	mov	r3, r7
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	011a      	lsls	r2, r3, #4
 8009100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009104:	4413      	add	r3, r2
 8009106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800910a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d116      	bne.n	8009144 <USB_EPStartXfer+0x111a>
 8009116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009122:	b29a      	uxth	r2, r3
 8009124:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b29b      	uxth	r3, r3
 8009132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913a:	b29a      	uxth	r2, r3
 800913c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009140:	801a      	strh	r2, [r3, #0]
 8009142:	e05e      	b.n	8009202 <USB_EPStartXfer+0x11d8>
 8009144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009148:	2b3e      	cmp	r3, #62	; 0x3e
 800914a:	d818      	bhi.n	800917e <USB_EPStartXfer+0x1154>
 800914c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <USB_EPStartXfer+0x1142>
 8009162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009166:	3301      	adds	r3, #1
 8009168:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800916c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009170:	b29b      	uxth	r3, r3
 8009172:	029b      	lsls	r3, r3, #10
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e041      	b.n	8009202 <USB_EPStartXfer+0x11d8>
 800917e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <USB_EPStartXfer+0x1174>
 8009194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009198:	3b01      	subs	r3, #1
 800919a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800919e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	029b      	lsls	r3, r3, #10
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	e023      	b.n	8009202 <USB_EPStartXfer+0x11d8>
 80091ba:	463b      	mov	r3, r7
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d11e      	bne.n	8009202 <USB_EPStartXfer+0x11d8>
 80091c4:	1d3b      	adds	r3, r7, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091d4:	4413      	add	r3, r2
 80091d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091da:	463b      	mov	r3, r7
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	011a      	lsls	r2, r3, #4
 80091e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091e6:	4413      	add	r3, r2
 80091e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091fa:	801a      	strh	r2, [r3, #0]
 80091fc:	e001      	b.n	8009202 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e02e      	b.n	8009260 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	463b      	mov	r3, r7
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009220:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009224:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009228:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800922c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009234:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	463b      	mov	r3, r7
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	441a      	add	r2, r3
 8009246:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800924a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925a:	b29b      	uxth	r3, r3
 800925c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d020      	beq.n	80092be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009292:	81bb      	strh	r3, [r7, #12]
 8009294:	89bb      	ldrh	r3, [r7, #12]
 8009296:	f083 0310 	eor.w	r3, r3, #16
 800929a:	81bb      	strh	r3, [r7, #12]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	441a      	add	r2, r3
 80092a6:	89bb      	ldrh	r3, [r7, #12]
 80092a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	8013      	strh	r3, [r2, #0]
 80092bc:	e01f      	b.n	80092fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d4:	81fb      	strh	r3, [r7, #14]
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092dc:	81fb      	strh	r3, [r7, #14]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	441a      	add	r2, r3
 80092e8:	89fb      	ldrh	r3, [r7, #14]
 80092ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	7b1b      	ldrb	r3, [r3, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f040 809d 	bne.w	800945a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d04c      	beq.n	80093c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	823b      	strh	r3, [r7, #16]
 8009336:	8a3b      	ldrh	r3, [r7, #16]
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01b      	beq.n	8009378 <USB_EPClearStall+0x6c>
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	b29b      	uxth	r3, r3
 800934e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009356:	81fb      	strh	r3, [r7, #14]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	441a      	add	r2, r3
 8009362:	89fb      	ldrh	r3, [r7, #14]
 8009364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800936c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009374:	b29b      	uxth	r3, r3
 8009376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	78db      	ldrb	r3, [r3, #3]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d06c      	beq.n	800945a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009396:	81bb      	strh	r3, [r7, #12]
 8009398:	89bb      	ldrh	r3, [r7, #12]
 800939a:	f083 0320 	eor.w	r3, r3, #32
 800939e:	81bb      	strh	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	441a      	add	r2, r3
 80093aa:	89bb      	ldrh	r3, [r7, #12]
 80093ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093bc:	b29b      	uxth	r3, r3
 80093be:	8013      	strh	r3, [r2, #0]
 80093c0:	e04b      	b.n	800945a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	82fb      	strh	r3, [r7, #22]
 80093d0:	8afb      	ldrh	r3, [r7, #22]
 80093d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01b      	beq.n	8009412 <USB_EPClearStall+0x106>
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f0:	82bb      	strh	r3, [r7, #20]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	441a      	add	r2, r3
 80093fc:	8abb      	ldrh	r3, [r7, #20]
 80093fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800940a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940e:	b29b      	uxth	r3, r3
 8009410:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009428:	827b      	strh	r3, [r7, #18]
 800942a:	8a7b      	ldrh	r3, [r7, #18]
 800942c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009430:	827b      	strh	r3, [r7, #18]
 8009432:	8a7b      	ldrh	r3, [r7, #18]
 8009434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009438:	827b      	strh	r3, [r7, #18]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	441a      	add	r2, r3
 8009444:	8a7b      	ldrh	r3, [r7, #18]
 8009446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009456:	b29b      	uxth	r3, r3
 8009458:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2280      	movs	r2, #128	; 0x80
 800947e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094b8:	68fb      	ldr	r3, [r7, #12]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b08d      	sub	sp, #52	; 0x34
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	4611      	mov	r1, r2
 80094d2:	461a      	mov	r2, r3
 80094d4:	460b      	mov	r3, r1
 80094d6:	80fb      	strh	r3, [r7, #6]
 80094d8:	4613      	mov	r3, r2
 80094da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80094dc:	88bb      	ldrh	r3, [r7, #4]
 80094de:	3301      	adds	r3, #1
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094ec:	88fb      	ldrh	r3, [r7, #6]
 80094ee:	005a      	lsls	r2, r3, #1
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fe:	e01e      	b.n	800953e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	3301      	adds	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	021b      	lsls	r3, r3, #8
 8009514:	b29b      	uxth	r3, r3
 8009516:	461a      	mov	r2, r3
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	b29a      	uxth	r2, r3
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	3302      	adds	r3, #2
 800952a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	3302      	adds	r3, #2
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	3301      	adds	r3, #1
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	3b01      	subs	r3, #1
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1dd      	bne.n	8009500 <USB_WritePMA+0x3a>
  }
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	3734      	adds	r7, #52	; 0x34
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009552:	b480      	push	{r7}
 8009554:	b08b      	sub	sp, #44	; 0x2c
 8009556:	af00      	add	r7, sp, #0
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	60b9      	str	r1, [r7, #8]
 800955c:	4611      	mov	r1, r2
 800955e:	461a      	mov	r2, r3
 8009560:	460b      	mov	r3, r1
 8009562:	80fb      	strh	r3, [r7, #6]
 8009564:	4613      	mov	r3, r2
 8009566:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009568:	88bb      	ldrh	r3, [r7, #4]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	b29b      	uxth	r3, r3
 800956e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	005a      	lsls	r2, r3, #1
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009584:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
 800958a:	e01b      	b.n	80095c4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	3302      	adds	r3, #2
 8009598:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	3301      	adds	r3, #1
 80095a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3301      	adds	r3, #1
 80095b6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	3302      	adds	r3, #2
 80095bc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	3b01      	subs	r3, #1
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e0      	bne.n	800958c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095ca:	88bb      	ldrh	r3, [r7, #4]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	701a      	strb	r2, [r3, #0]
  }
}
 80095e6:	bf00      	nop
 80095e8:	372c      	adds	r7, #44	; 0x2c
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7c1b      	ldrb	r3, [r3, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d115      	bne.n	8009636 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800960a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800960e:	2202      	movs	r2, #2
 8009610:	2181      	movs	r1, #129	; 0x81
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 febf 	bl	800b396 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800961e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009622:	2202      	movs	r2, #2
 8009624:	2101      	movs	r1, #1
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 feb5 	bl	800b396 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009634:	e012      	b.n	800965c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	2202      	movs	r2, #2
 800963a:	2181      	movs	r1, #129	; 0x81
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 feaa 	bl	800b396 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009648:	2340      	movs	r3, #64	; 0x40
 800964a:	2202      	movs	r2, #2
 800964c:	2101      	movs	r1, #1
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 fea1 	bl	800b396 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800965c:	2308      	movs	r3, #8
 800965e:	2203      	movs	r2, #3
 8009660:	2182      	movs	r1, #130	; 0x82
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fe97 	bl	800b396 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800966e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009672:	f001 ffb9 	bl	800b5e8 <USBD_static_malloc>
 8009676:	4602      	mov	r2, r0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
 800968c:	e026      	b.n	80096dc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7c1b      	ldrb	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c2:	2101      	movs	r1, #1
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 ff58 	bl	800b57a <USBD_LL_PrepareReceive>
 80096ca:	e007      	b.n	80096dc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096d2:	2340      	movs	r3, #64	; 0x40
 80096d4:	2101      	movs	r1, #1
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 ff4f 	bl	800b57a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80096f6:	2181      	movs	r1, #129	; 0x81
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fe72 	bl	800b3e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009704:	2101      	movs	r1, #1
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fe6b 	bl	800b3e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009714:	2182      	movs	r1, #130	; 0x82
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fe63 	bl	800b3e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00e      	beq.n	800974a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973c:	4618      	mov	r0, r3
 800973e:	f001 ff61 	bl	800b604 <USBD_static_free>
    pdev->pClassData = NULL;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800977a:	2b00      	cmp	r3, #0
 800977c:	d039      	beq.n	80097f2 <USBD_CDC_Setup+0x9e>
 800977e:	2b20      	cmp	r3, #32
 8009780:	d17f      	bne.n	8009882 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	88db      	ldrh	r3, [r3, #6]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d029      	beq.n	80097de <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b25b      	sxtb	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	da11      	bge.n	80097b8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80097a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	88d2      	ldrh	r2, [r2, #6]
 80097a6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097a8:	6939      	ldr	r1, [r7, #16]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	88db      	ldrh	r3, [r3, #6]
 80097ae:	461a      	mov	r2, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 fa14 	bl	800abde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80097b6:	e06b      	b.n	8009890 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	785a      	ldrb	r2, [r3, #1]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	88db      	ldrh	r3, [r3, #6]
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097ce:	6939      	ldr	r1, [r7, #16]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	88db      	ldrh	r3, [r3, #6]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fa2f 	bl	800ac3a <USBD_CtlPrepareRx>
      break;
 80097dc:	e058      	b.n	8009890 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	7850      	ldrb	r0, [r2, #1]
 80097ea:	2200      	movs	r2, #0
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	4798      	blx	r3
      break;
 80097f0:	e04e      	b.n	8009890 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b0b      	cmp	r3, #11
 80097f8:	d02e      	beq.n	8009858 <USBD_CDC_Setup+0x104>
 80097fa:	2b0b      	cmp	r3, #11
 80097fc:	dc38      	bgt.n	8009870 <USBD_CDC_Setup+0x11c>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <USBD_CDC_Setup+0xb4>
 8009802:	2b0a      	cmp	r3, #10
 8009804:	d014      	beq.n	8009830 <USBD_CDC_Setup+0xdc>
 8009806:	e033      	b.n	8009870 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980e:	2b03      	cmp	r3, #3
 8009810:	d107      	bne.n	8009822 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	2202      	movs	r2, #2
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f9df 	bl	800abde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009820:	e02e      	b.n	8009880 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 f96f 	bl	800ab08 <USBD_CtlError>
            ret = USBD_FAIL;
 800982a:	2302      	movs	r3, #2
 800982c:	75fb      	strb	r3, [r7, #23]
          break;
 800982e:	e027      	b.n	8009880 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009836:	2b03      	cmp	r3, #3
 8009838:	d107      	bne.n	800984a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800983a:	f107 030f 	add.w	r3, r7, #15
 800983e:	2201      	movs	r2, #1
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f9cb 	bl	800abde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009848:	e01a      	b.n	8009880 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 f95b 	bl	800ab08 <USBD_CtlError>
            ret = USBD_FAIL;
 8009852:	2302      	movs	r3, #2
 8009854:	75fb      	strb	r3, [r7, #23]
          break;
 8009856:	e013      	b.n	8009880 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985e:	2b03      	cmp	r3, #3
 8009860:	d00d      	beq.n	800987e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f94f 	bl	800ab08 <USBD_CtlError>
            ret = USBD_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800986e:	e006      	b.n	800987e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 f948 	bl	800ab08 <USBD_CtlError>
          ret = USBD_FAIL;
 8009878:	2302      	movs	r3, #2
 800987a:	75fb      	strb	r3, [r7, #23]
          break;
 800987c:	e000      	b.n	8009880 <USBD_CDC_Setup+0x12c>
          break;
 800987e:	bf00      	nop
      }
      break;
 8009880:	e006      	b.n	8009890 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 f93f 	bl	800ab08 <USBD_CtlError>
      ret = USBD_FAIL;
 800988a:	2302      	movs	r3, #2
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	bf00      	nop
  }

  return ret;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d03a      	beq.n	8009936 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	331c      	adds	r3, #28
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d029      	beq.n	800992a <USBD_CDC_DataIn+0x90>
 80098d6:	78fa      	ldrb	r2, [r7, #3]
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	440b      	add	r3, r1
 80098e4:	331c      	adds	r3, #28
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	78f9      	ldrb	r1, [r7, #3]
 80098ea:	68b8      	ldr	r0, [r7, #8]
 80098ec:	460b      	mov	r3, r1
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4403      	add	r3, r0
 80098f6:	3338      	adds	r3, #56	; 0x38
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80098fe:	fb03 f301 	mul.w	r3, r3, r1
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d110      	bne.n	800992a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	331c      	adds	r3, #28
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800991c:	78f9      	ldrb	r1, [r7, #3]
 800991e:	2300      	movs	r3, #0
 8009920:	2200      	movs	r2, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f001 fe06 	bl	800b534 <USBD_LL_Transmit>
 8009928:	e003      	b.n	8009932 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	e000      	b.n	8009938 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009936:	2302      	movs	r3, #2
  }
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	460b      	mov	r3, r1
 800994a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009952:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 fe31 	bl	800b5c0 <USBD_LL_GetRxDataSize>
 800995e:	4602      	mov	r2, r0
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00d      	beq.n	800998c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009984:	4611      	mov	r1, r2
 8009986:	4798      	blx	r3

    return USBD_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	e000      	b.n	800998e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800998c:	2302      	movs	r3, #2
  }
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d015      	beq.n	80099dc <USBD_CDC_EP0_RxReady+0x46>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099b6:	2bff      	cmp	r3, #255	; 0xff
 80099b8:	d010      	beq.n	80099dc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80099c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099d0:	b292      	uxth	r2, r2
 80099d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	22ff      	movs	r2, #255	; 0xff
 80099d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2243      	movs	r2, #67	; 0x43
 80099f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099f6:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	20000094 	.word	0x20000094

08009a08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2243      	movs	r2, #67	; 0x43
 8009a14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a16:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	20000050 	.word	0x20000050

08009a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2243      	movs	r2, #67	; 0x43
 8009a34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a36:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	200000d8 	.word	0x200000d8

08009a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	220a      	movs	r2, #10
 8009a54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a56:	4b03      	ldr	r3, [pc, #12]	; (8009a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	2000000c 	.word	0x2000000c

08009a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a72:	2302      	movs	r3, #2
 8009a74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b087      	sub	sp, #28
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aaa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ab4:	88fa      	ldrh	r2, [r7, #6]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ada:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01c      	beq.n	8009b46 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d115      	bne.n	8009b42 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2181      	movs	r1, #129	; 0x81
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f001 fcfb 	bl	800b534 <USBD_LL_Transmit>

      return USBD_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e002      	b.n	8009b48 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b46:	2302      	movs	r3, #2
  }
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d017      	beq.n	8009b9a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7c1b      	ldrb	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fcfb 	bl	800b57a <USBD_LL_PrepareReceive>
 8009b84:	e007      	b.n	8009b96 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	2101      	movs	r1, #1
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 fcf2 	bl	800b57a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e000      	b.n	8009b9c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009b9a:	2302      	movs	r3, #2
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e01a      	b.n	8009bf2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	79fa      	ldrb	r2, [r7, #7]
 8009be8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f001 fb5e 	bl	800b2ac <USBD_LL_Init>

  return USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d006      	beq.n	8009c1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
 8009c1a:	e001      	b.n	8009c20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fb92 	bl	800b360 <USBD_LL_Start>

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00c      	beq.n	8009c90 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	4611      	mov	r1, r2
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3

  return USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fedb 	bl	800aa8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cf4:	f003 031f 	and.w	r3, r3, #31
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d016      	beq.n	8009d2a <USBD_LL_SetupStage+0x6a>
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d81c      	bhi.n	8009d3a <USBD_LL_SetupStage+0x7a>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <USBD_LL_SetupStage+0x4a>
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d008      	beq.n	8009d1a <USBD_LL_SetupStage+0x5a>
 8009d08:	e017      	b.n	8009d3a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f9ce 	bl	800a0b4 <USBD_StdDevReq>
      break;
 8009d18:	e01a      	b.n	8009d50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa30 	bl	800a188 <USBD_StdItfReq>
      break;
 8009d28:	e012      	b.n	8009d50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa70 	bl	800a218 <USBD_StdEPReq>
      break;
 8009d38:	e00a      	b.n	8009d50 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fb69 	bl	800b420 <USBD_LL_StallEP>
      break;
 8009d4e:	bf00      	nop
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	460b      	mov	r3, r1
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d14b      	bne.n	8009e06 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d134      	bne.n	8009dea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d919      	bls.n	8009dc0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	1ad2      	subs	r2, r2, r3
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d203      	bcs.n	8009dae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	e002      	b.n	8009db4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 ff5c 	bl	800ac76 <USBD_CtlContinueRx>
 8009dbe:	e038      	b.n	8009e32 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d105      	bne.n	8009de2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 ff59 	bl	800ac9a <USBD_CtlSendStatus>
 8009de8:	e023      	b.n	8009e32 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009df0:	2b05      	cmp	r3, #5
 8009df2:	d11e      	bne.n	8009e32 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f001 fb0e 	bl	800b420 <USBD_LL_StallEP>
 8009e04:	e015      	b.n	8009e32 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00d      	beq.n	8009e2e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d108      	bne.n	8009e2e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	7afa      	ldrb	r2, [r7, #11]
 8009e26:	4611      	mov	r1, r2
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	4798      	blx	r3
 8009e2c:	e001      	b.n	8009e32 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e000      	b.n	8009e34 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	460b      	mov	r3, r1
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d17f      	bne.n	8009f50 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3314      	adds	r3, #20
 8009e54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d15c      	bne.n	8009f1a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d915      	bls.n	8009e98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fec6 	bl	800ac16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f001 fb72 	bl	800b57a <USBD_LL_PrepareReceive>
 8009e96:	e04e      	b.n	8009f36 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	6912      	ldr	r2, [r2, #16]
 8009ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ea4:	fb02 f201 	mul.w	r2, r2, r1
 8009ea8:	1a9b      	subs	r3, r3, r2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d11c      	bne.n	8009ee8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d316      	bcc.n	8009ee8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d20f      	bcs.n	8009ee8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fea2 	bl	800ac16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eda:	2300      	movs	r3, #0
 8009edc:	2200      	movs	r2, #0
 8009ede:	2100      	movs	r1, #0
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f001 fb4a 	bl	800b57a <USBD_LL_PrepareReceive>
 8009ee6:	e026      	b.n	8009f36 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00a      	beq.n	8009f0a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d105      	bne.n	8009f0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009f0a:	2180      	movs	r1, #128	; 0x80
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f001 fa87 	bl	800b420 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 fed4 	bl	800acc0 <USBD_CtlReceiveStatus>
 8009f18:	e00d      	b.n	8009f36 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d004      	beq.n	8009f2e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d103      	bne.n	8009f36 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f2e:	2180      	movs	r1, #128	; 0x80
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 fa75 	bl	800b420 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d11d      	bne.n	8009f7c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fe80 	bl	8009c46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f4e:	e015      	b.n	8009f7c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00d      	beq.n	8009f78 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d108      	bne.n	8009f78 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	7afa      	ldrb	r2, [r7, #11]
 8009f70:	4611      	mov	r1, r2
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	4798      	blx	r3
 8009f76:	e001      	b.n	8009f7c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e000      	b.n	8009f7e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	2200      	movs	r2, #0
 8009f92:	2100      	movs	r1, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 f9fe 	bl	800b396 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2240      	movs	r2, #64	; 0x40
 8009fa6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	2200      	movs	r2, #0
 8009fae:	2180      	movs	r1, #128	; 0x80
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 f9f0 	bl	800b396 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2240      	movs	r2, #64	; 0x40
 8009fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6852      	ldr	r2, [r2, #4]
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	4798      	blx	r3
  }

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2204      	movs	r2, #4
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	2b04      	cmp	r3, #4
 800a062:	d105      	bne.n	800a070 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d10b      	bne.n	800a0a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0ca:	2b40      	cmp	r3, #64	; 0x40
 800a0cc:	d005      	beq.n	800a0da <USBD_StdDevReq+0x26>
 800a0ce:	2b40      	cmp	r3, #64	; 0x40
 800a0d0:	d84f      	bhi.n	800a172 <USBD_StdDevReq+0xbe>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <USBD_StdDevReq+0x36>
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d14b      	bne.n	800a172 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	4798      	blx	r3
      break;
 800a0e8:	e048      	b.n	800a17c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d839      	bhi.n	800a166 <USBD_StdDevReq+0xb2>
 800a0f2:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_StdDevReq+0x44>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a149 	.word	0x0800a149
 800a0fc:	0800a15d 	.word	0x0800a15d
 800a100:	0800a167 	.word	0x0800a167
 800a104:	0800a153 	.word	0x0800a153
 800a108:	0800a167 	.word	0x0800a167
 800a10c:	0800a12b 	.word	0x0800a12b
 800a110:	0800a121 	.word	0x0800a121
 800a114:	0800a167 	.word	0x0800a167
 800a118:	0800a13f 	.word	0x0800a13f
 800a11c:	0800a135 	.word	0x0800a135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9dc 	bl	800a4e0 <USBD_GetDescriptor>
          break;
 800a128:	e022      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb3f 	bl	800a7b0 <USBD_SetAddress>
          break;
 800a132:	e01d      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fb7e 	bl	800a838 <USBD_SetConfig>
          break;
 800a13c:	e018      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fc07 	bl	800a954 <USBD_GetConfig>
          break;
 800a146:	e013      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fc37 	bl	800a9be <USBD_GetStatus>
          break;
 800a150:	e00e      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fc65 	bl	800aa24 <USBD_SetFeature>
          break;
 800a15a:	e009      	b.n	800a170 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fc74 	bl	800aa4c <USBD_ClrFeature>
          break;
 800a164:	e004      	b.n	800a170 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fccd 	bl	800ab08 <USBD_CtlError>
          break;
 800a16e:	bf00      	nop
      }
      break;
 800a170:	e004      	b.n	800a17c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fcc7 	bl	800ab08 <USBD_CtlError>
      break;
 800a17a:	bf00      	nop
  }

  return ret;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop

0800a188 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a19e:	2b40      	cmp	r3, #64	; 0x40
 800a1a0:	d005      	beq.n	800a1ae <USBD_StdItfReq+0x26>
 800a1a2:	2b40      	cmp	r3, #64	; 0x40
 800a1a4:	d82e      	bhi.n	800a204 <USBD_StdItfReq+0x7c>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <USBD_StdItfReq+0x26>
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	d12a      	bne.n	800a204 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d81d      	bhi.n	800a1f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	889b      	ldrh	r3, [r3, #4]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d813      	bhi.n	800a1ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	88db      	ldrh	r3, [r3, #6]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d110      	bne.n	800a200 <USBD_StdItfReq+0x78>
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fd58 	bl	800ac9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ea:	e009      	b.n	800a200 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fc8a 	bl	800ab08 <USBD_CtlError>
          break;
 800a1f4:	e004      	b.n	800a200 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fc85 	bl	800ab08 <USBD_CtlError>
          break;
 800a1fe:	e000      	b.n	800a202 <USBD_StdItfReq+0x7a>
          break;
 800a200:	bf00      	nop
      }
      break;
 800a202:	e004      	b.n	800a20e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fc7e 	bl	800ab08 <USBD_CtlError>
      break;
 800a20c:	bf00      	nop
  }

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	889b      	ldrh	r3, [r3, #4]
 800a22a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d007      	beq.n	800a248 <USBD_StdEPReq+0x30>
 800a238:	2b40      	cmp	r3, #64	; 0x40
 800a23a:	f200 8146 	bhi.w	800a4ca <USBD_StdEPReq+0x2b2>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <USBD_StdEPReq+0x40>
 800a242:	2b20      	cmp	r3, #32
 800a244:	f040 8141 	bne.w	800a4ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
      break;
 800a256:	e13d      	b.n	800a4d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a260:	2b20      	cmp	r3, #32
 800a262:	d10a      	bne.n	800a27a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	4798      	blx	r3
 800a272:	4603      	mov	r3, r0
 800a274:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	e12d      	b.n	800a4d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d007      	beq.n	800a292 <USBD_StdEPReq+0x7a>
 800a282:	2b03      	cmp	r3, #3
 800a284:	f300 811b 	bgt.w	800a4be <USBD_StdEPReq+0x2a6>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d072      	beq.n	800a372 <USBD_StdEPReq+0x15a>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d03a      	beq.n	800a306 <USBD_StdEPReq+0xee>
 800a290:	e115      	b.n	800a4be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d002      	beq.n	800a2a2 <USBD_StdEPReq+0x8a>
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d015      	beq.n	800a2cc <USBD_StdEPReq+0xb4>
 800a2a0:	e02b      	b.n	800a2fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <USBD_StdEPReq+0xaa>
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2b80      	cmp	r3, #128	; 0x80
 800a2ac:	d009      	beq.n	800a2c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 f8b4 	bl	800b420 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a2b8:	2180      	movs	r1, #128	; 0x80
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 f8b0 	bl	800b420 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2c0:	e020      	b.n	800a304 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc1f 	bl	800ab08 <USBD_CtlError>
              break;
 800a2ca:	e01b      	b.n	800a304 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	885b      	ldrh	r3, [r3, #2]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10e      	bne.n	800a2f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00b      	beq.n	800a2f2 <USBD_StdEPReq+0xda>
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b80      	cmp	r3, #128	; 0x80
 800a2de:	d008      	beq.n	800a2f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	88db      	ldrh	r3, [r3, #6]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 f897 	bl	800b420 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fcd1 	bl	800ac9a <USBD_CtlSendStatus>

              break;
 800a2f8:	e004      	b.n	800a304 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc03 	bl	800ab08 <USBD_CtlError>
              break;
 800a302:	bf00      	nop
          }
          break;
 800a304:	e0e0      	b.n	800a4c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d002      	beq.n	800a316 <USBD_StdEPReq+0xfe>
 800a310:	2b03      	cmp	r3, #3
 800a312:	d015      	beq.n	800a340 <USBD_StdEPReq+0x128>
 800a314:	e026      	b.n	800a364 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <USBD_StdEPReq+0x11e>
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b80      	cmp	r3, #128	; 0x80
 800a320:	d009      	beq.n	800a336 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 f87a 	bl	800b420 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a32c:	2180      	movs	r1, #128	; 0x80
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 f876 	bl	800b420 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a334:	e01c      	b.n	800a370 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fbe5 	bl	800ab08 <USBD_CtlError>
              break;
 800a33e:	e017      	b.n	800a370 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	885b      	ldrh	r3, [r3, #2]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d112      	bne.n	800a36e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d004      	beq.n	800a35c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 f881 	bl	800b45e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fc9c 	bl	800ac9a <USBD_CtlSendStatus>
              }
              break;
 800a362:	e004      	b.n	800a36e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fbce 	bl	800ab08 <USBD_CtlError>
              break;
 800a36c:	e000      	b.n	800a370 <USBD_StdEPReq+0x158>
              break;
 800a36e:	bf00      	nop
          }
          break;
 800a370:	e0aa      	b.n	800a4c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d002      	beq.n	800a382 <USBD_StdEPReq+0x16a>
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d032      	beq.n	800a3e6 <USBD_StdEPReq+0x1ce>
 800a380:	e097      	b.n	800a4b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d007      	beq.n	800a398 <USBD_StdEPReq+0x180>
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b80      	cmp	r3, #128	; 0x80
 800a38c:	d004      	beq.n	800a398 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fbb9 	bl	800ab08 <USBD_CtlError>
                break;
 800a396:	e091      	b.n	800a4bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	da0b      	bge.n	800a3b8 <USBD_StdEPReq+0x1a0>
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	3310      	adds	r3, #16
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	e00b      	b.n	800a3d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fbfd 	bl	800abde <USBD_CtlSendData>
              break;
 800a3e4:	e06a      	b.n	800a4bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da11      	bge.n	800a412 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	f003 020f 	and.w	r2, r3, #15
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	3318      	adds	r3, #24
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d117      	bne.n	800a438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fb7c 	bl	800ab08 <USBD_CtlError>
                  break;
 800a410:	e054      	b.n	800a4bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	f003 020f 	and.w	r2, r3, #15
 800a418:	6879      	ldr	r1, [r7, #4]
 800a41a:	4613      	mov	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	440b      	add	r3, r1
 800a424:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fb69 	bl	800ab08 <USBD_CtlError>
                  break;
 800a436:	e041      	b.n	800a4bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da0b      	bge.n	800a458 <USBD_StdEPReq+0x240>
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	3310      	adds	r3, #16
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	e00b      	b.n	800a470 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a45e:	4613      	mov	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	3304      	adds	r3, #4
 800a470:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <USBD_StdEPReq+0x266>
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b80      	cmp	r3, #128	; 0x80
 800a47c:	d103      	bne.n	800a486 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	e00e      	b.n	800a4a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 f806 	bl	800b49c <USBD_LL_IsStallEP>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2201      	movs	r2, #1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e002      	b.n	800a4a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fb97 	bl	800abde <USBD_CtlSendData>
              break;
 800a4b0:	e004      	b.n	800a4bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fb27 	bl	800ab08 <USBD_CtlError>
              break;
 800a4ba:	bf00      	nop
          }
          break;
 800a4bc:	e004      	b.n	800a4c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fb21 	bl	800ab08 <USBD_CtlError>
          break;
 800a4c6:	bf00      	nop
      }
      break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fb1b 	bl	800ab08 <USBD_CtlError>
      break;
 800a4d2:	bf00      	nop
  }

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	885b      	ldrh	r3, [r3, #2]
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b06      	cmp	r3, #6
 800a502:	f200 8128 	bhi.w	800a756 <USBD_GetDescriptor+0x276>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <USBD_GetDescriptor+0x2c>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a529 	.word	0x0800a529
 800a510:	0800a541 	.word	0x0800a541
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a757 	.word	0x0800a757
 800a51c:	0800a757 	.word	0x0800a757
 800a520:	0800a6f7 	.word	0x0800a6f7
 800a524:	0800a723 	.word	0x0800a723
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	7c12      	ldrb	r2, [r2, #16]
 800a534:	f107 0108 	add.w	r1, r7, #8
 800a538:	4610      	mov	r0, r2
 800a53a:	4798      	blx	r3
 800a53c:	60f8      	str	r0, [r7, #12]
      break;
 800a53e:	e112      	b.n	800a766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7c1b      	ldrb	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10d      	bne.n	800a564 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	f107 0208 	add.w	r2, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	2202      	movs	r2, #2
 800a560:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a562:	e100      	b.n	800a766 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	f107 0208 	add.w	r2, r7, #8
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
 800a574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3301      	adds	r3, #1
 800a57a:	2202      	movs	r2, #2
 800a57c:	701a      	strb	r2, [r3, #0]
      break;
 800a57e:	e0f2      	b.n	800a766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	885b      	ldrh	r3, [r3, #2]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b05      	cmp	r3, #5
 800a588:	f200 80ac 	bhi.w	800a6e4 <USBD_GetDescriptor+0x204>
 800a58c:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USBD_GetDescriptor+0xb4>)
 800a58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a592:	bf00      	nop
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5e1 	.word	0x0800a5e1
 800a59c:	0800a615 	.word	0x0800a615
 800a5a0:	0800a649 	.word	0x0800a649
 800a5a4:	0800a67d 	.word	0x0800a67d
 800a5a8:	0800a6b1 	.word	0x0800a6b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00b      	beq.n	800a5d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	7c12      	ldrb	r2, [r2, #16]
 800a5c4:	f107 0108 	add.w	r1, r7, #8
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ce:	e091      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa98 	bl	800ab08 <USBD_CtlError>
            err++;
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5de:	e089      	b.n	800a6f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	7c12      	ldrb	r2, [r2, #16]
 800a5f8:	f107 0108 	add.w	r1, r7, #8
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	4798      	blx	r3
 800a600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a602:	e077      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fa7e 	bl	800ab08 <USBD_CtlError>
            err++;
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	3301      	adds	r3, #1
 800a610:	72fb      	strb	r3, [r7, #11]
          break;
 800a612:	e06f      	b.n	800a6f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00b      	beq.n	800a638 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	7c12      	ldrb	r2, [r2, #16]
 800a62c:	f107 0108 	add.w	r1, r7, #8
 800a630:	4610      	mov	r0, r2
 800a632:	4798      	blx	r3
 800a634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a636:	e05d      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa64 	bl	800ab08 <USBD_CtlError>
            err++;
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	3301      	adds	r3, #1
 800a644:	72fb      	strb	r3, [r7, #11]
          break;
 800a646:	e055      	b.n	800a6f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	7c12      	ldrb	r2, [r2, #16]
 800a660:	f107 0108 	add.w	r1, r7, #8
 800a664:	4610      	mov	r0, r2
 800a666:	4798      	blx	r3
 800a668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a66a:	e043      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fa4a 	bl	800ab08 <USBD_CtlError>
            err++;
 800a674:	7afb      	ldrb	r3, [r7, #11]
 800a676:	3301      	adds	r3, #1
 800a678:	72fb      	strb	r3, [r7, #11]
          break;
 800a67a:	e03b      	b.n	800a6f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00b      	beq.n	800a6a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	7c12      	ldrb	r2, [r2, #16]
 800a694:	f107 0108 	add.w	r1, r7, #8
 800a698:	4610      	mov	r0, r2
 800a69a:	4798      	blx	r3
 800a69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a69e:	e029      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fa30 	bl	800ab08 <USBD_CtlError>
            err++;
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ae:	e021      	b.n	800a6f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00b      	beq.n	800a6d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	7c12      	ldrb	r2, [r2, #16]
 800a6c8:	f107 0108 	add.w	r1, r7, #8
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6d2:	e00f      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa16 	bl	800ab08 <USBD_CtlError>
            err++;
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6e2:	e007      	b.n	800a6f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fa0e 	bl	800ab08 <USBD_CtlError>
          err++;
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a6f2:	e038      	b.n	800a766 <USBD_GetDescriptor+0x286>
 800a6f4:	e037      	b.n	800a766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7c1b      	ldrb	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a706:	f107 0208 	add.w	r2, r7, #8
 800a70a:	4610      	mov	r0, r2
 800a70c:	4798      	blx	r3
 800a70e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a710:	e029      	b.n	800a766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f9f7 	bl	800ab08 <USBD_CtlError>
        err++;
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	3301      	adds	r3, #1
 800a71e:	72fb      	strb	r3, [r7, #11]
      break;
 800a720:	e021      	b.n	800a766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7c1b      	ldrb	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10d      	bne.n	800a746 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f107 0208 	add.w	r2, r7, #8
 800a736:	4610      	mov	r0, r2
 800a738:	4798      	blx	r3
 800a73a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	2207      	movs	r2, #7
 800a742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a744:	e00f      	b.n	800a766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9dd 	bl	800ab08 <USBD_CtlError>
        err++;
 800a74e:	7afb      	ldrb	r3, [r7, #11]
 800a750:	3301      	adds	r3, #1
 800a752:	72fb      	strb	r3, [r7, #11]
      break;
 800a754:	e007      	b.n	800a766 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f9d5 	bl	800ab08 <USBD_CtlError>
      err++;
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	3301      	adds	r3, #1
 800a762:	72fb      	strb	r3, [r7, #11]
      break;
 800a764:	bf00      	nop
  }

  if (err != 0U)
 800a766:	7afb      	ldrb	r3, [r7, #11]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d11c      	bne.n	800a7a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a76c:	893b      	ldrh	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d011      	beq.n	800a796 <USBD_GetDescriptor+0x2b6>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	88db      	ldrh	r3, [r3, #6]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00d      	beq.n	800a796 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88da      	ldrh	r2, [r3, #6]
 800a77e:	893b      	ldrh	r3, [r7, #8]
 800a780:	4293      	cmp	r3, r2
 800a782:	bf28      	it	cs
 800a784:	4613      	movcs	r3, r2
 800a786:	b29b      	uxth	r3, r3
 800a788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a78a:	893b      	ldrh	r3, [r7, #8]
 800a78c:	461a      	mov	r2, r3
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa24 	bl	800abde <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d104      	bne.n	800a7a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa7b 	bl	800ac9a <USBD_CtlSendStatus>
 800a7a4:	e000      	b.n	800a7a8 <USBD_GetDescriptor+0x2c8>
    return;
 800a7a6:	bf00      	nop
    }
  }
}
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop

0800a7b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	889b      	ldrh	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d130      	bne.n	800a824 <USBD_SetAddress+0x74>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	88db      	ldrh	r3, [r3, #6]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d12c      	bne.n	800a824 <USBD_SetAddress+0x74>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a7d0:	d828      	bhi.n	800a824 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	885b      	ldrh	r3, [r3, #2]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d104      	bne.n	800a7f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f98c 	bl	800ab08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f0:	e01d      	b.n	800a82e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	7bfa      	ldrb	r2, [r7, #15]
 800a7f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fe79 	bl	800b4f6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa48 	bl	800ac9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a818:	e009      	b.n	800a82e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a822:	e004      	b.n	800a82e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f96e 	bl	800ab08 <USBD_CtlError>
  }
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	885b      	ldrh	r3, [r3, #2]
 800a846:	b2da      	uxtb	r2, r3
 800a848:	4b41      	ldr	r3, [pc, #260]	; (800a950 <USBD_SetConfig+0x118>)
 800a84a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a84c:	4b40      	ldr	r3, [pc, #256]	; (800a950 <USBD_SetConfig+0x118>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d904      	bls.n	800a85e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f956 	bl	800ab08 <USBD_CtlError>
 800a85c:	e075      	b.n	800a94a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	2b02      	cmp	r3, #2
 800a866:	d002      	beq.n	800a86e <USBD_SetConfig+0x36>
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d023      	beq.n	800a8b4 <USBD_SetConfig+0x7c>
 800a86c:	e062      	b.n	800a934 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a86e:	4b38      	ldr	r3, [pc, #224]	; (800a950 <USBD_SetConfig+0x118>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01a      	beq.n	800a8ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a876:	4b36      	ldr	r3, [pc, #216]	; (800a950 <USBD_SetConfig+0x118>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2203      	movs	r2, #3
 800a884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a888:	4b31      	ldr	r3, [pc, #196]	; (800a950 <USBD_SetConfig+0x118>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff f9e4 	bl	8009c5c <USBD_SetClassConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	2b02      	cmp	r3, #2
 800a898:	d104      	bne.n	800a8a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f933 	bl	800ab08 <USBD_CtlError>
            return;
 800a8a2:	e052      	b.n	800a94a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9f8 	bl	800ac9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8aa:	e04e      	b.n	800a94a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f9f4 	bl	800ac9a <USBD_CtlSendStatus>
        break;
 800a8b2:	e04a      	b.n	800a94a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a8b4:	4b26      	ldr	r3, [pc, #152]	; (800a950 <USBD_SetConfig+0x118>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d112      	bne.n	800a8e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a8c4:	4b22      	ldr	r3, [pc, #136]	; (800a950 <USBD_SetConfig+0x118>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a8ce:	4b20      	ldr	r3, [pc, #128]	; (800a950 <USBD_SetConfig+0x118>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff f9e0 	bl	8009c9a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f9dd 	bl	800ac9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8e0:	e033      	b.n	800a94a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a8e2:	4b1b      	ldr	r3, [pc, #108]	; (800a950 <USBD_SetConfig+0x118>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d01d      	beq.n	800a92c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff f9ce 	bl	8009c9a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <USBD_SetConfig+0x118>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a908:	4b11      	ldr	r3, [pc, #68]	; (800a950 <USBD_SetConfig+0x118>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff f9a4 	bl	8009c5c <USBD_SetClassConfig>
 800a914:	4603      	mov	r3, r0
 800a916:	2b02      	cmp	r3, #2
 800a918:	d104      	bne.n	800a924 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f8f3 	bl	800ab08 <USBD_CtlError>
            return;
 800a922:	e012      	b.n	800a94a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f9b8 	bl	800ac9a <USBD_CtlSendStatus>
        break;
 800a92a:	e00e      	b.n	800a94a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f9b4 	bl	800ac9a <USBD_CtlSendStatus>
        break;
 800a932:	e00a      	b.n	800a94a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f8e6 	bl	800ab08 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a93c:	4b04      	ldr	r3, [pc, #16]	; (800a950 <USBD_SetConfig+0x118>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff f9a9 	bl	8009c9a <USBD_ClrClassConfig>
        break;
 800a948:	bf00      	nop
    }
  }
}
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	2000019d 	.word	0x2000019d

0800a954 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d004      	beq.n	800a970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f8cd 	bl	800ab08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a96e:	e022      	b.n	800a9b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a976:	2b02      	cmp	r3, #2
 800a978:	dc02      	bgt.n	800a980 <USBD_GetConfig+0x2c>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dc03      	bgt.n	800a986 <USBD_GetConfig+0x32>
 800a97e:	e015      	b.n	800a9ac <USBD_GetConfig+0x58>
 800a980:	2b03      	cmp	r3, #3
 800a982:	d00b      	beq.n	800a99c <USBD_GetConfig+0x48>
 800a984:	e012      	b.n	800a9ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3308      	adds	r3, #8
 800a990:	2201      	movs	r2, #1
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f922 	bl	800abde <USBD_CtlSendData>
        break;
 800a99a:	e00c      	b.n	800a9b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f91a 	bl	800abde <USBD_CtlSendData>
        break;
 800a9aa:	e004      	b.n	800a9b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f8aa 	bl	800ab08 <USBD_CtlError>
        break;
 800a9b4:	bf00      	nop
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d81e      	bhi.n	800aa12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	88db      	ldrh	r3, [r3, #6]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d004      	beq.n	800a9e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f892 	bl	800ab08 <USBD_CtlError>
        break;
 800a9e4:	e01a      	b.n	800aa1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f043 0202 	orr.w	r2, r3, #2
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	330c      	adds	r3, #12
 800aa06:	2202      	movs	r2, #2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f8e7 	bl	800abde <USBD_CtlSendData>
      break;
 800aa10:	e004      	b.n	800aa1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f877 	bl	800ab08 <USBD_CtlError>
      break;
 800aa1a:	bf00      	nop
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	885b      	ldrh	r3, [r3, #2]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d106      	bne.n	800aa44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f92b 	bl	800ac9a <USBD_CtlSendStatus>
  }
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d80b      	bhi.n	800aa7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	885b      	ldrh	r3, [r3, #2]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10c      	bne.n	800aa84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f911 	bl	800ac9a <USBD_CtlSendStatus>
      }
      break;
 800aa78:	e004      	b.n	800aa84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f843 	bl	800ab08 <USBD_CtlError>
      break;
 800aa82:	e000      	b.n	800aa86 <USBD_ClrFeature+0x3a>
      break;
 800aa84:	bf00      	nop
  }
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	785a      	ldrb	r2, [r3, #1]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3302      	adds	r3, #2
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3303      	adds	r3, #3
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3304      	adds	r3, #4
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3305      	adds	r3, #5
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	3306      	adds	r3, #6
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	3307      	adds	r3, #7
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	80da      	strh	r2, [r3, #6]

}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ab12:	2180      	movs	r1, #128	; 0x80
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fc83 	bl	800b420 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc7f 	bl	800b420 <USBD_LL_StallEP>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b086      	sub	sp, #24
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d032      	beq.n	800aba6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 f834 	bl	800abae <USBD_GetLen>
 800ab46:	4603      	mov	r3, r0
 800ab48:	3301      	adds	r3, #1
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	75fa      	strb	r2, [r7, #23]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	4413      	add	r3, r2
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	7812      	ldrb	r2, [r2, #0]
 800ab64:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	75fa      	strb	r2, [r7, #23]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4413      	add	r3, r2
 800ab72:	2203      	movs	r2, #3
 800ab74:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab76:	e012      	b.n	800ab9e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	60fa      	str	r2, [r7, #12]
 800ab7e:	7dfa      	ldrb	r2, [r7, #23]
 800ab80:	1c51      	adds	r1, r2, #1
 800ab82:	75f9      	strb	r1, [r7, #23]
 800ab84:	4611      	mov	r1, r2
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	440a      	add	r2, r1
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	75fa      	strb	r2, [r7, #23]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	4413      	add	r3, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e8      	bne.n	800ab78 <USBD_GetString+0x4e>
    }
  }
}
 800aba6:	bf00      	nop
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800abba:	e005      	b.n	800abc8 <USBD_GetLen+0x1a>
  {
    len++;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3301      	adds	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3301      	adds	r3, #1
 800abc6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f5      	bne.n	800abbc <USBD_GetLen+0xe>
  }

  return len;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	4613      	mov	r3, r2
 800abea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2202      	movs	r2, #2
 800abf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abf4:	88fa      	ldrh	r2, [r7, #6]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800abfa:	88fa      	ldrh	r2, [r7, #6]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac00:	88fb      	ldrh	r3, [r7, #6]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	2100      	movs	r1, #0
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 fc94 	bl	800b534 <USBD_LL_Transmit>

  return USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	4613      	mov	r3, r2
 800ac22:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac24:	88fb      	ldrh	r3, [r7, #6]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	2100      	movs	r1, #0
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 fc82 	bl	800b534 <USBD_LL_Transmit>

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	4613      	mov	r3, r2
 800ac46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac50:	88fa      	ldrh	r2, [r7, #6]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ac58:	88fa      	ldrh	r2, [r7, #6]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	2100      	movs	r1, #0
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 fc87 	bl	800b57a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	4613      	mov	r3, r2
 800ac82:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 fc75 	bl	800b57a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2204      	movs	r2, #4
 800aca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acaa:	2300      	movs	r3, #0
 800acac:	2200      	movs	r2, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fc3f 	bl	800b534 <USBD_LL_Transmit>

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2205      	movs	r2, #5
 800accc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acd0:	2300      	movs	r3, #0
 800acd2:	2200      	movs	r2, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fc4f 	bl	800b57a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800acec:	2200      	movs	r2, #0
 800acee:	4912      	ldr	r1, [pc, #72]	; (800ad38 <MX_USB_DEVICE_Init+0x50>)
 800acf0:	4812      	ldr	r0, [pc, #72]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800acf2:	f7fe ff57 	bl	8009ba4 <USBD_Init>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acfc:	f7f6 fd5a 	bl	80017b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad00:	490f      	ldr	r1, [pc, #60]	; (800ad40 <MX_USB_DEVICE_Init+0x58>)
 800ad02:	480e      	ldr	r0, [pc, #56]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad04:	f7fe ff79 	bl	8009bfa <USBD_RegisterClass>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad0e:	f7f6 fd51 	bl	80017b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad12:	490c      	ldr	r1, [pc, #48]	; (800ad44 <MX_USB_DEVICE_Init+0x5c>)
 800ad14:	4809      	ldr	r0, [pc, #36]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad16:	f7fe fea7 	bl	8009a68 <USBD_CDC_RegisterInterface>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad20:	f7f6 fd48 	bl	80017b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad24:	4805      	ldr	r0, [pc, #20]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad26:	f7fe ff82 	bl	8009c2e <USBD_Start>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad30:	f7f6 fd40 	bl	80017b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad34:	bf00      	nop
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	2000012c 	.word	0x2000012c
 800ad3c:	200005bc 	.word	0x200005bc
 800ad40:	20000018 	.word	0x20000018
 800ad44:	2000011c 	.word	0x2000011c

0800ad48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4905      	ldr	r1, [pc, #20]	; (800ad64 <CDC_Init_FS+0x1c>)
 800ad50:	4805      	ldr	r0, [pc, #20]	; (800ad68 <CDC_Init_FS+0x20>)
 800ad52:	f7fe fea0 	bl	8009a96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad56:	4905      	ldr	r1, [pc, #20]	; (800ad6c <CDC_Init_FS+0x24>)
 800ad58:	4803      	ldr	r0, [pc, #12]	; (800ad68 <CDC_Init_FS+0x20>)
 800ad5a:	f7fe feb6 	bl	8009aca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000c68 	.word	0x20000c68
 800ad68:	200005bc 	.word	0x200005bc
 800ad6c:	20000880 	.word	0x20000880

0800ad70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	2b23      	cmp	r3, #35	; 0x23
 800ad94:	d84a      	bhi.n	800ae2c <CDC_Control_FS+0xac>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <CDC_Control_FS+0x1c>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800ae2d 	.word	0x0800ae2d
 800ada0:	0800ae2d 	.word	0x0800ae2d
 800ada4:	0800ae2d 	.word	0x0800ae2d
 800ada8:	0800ae2d 	.word	0x0800ae2d
 800adac:	0800ae2d 	.word	0x0800ae2d
 800adb0:	0800ae2d 	.word	0x0800ae2d
 800adb4:	0800ae2d 	.word	0x0800ae2d
 800adb8:	0800ae2d 	.word	0x0800ae2d
 800adbc:	0800ae2d 	.word	0x0800ae2d
 800adc0:	0800ae2d 	.word	0x0800ae2d
 800adc4:	0800ae2d 	.word	0x0800ae2d
 800adc8:	0800ae2d 	.word	0x0800ae2d
 800adcc:	0800ae2d 	.word	0x0800ae2d
 800add0:	0800ae2d 	.word	0x0800ae2d
 800add4:	0800ae2d 	.word	0x0800ae2d
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ae2d 	.word	0x0800ae2d
 800ade0:	0800ae2d 	.word	0x0800ae2d
 800ade4:	0800ae2d 	.word	0x0800ae2d
 800ade8:	0800ae2d 	.word	0x0800ae2d
 800adec:	0800ae2d 	.word	0x0800ae2d
 800adf0:	0800ae2d 	.word	0x0800ae2d
 800adf4:	0800ae2d 	.word	0x0800ae2d
 800adf8:	0800ae2d 	.word	0x0800ae2d
 800adfc:	0800ae2d 	.word	0x0800ae2d
 800ae00:	0800ae2d 	.word	0x0800ae2d
 800ae04:	0800ae2d 	.word	0x0800ae2d
 800ae08:	0800ae2d 	.word	0x0800ae2d
 800ae0c:	0800ae2d 	.word	0x0800ae2d
 800ae10:	0800ae2d 	.word	0x0800ae2d
 800ae14:	0800ae2d 	.word	0x0800ae2d
 800ae18:	0800ae2d 	.word	0x0800ae2d
 800ae1c:	0800ae2d 	.word	0x0800ae2d
 800ae20:	0800ae2d 	.word	0x0800ae2d
 800ae24:	0800ae2d 	.word	0x0800ae2d
 800ae28:	0800ae2d 	.word	0x0800ae2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae2c:	bf00      	nop
  }

  return (USBD_OK);
 800ae2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4808      	ldr	r0, [pc, #32]	; (800ae6c <CDC_Receive_FS+0x30>)
 800ae4a:	f7fe fe3e 	bl	8009aca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae4e:	4807      	ldr	r0, [pc, #28]	; (800ae6c <CDC_Receive_FS+0x30>)
 800ae50:	f7fe fe7e 	bl	8009b50 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,*Len);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7f5 fe64 	bl	8000b28 <CDC_ReceiveCallback>
  return (USBD_OK);
 800ae60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	200005bc 	.word	0x200005bc

0800ae70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <CDC_Transmit_FS+0x48>)
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e00b      	b.n	800aeae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae96:	887b      	ldrh	r3, [r7, #2]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4806      	ldr	r0, [pc, #24]	; (800aeb8 <CDC_Transmit_FS+0x48>)
 800ae9e:	f7fe fdfa 	bl	8009a96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aea2:	4805      	ldr	r0, [pc, #20]	; (800aeb8 <CDC_Transmit_FS+0x48>)
 800aea4:	f7fe fe25 	bl	8009af2 <USBD_CDC_TransmitPacket>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	200005bc 	.word	0x200005bc

0800aebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	6039      	str	r1, [r7, #0]
 800aec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2212      	movs	r2, #18
 800aecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aece:	4b03      	ldr	r3, [pc, #12]	; (800aedc <USBD_FS_DeviceDescriptor+0x20>)
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	20000148 	.word	0x20000148

0800aee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2204      	movs	r2, #4
 800aef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aef2:	4b03      	ldr	r3, [pc, #12]	; (800af00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	2000015c 	.word	0x2000015c

0800af04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	6039      	str	r1, [r7, #0]
 800af0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d105      	bne.n	800af22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	4907      	ldr	r1, [pc, #28]	; (800af38 <USBD_FS_ProductStrDescriptor+0x34>)
 800af1a:	4808      	ldr	r0, [pc, #32]	; (800af3c <USBD_FS_ProductStrDescriptor+0x38>)
 800af1c:	f7ff fe05 	bl	800ab2a <USBD_GetString>
 800af20:	e004      	b.n	800af2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	4904      	ldr	r1, [pc, #16]	; (800af38 <USBD_FS_ProductStrDescriptor+0x34>)
 800af26:	4805      	ldr	r0, [pc, #20]	; (800af3c <USBD_FS_ProductStrDescriptor+0x38>)
 800af28:	f7ff fdff 	bl	800ab2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af2c:	4b02      	ldr	r3, [pc, #8]	; (800af38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20001050 	.word	0x20001050
 800af3c:	0800c768 	.word	0x0800c768

0800af40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	4904      	ldr	r1, [pc, #16]	; (800af60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af50:	4804      	ldr	r0, [pc, #16]	; (800af64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af52:	f7ff fdea 	bl	800ab2a <USBD_GetString>
  return USBD_StrDesc;
 800af56:	4b02      	ldr	r3, [pc, #8]	; (800af60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20001050 	.word	0x20001050
 800af64:	0800c778 	.word	0x0800c778

0800af68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	221a      	movs	r2, #26
 800af78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af7a:	f000 f843 	bl	800b004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af7e:	4b02      	ldr	r3, [pc, #8]	; (800af88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000160 	.word	0x20000160

0800af8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	6039      	str	r1, [r7, #0]
 800af96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d105      	bne.n	800afaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	4907      	ldr	r1, [pc, #28]	; (800afc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afa2:	4808      	ldr	r0, [pc, #32]	; (800afc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afa4:	f7ff fdc1 	bl	800ab2a <USBD_GetString>
 800afa8:	e004      	b.n	800afb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	4904      	ldr	r1, [pc, #16]	; (800afc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afae:	4805      	ldr	r0, [pc, #20]	; (800afc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afb0:	f7ff fdbb 	bl	800ab2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800afb4:	4b02      	ldr	r3, [pc, #8]	; (800afc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20001050 	.word	0x20001050
 800afc4:	0800c78c 	.word	0x0800c78c

0800afc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afd4:	79fb      	ldrb	r3, [r7, #7]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d105      	bne.n	800afe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4907      	ldr	r1, [pc, #28]	; (800affc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afde:	4808      	ldr	r0, [pc, #32]	; (800b000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afe0:	f7ff fda3 	bl	800ab2a <USBD_GetString>
 800afe4:	e004      	b.n	800aff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	4904      	ldr	r1, [pc, #16]	; (800affc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afea:	4805      	ldr	r0, [pc, #20]	; (800b000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afec:	f7ff fd9d 	bl	800ab2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20001050 	.word	0x20001050
 800b000:	0800c798 	.word	0x0800c798

0800b004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b00a:	4b0f      	ldr	r3, [pc, #60]	; (800b048 <Get_SerialNum+0x44>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <Get_SerialNum+0x48>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b016:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <Get_SerialNum+0x4c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4413      	add	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b02a:	2208      	movs	r2, #8
 800b02c:	4909      	ldr	r1, [pc, #36]	; (800b054 <Get_SerialNum+0x50>)
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f814 	bl	800b05c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b034:	2204      	movs	r2, #4
 800b036:	4908      	ldr	r1, [pc, #32]	; (800b058 <Get_SerialNum+0x54>)
 800b038:	68b8      	ldr	r0, [r7, #8]
 800b03a:	f000 f80f 	bl	800b05c <IntToUnicode>
  }
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	1ffff7ac 	.word	0x1ffff7ac
 800b04c:	1ffff7b0 	.word	0x1ffff7b0
 800b050:	1ffff7b4 	.word	0x1ffff7b4
 800b054:	20000162 	.word	0x20000162
 800b058:	20000172 	.word	0x20000172

0800b05c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b06e:	2300      	movs	r3, #0
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e027      	b.n	800b0c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	0f1b      	lsrs	r3, r3, #28
 800b078:	2b09      	cmp	r3, #9
 800b07a:	d80b      	bhi.n	800b094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	0f1b      	lsrs	r3, r3, #28
 800b080:	b2da      	uxtb	r2, r3
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	4619      	mov	r1, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	440b      	add	r3, r1
 800b08c:	3230      	adds	r2, #48	; 0x30
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	e00a      	b.n	800b0aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	0f1b      	lsrs	r3, r3, #28
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	4619      	mov	r1, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	440b      	add	r3, r1
 800b0a4:	3237      	adds	r2, #55	; 0x37
 800b0a6:	b2d2      	uxtb	r2, r2
 800b0a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	75fb      	strb	r3, [r7, #23]
 800b0c4:	7dfa      	ldrb	r2, [r7, #23]
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d3d3      	bcc.n	800b074 <IntToUnicode+0x18>
  }
}
 800b0cc:	bf00      	nop
 800b0ce:	bf00      	nop
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
	...

0800b0dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	; 0x28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e4:	f107 0314 	add.w	r3, r7, #20
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	609a      	str	r2, [r3, #8]
 800b0f0:	60da      	str	r2, [r3, #12]
 800b0f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a1c      	ldr	r2, [pc, #112]	; (800b16c <HAL_PCD_MspInit+0x90>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d131      	bne.n	800b162 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0fe:	4b1c      	ldr	r3, [pc, #112]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	4a1b      	ldr	r2, [pc, #108]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b108:	6153      	str	r3, [r2, #20]
 800b10a:	4b19      	ldr	r3, [pc, #100]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b116:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b11a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11c:	2302      	movs	r3, #2
 800b11e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b124:	2303      	movs	r3, #3
 800b126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b128:	230e      	movs	r3, #14
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	4619      	mov	r1, r3
 800b132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b136:	f7f8 fa1b 	bl	8003570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b13a:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	4a0c      	ldr	r2, [pc, #48]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b144:	61d3      	str	r3, [r2, #28]
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <HAL_PCD_MspInit+0x94>)
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b152:	2200      	movs	r2, #0
 800b154:	2100      	movs	r1, #0
 800b156:	2014      	movs	r0, #20
 800b158:	f7f7 fddf 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b15c:	2014      	movs	r0, #20
 800b15e:	f7f7 fdf8 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b162:	bf00      	nop
 800b164:	3728      	adds	r7, #40	; 0x28
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40005c00 	.word	0x40005c00
 800b170:	40021000 	.word	0x40021000

0800b174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe fd98 	bl	8009cc0 <USBD_LL_SetupStage>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	440b      	add	r3, r1
 800b1b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f7fe fdca 	bl	8009d5a <USBD_LL_DataOutStage>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b1e0:	78fa      	ldrb	r2, [r7, #3]
 800b1e2:	6879      	ldr	r1, [r7, #4]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	440b      	add	r3, r1
 800b1ee:	333c      	adds	r3, #60	; 0x3c
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7fe fe21 	bl	8009e3c <USBD_LL_DataInStage>
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe ff34 	bl	800a07e <USBD_LL_SOF>
}
 800b216:	bf00      	nop
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b226:	2301      	movs	r3, #1
 800b228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d001      	beq.n	800b236 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b232:	f7f6 fabf 	bl	80017b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b23c:	7bfa      	ldrb	r2, [r7, #15]
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fee1 	bl	800a008 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fe9a 	bl	8009f86 <USBD_LL_Reset>
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fedc 	bl	800a028 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b278:	4b04      	ldr	r3, [pc, #16]	; (800b28c <HAL_PCD_SuspendCallback+0x30>)
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	4a03      	ldr	r2, [pc, #12]	; (800b28c <HAL_PCD_SuspendCallback+0x30>)
 800b27e:	f043 0306 	orr.w	r3, r3, #6
 800b282:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	e000ed00 	.word	0xe000ed00

0800b290 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fed7 	bl	800a052 <USBD_LL_Resume>
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b2b4:	4a28      	ldr	r2, [pc, #160]	; (800b358 <USBD_LL_Init+0xac>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a26      	ldr	r2, [pc, #152]	; (800b358 <USBD_LL_Init+0xac>)
 800b2c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <USBD_LL_Init+0xac>)
 800b2c6:	4a25      	ldr	r2, [pc, #148]	; (800b35c <USBD_LL_Init+0xb0>)
 800b2c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b2ca:	4b23      	ldr	r3, [pc, #140]	; (800b358 <USBD_LL_Init+0xac>)
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2d0:	4b21      	ldr	r3, [pc, #132]	; (800b358 <USBD_LL_Init+0xac>)
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2d6:	4b20      	ldr	r3, [pc, #128]	; (800b358 <USBD_LL_Init+0xac>)
 800b2d8:	2202      	movs	r2, #2
 800b2da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2dc:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <USBD_LL_Init+0xac>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <USBD_LL_Init+0xac>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b2e8:	481b      	ldr	r0, [pc, #108]	; (800b358 <USBD_LL_Init+0xac>)
 800b2ea:	f7f8 fb05 	bl	80038f8 <HAL_PCD_Init>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b2f4:	f7f6 fa5e 	bl	80017b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2fe:	2318      	movs	r3, #24
 800b300:	2200      	movs	r2, #0
 800b302:	2100      	movs	r1, #0
 800b304:	f7f9 fdaf 	bl	8004e66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b30e:	2358      	movs	r3, #88	; 0x58
 800b310:	2200      	movs	r2, #0
 800b312:	2180      	movs	r1, #128	; 0x80
 800b314:	f7f9 fda7 	bl	8004e66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b31e:	23c0      	movs	r3, #192	; 0xc0
 800b320:	2200      	movs	r2, #0
 800b322:	2181      	movs	r1, #129	; 0x81
 800b324:	f7f9 fd9f 	bl	8004e66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b32e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b332:	2200      	movs	r2, #0
 800b334:	2101      	movs	r1, #1
 800b336:	f7f9 fd96 	bl	8004e66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b344:	2200      	movs	r2, #0
 800b346:	2182      	movs	r1, #130	; 0x82
 800b348:	f7f9 fd8d 	bl	8004e66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20001250 	.word	0x20001250
 800b35c:	40005c00 	.word	0x40005c00

0800b360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b376:	4618      	mov	r0, r3
 800b378:	f7f8 fb9c 	bl	8003ab4 <HAL_PCD_Start>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 f954 	bl	800b630 <USBD_Get_USB_Status>
 800b388:	4603      	mov	r3, r0
 800b38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	70fb      	strb	r3, [r7, #3]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70bb      	strb	r3, [r7, #2]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3be:	78bb      	ldrb	r3, [r7, #2]
 800b3c0:	883a      	ldrh	r2, [r7, #0]
 800b3c2:	78f9      	ldrb	r1, [r7, #3]
 800b3c4:	f7f8 fcb8 	bl	8003d38 <HAL_PCD_EP_Open>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 f92e 	bl	800b630 <USBD_Get_USB_Status>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3fc:	78fa      	ldrb	r2, [r7, #3]
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7f8 fcff 	bl	8003e04 <HAL_PCD_EP_Close>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f90f 	bl	800b630 <USBD_Get_USB_Status>
 800b412:	4603      	mov	r3, r0
 800b414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b416:	7bbb      	ldrb	r3, [r7, #14]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b43a:	78fa      	ldrb	r2, [r7, #3]
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f8 fdc0 	bl	8003fc4 <HAL_PCD_EP_SetStall>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f8f0 	bl	800b630 <USBD_Get_USB_Status>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b454:	7bbb      	ldrb	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b478:	78fa      	ldrb	r2, [r7, #3]
 800b47a:	4611      	mov	r1, r2
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7f8 fdf3 	bl	8004068 <HAL_PCD_EP_ClrStall>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 f8d1 	bl	800b630 <USBD_Get_USB_Status>
 800b48e:	4603      	mov	r3, r0
 800b490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b492:	7bbb      	ldrb	r3, [r7, #14]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	da0c      	bge.n	800b4d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4be:	68f9      	ldr	r1, [r7, #12]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	440b      	add	r3, r1
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	e00b      	b.n	800b4ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	440b      	add	r3, r1
 800b4e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b4e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b510:	78fa      	ldrb	r2, [r7, #3]
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f7f8 fbea 	bl	8003cee <HAL_PCD_SetAddress>
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	4618      	mov	r0, r3
 800b522:	f000 f885 	bl	800b630 <USBD_Get_USB_Status>
 800b526:	4603      	mov	r3, r0
 800b528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	461a      	mov	r2, r3
 800b540:	460b      	mov	r3, r1
 800b542:	72fb      	strb	r3, [r7, #11]
 800b544:	4613      	mov	r3, r2
 800b546:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b556:	893b      	ldrh	r3, [r7, #8]
 800b558:	7af9      	ldrb	r1, [r7, #11]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	f7f8 fcef 	bl	8003f3e <HAL_PCD_EP_Transmit>
 800b560:	4603      	mov	r3, r0
 800b562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f862 	bl	800b630 <USBD_Get_USB_Status>
 800b56c:	4603      	mov	r3, r0
 800b56e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b570:	7dbb      	ldrb	r3, [r7, #22]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b086      	sub	sp, #24
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	461a      	mov	r2, r3
 800b586:	460b      	mov	r3, r1
 800b588:	72fb      	strb	r3, [r7, #11]
 800b58a:	4613      	mov	r3, r2
 800b58c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b59c:	893b      	ldrh	r3, [r7, #8]
 800b59e:	7af9      	ldrb	r1, [r7, #11]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	f7f8 fc77 	bl	8003e94 <HAL_PCD_EP_Receive>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 f83f 	bl	800b630 <USBD_Get_USB_Status>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5d2:	78fa      	ldrb	r2, [r7, #3]
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7f8 fc99 	bl	8003f0e <HAL_PCD_EP_GetRxCount>
 800b5dc:	4603      	mov	r3, r0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5f0:	4b03      	ldr	r3, [pc, #12]	; (800b600 <USBD_static_malloc+0x18>)
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	200001a0 	.word	0x200001a0

0800b604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]

}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	2b03      	cmp	r3, #3
 800b642:	d817      	bhi.n	800b674 <USBD_Get_USB_Status+0x44>
 800b644:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <USBD_Get_USB_Status+0x1c>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b65d 	.word	0x0800b65d
 800b650:	0800b663 	.word	0x0800b663
 800b654:	0800b669 	.word	0x0800b669
 800b658:	0800b66f 	.word	0x0800b66f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
    break;
 800b660:	e00b      	b.n	800b67a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b662:	2302      	movs	r3, #2
 800b664:	73fb      	strb	r3, [r7, #15]
    break;
 800b666:	e008      	b.n	800b67a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b668:	2301      	movs	r3, #1
 800b66a:	73fb      	strb	r3, [r7, #15]
    break;
 800b66c:	e005      	b.n	800b67a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b66e:	2302      	movs	r3, #2
 800b670:	73fb      	strb	r3, [r7, #15]
    break;
 800b672:	e002      	b.n	800b67a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b674:	2302      	movs	r3, #2
 800b676:	73fb      	strb	r3, [r7, #15]
    break;
 800b678:	bf00      	nop
  }
  return usb_status;
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <__libc_init_array>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	4d0d      	ldr	r5, [pc, #52]	; (800b6c0 <__libc_init_array+0x38>)
 800b68c:	4c0d      	ldr	r4, [pc, #52]	; (800b6c4 <__libc_init_array+0x3c>)
 800b68e:	1b64      	subs	r4, r4, r5
 800b690:	10a4      	asrs	r4, r4, #2
 800b692:	2600      	movs	r6, #0
 800b694:	42a6      	cmp	r6, r4
 800b696:	d109      	bne.n	800b6ac <__libc_init_array+0x24>
 800b698:	4d0b      	ldr	r5, [pc, #44]	; (800b6c8 <__libc_init_array+0x40>)
 800b69a:	4c0c      	ldr	r4, [pc, #48]	; (800b6cc <__libc_init_array+0x44>)
 800b69c:	f001 f856 	bl	800c74c <_init>
 800b6a0:	1b64      	subs	r4, r4, r5
 800b6a2:	10a4      	asrs	r4, r4, #2
 800b6a4:	2600      	movs	r6, #0
 800b6a6:	42a6      	cmp	r6, r4
 800b6a8:	d105      	bne.n	800b6b6 <__libc_init_array+0x2e>
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b0:	4798      	blx	r3
 800b6b2:	3601      	adds	r6, #1
 800b6b4:	e7ee      	b.n	800b694 <__libc_init_array+0xc>
 800b6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ba:	4798      	blx	r3
 800b6bc:	3601      	adds	r6, #1
 800b6be:	e7f2      	b.n	800b6a6 <__libc_init_array+0x1e>
 800b6c0:	0800c9b0 	.word	0x0800c9b0
 800b6c4:	0800c9b0 	.word	0x0800c9b0
 800b6c8:	0800c9b0 	.word	0x0800c9b0
 800b6cc:	0800c9b4 	.word	0x0800c9b4

0800b6d0 <memset>:
 800b6d0:	4402      	add	r2, r0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d100      	bne.n	800b6da <memset+0xa>
 800b6d8:	4770      	bx	lr
 800b6da:	f803 1b01 	strb.w	r1, [r3], #1
 800b6de:	e7f9      	b.n	800b6d4 <memset+0x4>

0800b6e0 <sin>:
 800b6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6e2:	ec53 2b10 	vmov	r2, r3, d0
 800b6e6:	4826      	ldr	r0, [pc, #152]	; (800b780 <sin+0xa0>)
 800b6e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6ec:	4281      	cmp	r1, r0
 800b6ee:	dc07      	bgt.n	800b700 <sin+0x20>
 800b6f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b778 <sin+0x98>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f000 fe5b 	bl	800c3b0 <__kernel_sin>
 800b6fa:	ec51 0b10 	vmov	r0, r1, d0
 800b6fe:	e007      	b.n	800b710 <sin+0x30>
 800b700:	4820      	ldr	r0, [pc, #128]	; (800b784 <sin+0xa4>)
 800b702:	4281      	cmp	r1, r0
 800b704:	dd09      	ble.n	800b71a <sin+0x3a>
 800b706:	ee10 0a10 	vmov	r0, s0
 800b70a:	4619      	mov	r1, r3
 800b70c:	f7f4 fd60 	bl	80001d0 <__aeabi_dsub>
 800b710:	ec41 0b10 	vmov	d0, r0, r1
 800b714:	b005      	add	sp, #20
 800b716:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71a:	4668      	mov	r0, sp
 800b71c:	f000 f834 	bl	800b788 <__ieee754_rem_pio2>
 800b720:	f000 0003 	and.w	r0, r0, #3
 800b724:	2801      	cmp	r0, #1
 800b726:	d008      	beq.n	800b73a <sin+0x5a>
 800b728:	2802      	cmp	r0, #2
 800b72a:	d00d      	beq.n	800b748 <sin+0x68>
 800b72c:	b9d0      	cbnz	r0, 800b764 <sin+0x84>
 800b72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b732:	ed9d 0b00 	vldr	d0, [sp]
 800b736:	2001      	movs	r0, #1
 800b738:	e7dd      	b.n	800b6f6 <sin+0x16>
 800b73a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b73e:	ed9d 0b00 	vldr	d0, [sp]
 800b742:	f000 fa2d 	bl	800bba0 <__kernel_cos>
 800b746:	e7d8      	b.n	800b6fa <sin+0x1a>
 800b748:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b74c:	ed9d 0b00 	vldr	d0, [sp]
 800b750:	2001      	movs	r0, #1
 800b752:	f000 fe2d 	bl	800c3b0 <__kernel_sin>
 800b756:	ec53 2b10 	vmov	r2, r3, d0
 800b75a:	ee10 0a10 	vmov	r0, s0
 800b75e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b762:	e7d5      	b.n	800b710 <sin+0x30>
 800b764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b768:	ed9d 0b00 	vldr	d0, [sp]
 800b76c:	f000 fa18 	bl	800bba0 <__kernel_cos>
 800b770:	e7f1      	b.n	800b756 <sin+0x76>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
	...
 800b780:	3fe921fb 	.word	0x3fe921fb
 800b784:	7fefffff 	.word	0x7fefffff

0800b788 <__ieee754_rem_pio2>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	ed2d 8b02 	vpush	{d8}
 800b790:	ec55 4b10 	vmov	r4, r5, d0
 800b794:	4bca      	ldr	r3, [pc, #808]	; (800bac0 <__ieee754_rem_pio2+0x338>)
 800b796:	b08b      	sub	sp, #44	; 0x2c
 800b798:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b79c:	4598      	cmp	r8, r3
 800b79e:	4682      	mov	sl, r0
 800b7a0:	9502      	str	r5, [sp, #8]
 800b7a2:	dc08      	bgt.n	800b7b6 <__ieee754_rem_pio2+0x2e>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	ed80 0b00 	vstr	d0, [r0]
 800b7ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7b0:	f04f 0b00 	mov.w	fp, #0
 800b7b4:	e028      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800b7b6:	4bc3      	ldr	r3, [pc, #780]	; (800bac4 <__ieee754_rem_pio2+0x33c>)
 800b7b8:	4598      	cmp	r8, r3
 800b7ba:	dc78      	bgt.n	800b8ae <__ieee754_rem_pio2+0x126>
 800b7bc:	9b02      	ldr	r3, [sp, #8]
 800b7be:	4ec2      	ldr	r6, [pc, #776]	; (800bac8 <__ieee754_rem_pio2+0x340>)
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	ee10 0a10 	vmov	r0, s0
 800b7c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x300>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	dd39      	ble.n	800b844 <__ieee754_rem_pio2+0xbc>
 800b7d0:	f7f4 fcfe 	bl	80001d0 <__aeabi_dsub>
 800b7d4:	45b0      	cmp	r8, r6
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	d01b      	beq.n	800b814 <__ieee754_rem_pio2+0x8c>
 800b7dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fcf5 	bl	80001d0 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e9ca 2300 	strd	r2, r3, [sl]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f4 fced 	bl	80001d0 <__aeabi_dsub>
 800b7f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 fce8 	bl	80001d0 <__aeabi_dsub>
 800b800:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b804:	f04f 0b01 	mov.w	fp, #1
 800b808:	4658      	mov	r0, fp
 800b80a:	b00b      	add	sp, #44	; 0x2c
 800b80c:	ecbd 8b02 	vpop	{d8}
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fcd9 	bl	80001d0 <__aeabi_dsub>
 800b81e:	a3a0      	add	r3, pc, #640	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	4604      	mov	r4, r0
 800b826:	460d      	mov	r5, r1
 800b828:	f7f4 fcd2 	bl	80001d0 <__aeabi_dsub>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	e9ca 2300 	strd	r2, r3, [sl]
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f4 fcca 	bl	80001d0 <__aeabi_dsub>
 800b83c:	a398      	add	r3, pc, #608	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	e7db      	b.n	800b7fc <__ieee754_rem_pio2+0x74>
 800b844:	f7f4 fcc6 	bl	80001d4 <__adddf3>
 800b848:	45b0      	cmp	r8, r6
 800b84a:	4604      	mov	r4, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	d016      	beq.n	800b87e <__ieee754_rem_pio2+0xf6>
 800b850:	a38f      	add	r3, pc, #572	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fcbd 	bl	80001d4 <__adddf3>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	e9ca 2300 	strd	r2, r3, [sl]
 800b862:	4620      	mov	r0, r4
 800b864:	4629      	mov	r1, r5
 800b866:	f7f4 fcb3 	bl	80001d0 <__aeabi_dsub>
 800b86a:	a389      	add	r3, pc, #548	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fcb0 	bl	80001d4 <__adddf3>
 800b874:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b878:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b87c:	e7c4      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800b87e:	a386      	add	r3, pc, #536	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fca6 	bl	80001d4 <__adddf3>
 800b888:	a385      	add	r3, pc, #532	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	f7f4 fc9f 	bl	80001d4 <__adddf3>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	e9ca 2300 	strd	r2, r3, [sl]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f4 fc95 	bl	80001d0 <__aeabi_dsub>
 800b8a6:	a37e      	add	r3, pc, #504	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	e7e0      	b.n	800b870 <__ieee754_rem_pio2+0xe8>
 800b8ae:	4b87      	ldr	r3, [pc, #540]	; (800bacc <__ieee754_rem_pio2+0x344>)
 800b8b0:	4598      	cmp	r8, r3
 800b8b2:	f300 80d9 	bgt.w	800ba68 <__ieee754_rem_pio2+0x2e0>
 800b8b6:	f000 fe39 	bl	800c52c <fabs>
 800b8ba:	ec55 4b10 	vmov	r4, r5, d0
 800b8be:	ee10 0a10 	vmov	r0, s0
 800b8c2:	a379      	add	r3, pc, #484	; (adr r3, 800baa8 <__ieee754_rem_pio2+0x320>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f4 fe39 	bl	8000540 <__aeabi_dmul>
 800b8ce:	4b80      	ldr	r3, [pc, #512]	; (800bad0 <__ieee754_rem_pio2+0x348>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f7f4 fc7f 	bl	80001d4 <__adddf3>
 800b8d6:	f7f5 f8cd 	bl	8000a74 <__aeabi_d2iz>
 800b8da:	4683      	mov	fp, r0
 800b8dc:	f7f4 fdc6 	bl	800046c <__aeabi_i2d>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	ec43 2b18 	vmov	d8, r2, r3
 800b8e8:	a367      	add	r3, pc, #412	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x300>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fe27 	bl	8000540 <__aeabi_dmul>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f4 fc69 	bl	80001d0 <__aeabi_dsub>
 800b8fe:	a364      	add	r3, pc, #400	; (adr r3, 800ba90 <__ieee754_rem_pio2+0x308>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	ec51 0b18 	vmov	r0, r1, d8
 800b90c:	f7f4 fe18 	bl	8000540 <__aeabi_dmul>
 800b910:	f1bb 0f1f 	cmp.w	fp, #31
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	dc0d      	bgt.n	800b936 <__ieee754_rem_pio2+0x1ae>
 800b91a:	4b6e      	ldr	r3, [pc, #440]	; (800bad4 <__ieee754_rem_pio2+0x34c>)
 800b91c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b924:	4543      	cmp	r3, r8
 800b926:	d006      	beq.n	800b936 <__ieee754_rem_pio2+0x1ae>
 800b928:	4622      	mov	r2, r4
 800b92a:	462b      	mov	r3, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f4 fc4e 	bl	80001d0 <__aeabi_dsub>
 800b934:	e00f      	b.n	800b956 <__ieee754_rem_pio2+0x1ce>
 800b936:	462b      	mov	r3, r5
 800b938:	4622      	mov	r2, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	4639      	mov	r1, r7
 800b93e:	f7f4 fc47 	bl	80001d0 <__aeabi_dsub>
 800b942:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b94c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b950:	f1b8 0f10 	cmp.w	r8, #16
 800b954:	dc02      	bgt.n	800b95c <__ieee754_rem_pio2+0x1d4>
 800b956:	e9ca 0100 	strd	r0, r1, [sl]
 800b95a:	e039      	b.n	800b9d0 <__ieee754_rem_pio2+0x248>
 800b95c:	a34e      	add	r3, pc, #312	; (adr r3, 800ba98 <__ieee754_rem_pio2+0x310>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	ec51 0b18 	vmov	r0, r1, d8
 800b966:	f7f4 fdeb 	bl	8000540 <__aeabi_dmul>
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f4 fc2b 	bl	80001d0 <__aeabi_dsub>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4680      	mov	r8, r0
 800b980:	4689      	mov	r9, r1
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f4 fc23 	bl	80001d0 <__aeabi_dsub>
 800b98a:	4622      	mov	r2, r4
 800b98c:	462b      	mov	r3, r5
 800b98e:	f7f4 fc1f 	bl	80001d0 <__aeabi_dsub>
 800b992:	a343      	add	r3, pc, #268	; (adr r3, 800baa0 <__ieee754_rem_pio2+0x318>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	ec51 0b18 	vmov	r0, r1, d8
 800b9a0:	f7f4 fdce 	bl	8000540 <__aeabi_dmul>
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	f7f4 fc12 	bl	80001d0 <__aeabi_dsub>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	f7f4 fc0a 	bl	80001d0 <__aeabi_dsub>
 800b9bc:	9a03      	ldr	r2, [sp, #12]
 800b9be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b31      	cmp	r3, #49	; 0x31
 800b9c6:	dc24      	bgt.n	800ba12 <__ieee754_rem_pio2+0x28a>
 800b9c8:	e9ca 0100 	strd	r0, r1, [sl]
 800b9cc:	4646      	mov	r6, r8
 800b9ce:	464f      	mov	r7, r9
 800b9d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f4 fbf8 	bl	80001d0 <__aeabi_dsub>
 800b9e0:	462b      	mov	r3, r5
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	f7f4 fbf4 	bl	80001d0 <__aeabi_dsub>
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f0:	f6bf af0a 	bge.w	800b808 <__ieee754_rem_pio2+0x80>
 800b9f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9fc:	f8ca 8000 	str.w	r8, [sl]
 800ba00:	f8ca 0008 	str.w	r0, [sl, #8]
 800ba04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba08:	f8ca 300c 	str.w	r3, [sl, #12]
 800ba0c:	f1cb 0b00 	rsb	fp, fp, #0
 800ba10:	e6fa      	b.n	800b808 <__ieee754_rem_pio2+0x80>
 800ba12:	a327      	add	r3, pc, #156	; (adr r3, 800bab0 <__ieee754_rem_pio2+0x328>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	ec51 0b18 	vmov	r0, r1, d8
 800ba1c:	f7f4 fd90 	bl	8000540 <__aeabi_dmul>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7f4 fbd0 	bl	80001d0 <__aeabi_dsub>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f4 fbc8 	bl	80001d0 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fbc4 	bl	80001d0 <__aeabi_dsub>
 800ba48:	a31b      	add	r3, pc, #108	; (adr r3, 800bab8 <__ieee754_rem_pio2+0x330>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	ec51 0b18 	vmov	r0, r1, d8
 800ba56:	f7f4 fd73 	bl	8000540 <__aeabi_dmul>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	f7f4 fbb7 	bl	80001d0 <__aeabi_dsub>
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	e75f      	b.n	800b928 <__ieee754_rem_pio2+0x1a0>
 800ba68:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <__ieee754_rem_pio2+0x350>)
 800ba6a:	4598      	cmp	r8, r3
 800ba6c:	dd36      	ble.n	800badc <__ieee754_rem_pio2+0x354>
 800ba6e:	ee10 2a10 	vmov	r2, s0
 800ba72:	462b      	mov	r3, r5
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fbaa 	bl	80001d0 <__aeabi_dsub>
 800ba7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba80:	e9ca 0100 	strd	r0, r1, [sl]
 800ba84:	e694      	b.n	800b7b0 <__ieee754_rem_pio2+0x28>
 800ba86:	bf00      	nop
 800ba88:	54400000 	.word	0x54400000
 800ba8c:	3ff921fb 	.word	0x3ff921fb
 800ba90:	1a626331 	.word	0x1a626331
 800ba94:	3dd0b461 	.word	0x3dd0b461
 800ba98:	1a600000 	.word	0x1a600000
 800ba9c:	3dd0b461 	.word	0x3dd0b461
 800baa0:	2e037073 	.word	0x2e037073
 800baa4:	3ba3198a 	.word	0x3ba3198a
 800baa8:	6dc9c883 	.word	0x6dc9c883
 800baac:	3fe45f30 	.word	0x3fe45f30
 800bab0:	2e000000 	.word	0x2e000000
 800bab4:	3ba3198a 	.word	0x3ba3198a
 800bab8:	252049c1 	.word	0x252049c1
 800babc:	397b839a 	.word	0x397b839a
 800bac0:	3fe921fb 	.word	0x3fe921fb
 800bac4:	4002d97b 	.word	0x4002d97b
 800bac8:	3ff921fb 	.word	0x3ff921fb
 800bacc:	413921fb 	.word	0x413921fb
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	0800c7d8 	.word	0x0800c7d8
 800bad8:	7fefffff 	.word	0x7fefffff
 800badc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bae0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bae4:	ee10 0a10 	vmov	r0, s0
 800bae8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800baec:	ee10 6a10 	vmov	r6, s0
 800baf0:	460f      	mov	r7, r1
 800baf2:	f7f4 ffbf 	bl	8000a74 <__aeabi_d2iz>
 800baf6:	f7f4 fcb9 	bl	800046c <__aeabi_i2d>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb06:	f7f4 fb63 	bl	80001d0 <__aeabi_dsub>
 800bb0a:	4b22      	ldr	r3, [pc, #136]	; (800bb94 <__ieee754_rem_pio2+0x40c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f7f4 fd17 	bl	8000540 <__aeabi_dmul>
 800bb12:	460f      	mov	r7, r1
 800bb14:	4606      	mov	r6, r0
 800bb16:	f7f4 ffad 	bl	8000a74 <__aeabi_d2iz>
 800bb1a:	f7f4 fca7 	bl	800046c <__aeabi_i2d>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4630      	mov	r0, r6
 800bb24:	4639      	mov	r1, r7
 800bb26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb2a:	f7f4 fb51 	bl	80001d0 <__aeabi_dsub>
 800bb2e:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <__ieee754_rem_pio2+0x40c>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7f4 fd05 	bl	8000540 <__aeabi_dmul>
 800bb36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb3a:	ad04      	add	r5, sp, #16
 800bb3c:	f04f 0803 	mov.w	r8, #3
 800bb40:	46a9      	mov	r9, r5
 800bb42:	2600      	movs	r6, #0
 800bb44:	2700      	movs	r7, #0
 800bb46:	4632      	mov	r2, r6
 800bb48:	463b      	mov	r3, r7
 800bb4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb4e:	46c3      	mov	fp, r8
 800bb50:	3d08      	subs	r5, #8
 800bb52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb56:	f7f4 ff5b 	bl	8000a10 <__aeabi_dcmpeq>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1f3      	bne.n	800bb46 <__ieee754_rem_pio2+0x3be>
 800bb5e:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <__ieee754_rem_pio2+0x410>)
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	2302      	movs	r3, #2
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4622      	mov	r2, r4
 800bb68:	465b      	mov	r3, fp
 800bb6a:	4651      	mov	r1, sl
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f000 f8df 	bl	800bd30 <__kernel_rem_pio2>
 800bb72:	9b02      	ldr	r3, [sp, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	4683      	mov	fp, r0
 800bb78:	f6bf ae46 	bge.w	800b808 <__ieee754_rem_pio2+0x80>
 800bb7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bb80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb88:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bb8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb90:	e73a      	b.n	800ba08 <__ieee754_rem_pio2+0x280>
 800bb92:	bf00      	nop
 800bb94:	41700000 	.word	0x41700000
 800bb98:	0800c858 	.word	0x0800c858
 800bb9c:	00000000 	.word	0x00000000

0800bba0 <__kernel_cos>:
 800bba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	ec57 6b10 	vmov	r6, r7, d0
 800bba8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bbac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bbb0:	ed8d 1b00 	vstr	d1, [sp]
 800bbb4:	da07      	bge.n	800bbc6 <__kernel_cos+0x26>
 800bbb6:	ee10 0a10 	vmov	r0, s0
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 ff5a 	bl	8000a74 <__aeabi_d2iz>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f000 8088 	beq.w	800bcd6 <__kernel_cos+0x136>
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	463b      	mov	r3, r7
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fcb7 	bl	8000540 <__aeabi_dmul>
 800bbd2:	4b51      	ldr	r3, [pc, #324]	; (800bd18 <__kernel_cos+0x178>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	f7f4 fcb1 	bl	8000540 <__aeabi_dmul>
 800bbde:	a340      	add	r3, pc, #256	; (adr r3, 800bce0 <__kernel_cos+0x140>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	468b      	mov	fp, r1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	f7f4 fca8 	bl	8000540 <__aeabi_dmul>
 800bbf0:	a33d      	add	r3, pc, #244	; (adr r3, 800bce8 <__kernel_cos+0x148>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 faed 	bl	80001d4 <__adddf3>
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	f7f4 fc9f 	bl	8000540 <__aeabi_dmul>
 800bc02:	a33b      	add	r3, pc, #236	; (adr r3, 800bcf0 <__kernel_cos+0x150>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 fae2 	bl	80001d0 <__aeabi_dsub>
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	462b      	mov	r3, r5
 800bc10:	f7f4 fc96 	bl	8000540 <__aeabi_dmul>
 800bc14:	a338      	add	r3, pc, #224	; (adr r3, 800bcf8 <__kernel_cos+0x158>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f7f4 fadb 	bl	80001d4 <__adddf3>
 800bc1e:	4622      	mov	r2, r4
 800bc20:	462b      	mov	r3, r5
 800bc22:	f7f4 fc8d 	bl	8000540 <__aeabi_dmul>
 800bc26:	a336      	add	r3, pc, #216	; (adr r3, 800bd00 <__kernel_cos+0x160>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f7f4 fad0 	bl	80001d0 <__aeabi_dsub>
 800bc30:	4622      	mov	r2, r4
 800bc32:	462b      	mov	r3, r5
 800bc34:	f7f4 fc84 	bl	8000540 <__aeabi_dmul>
 800bc38:	a333      	add	r3, pc, #204	; (adr r3, 800bd08 <__kernel_cos+0x168>)
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f7f4 fac9 	bl	80001d4 <__adddf3>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	f7f4 fc7b 	bl	8000540 <__aeabi_dmul>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fc77 	bl	8000540 <__aeabi_dmul>
 800bc52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc56:	4604      	mov	r4, r0
 800bc58:	460d      	mov	r5, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 fc6f 	bl	8000540 <__aeabi_dmul>
 800bc62:	460b      	mov	r3, r1
 800bc64:	4602      	mov	r2, r0
 800bc66:	4629      	mov	r1, r5
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7f4 fab1 	bl	80001d0 <__aeabi_dsub>
 800bc6e:	4b2b      	ldr	r3, [pc, #172]	; (800bd1c <__kernel_cos+0x17c>)
 800bc70:	4598      	cmp	r8, r3
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	dc10      	bgt.n	800bc9a <__kernel_cos+0xfa>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	4659      	mov	r1, fp
 800bc80:	f7f4 faa6 	bl	80001d0 <__aeabi_dsub>
 800bc84:	460b      	mov	r3, r1
 800bc86:	4926      	ldr	r1, [pc, #152]	; (800bd20 <__kernel_cos+0x180>)
 800bc88:	4602      	mov	r2, r0
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f7f4 faa0 	bl	80001d0 <__aeabi_dsub>
 800bc90:	ec41 0b10 	vmov	d0, r0, r1
 800bc94:	b003      	add	sp, #12
 800bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9a:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <__kernel_cos+0x184>)
 800bc9c:	4920      	ldr	r1, [pc, #128]	; (800bd20 <__kernel_cos+0x180>)
 800bc9e:	4598      	cmp	r8, r3
 800bca0:	bfcc      	ite	gt
 800bca2:	4d21      	ldrgt	r5, [pc, #132]	; (800bd28 <__kernel_cos+0x188>)
 800bca4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bca8:	2400      	movs	r4, #0
 800bcaa:	4622      	mov	r2, r4
 800bcac:	462b      	mov	r3, r5
 800bcae:	2000      	movs	r0, #0
 800bcb0:	f7f4 fa8e 	bl	80001d0 <__aeabi_dsub>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	4689      	mov	r9, r1
 800bcba:	462b      	mov	r3, r5
 800bcbc:	4650      	mov	r0, sl
 800bcbe:	4659      	mov	r1, fp
 800bcc0:	f7f4 fa86 	bl	80001d0 <__aeabi_dsub>
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	f7f4 fa82 	bl	80001d0 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	e7da      	b.n	800bc8c <__kernel_cos+0xec>
 800bcd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bd10 <__kernel_cos+0x170>
 800bcda:	e7db      	b.n	800bc94 <__kernel_cos+0xf4>
 800bcdc:	f3af 8000 	nop.w
 800bce0:	be8838d4 	.word	0xbe8838d4
 800bce4:	bda8fae9 	.word	0xbda8fae9
 800bce8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bcec:	3e21ee9e 	.word	0x3e21ee9e
 800bcf0:	809c52ad 	.word	0x809c52ad
 800bcf4:	3e927e4f 	.word	0x3e927e4f
 800bcf8:	19cb1590 	.word	0x19cb1590
 800bcfc:	3efa01a0 	.word	0x3efa01a0
 800bd00:	16c15177 	.word	0x16c15177
 800bd04:	3f56c16c 	.word	0x3f56c16c
 800bd08:	5555554c 	.word	0x5555554c
 800bd0c:	3fa55555 	.word	0x3fa55555
 800bd10:	00000000 	.word	0x00000000
 800bd14:	3ff00000 	.word	0x3ff00000
 800bd18:	3fe00000 	.word	0x3fe00000
 800bd1c:	3fd33332 	.word	0x3fd33332
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	3fe90000 	.word	0x3fe90000
 800bd28:	3fd20000 	.word	0x3fd20000
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <__kernel_rem_pio2>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	ed2d 8b02 	vpush	{d8}
 800bd38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bd3c:	f112 0f14 	cmn.w	r2, #20
 800bd40:	9308      	str	r3, [sp, #32]
 800bd42:	9101      	str	r1, [sp, #4]
 800bd44:	4bc6      	ldr	r3, [pc, #792]	; (800c060 <__kernel_rem_pio2+0x330>)
 800bd46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bd48:	9009      	str	r0, [sp, #36]	; 0x24
 800bd4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bd56:	bfa8      	it	ge
 800bd58:	1ed4      	subge	r4, r2, #3
 800bd5a:	9306      	str	r3, [sp, #24]
 800bd5c:	bfb2      	itee	lt
 800bd5e:	2400      	movlt	r4, #0
 800bd60:	2318      	movge	r3, #24
 800bd62:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd66:	f06f 0317 	mvn.w	r3, #23
 800bd6a:	fb04 3303 	mla	r3, r4, r3, r3
 800bd6e:	eb03 0a02 	add.w	sl, r3, r2
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	9a06      	ldr	r2, [sp, #24]
 800bd76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c050 <__kernel_rem_pio2+0x320>
 800bd7a:	eb03 0802 	add.w	r8, r3, r2
 800bd7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd80:	1aa7      	subs	r7, r4, r2
 800bd82:	ae20      	add	r6, sp, #128	; 0x80
 800bd84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd88:	2500      	movs	r5, #0
 800bd8a:	4545      	cmp	r5, r8
 800bd8c:	dd18      	ble.n	800bdc0 <__kernel_rem_pio2+0x90>
 800bd8e:	9b08      	ldr	r3, [sp, #32]
 800bd90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bd94:	aa20      	add	r2, sp, #128	; 0x80
 800bd96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c050 <__kernel_rem_pio2+0x320>
 800bd9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd9e:	f1c3 0301 	rsb	r3, r3, #1
 800bda2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bda6:	9307      	str	r3, [sp, #28]
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	4443      	add	r3, r8
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	db2f      	blt.n	800be12 <__kernel_rem_pio2+0xe2>
 800bdb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bdba:	462f      	mov	r7, r5
 800bdbc:	2600      	movs	r6, #0
 800bdbe:	e01b      	b.n	800bdf8 <__kernel_rem_pio2+0xc8>
 800bdc0:	42ef      	cmn	r7, r5
 800bdc2:	d407      	bmi.n	800bdd4 <__kernel_rem_pio2+0xa4>
 800bdc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdc8:	f7f4 fb50 	bl	800046c <__aeabi_i2d>
 800bdcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7da      	b.n	800bd8a <__kernel_rem_pio2+0x5a>
 800bdd4:	ec51 0b18 	vmov	r0, r1, d8
 800bdd8:	e7f8      	b.n	800bdcc <__kernel_rem_pio2+0x9c>
 800bdda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bde2:	f7f4 fbad 	bl	8000540 <__aeabi_dmul>
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdee:	f7f4 f9f1 	bl	80001d4 <__adddf3>
 800bdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	429e      	cmp	r6, r3
 800bdfc:	f1a7 0708 	sub.w	r7, r7, #8
 800be00:	ddeb      	ble.n	800bdda <__kernel_rem_pio2+0xaa>
 800be02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be06:	3508      	adds	r5, #8
 800be08:	ecab 7b02 	vstmia	fp!, {d7}
 800be0c:	f108 0801 	add.w	r8, r8, #1
 800be10:	e7ca      	b.n	800bda8 <__kernel_rem_pio2+0x78>
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	aa0c      	add	r2, sp, #48	; 0x30
 800be16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800be1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be22:	9c04      	ldr	r4, [sp, #16]
 800be24:	930a      	str	r3, [sp, #40]	; 0x28
 800be26:	ab98      	add	r3, sp, #608	; 0x260
 800be28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800be30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800be34:	f8cd b008 	str.w	fp, [sp, #8]
 800be38:	4625      	mov	r5, r4
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	dc78      	bgt.n	800bf30 <__kernel_rem_pio2+0x200>
 800be3e:	ec47 6b10 	vmov	d0, r6, r7
 800be42:	4650      	mov	r0, sl
 800be44:	f000 fbfc 	bl	800c640 <scalbn>
 800be48:	ec57 6b10 	vmov	r6, r7, d0
 800be4c:	2200      	movs	r2, #0
 800be4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800be52:	ee10 0a10 	vmov	r0, s0
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fb72 	bl	8000540 <__aeabi_dmul>
 800be5c:	ec41 0b10 	vmov	d0, r0, r1
 800be60:	f000 fb6e 	bl	800c540 <floor>
 800be64:	4b7f      	ldr	r3, [pc, #508]	; (800c064 <__kernel_rem_pio2+0x334>)
 800be66:	ec51 0b10 	vmov	r0, r1, d0
 800be6a:	2200      	movs	r2, #0
 800be6c:	f7f4 fb68 	bl	8000540 <__aeabi_dmul>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4630      	mov	r0, r6
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 f9aa 	bl	80001d0 <__aeabi_dsub>
 800be7c:	460f      	mov	r7, r1
 800be7e:	4606      	mov	r6, r0
 800be80:	f7f4 fdf8 	bl	8000a74 <__aeabi_d2iz>
 800be84:	9007      	str	r0, [sp, #28]
 800be86:	f7f4 faf1 	bl	800046c <__aeabi_i2d>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 f99d 	bl	80001d0 <__aeabi_dsub>
 800be96:	f1ba 0f00 	cmp.w	sl, #0
 800be9a:	4606      	mov	r6, r0
 800be9c:	460f      	mov	r7, r1
 800be9e:	dd70      	ble.n	800bf82 <__kernel_rem_pio2+0x252>
 800bea0:	1e62      	subs	r2, r4, #1
 800bea2:	ab0c      	add	r3, sp, #48	; 0x30
 800bea4:	9d07      	ldr	r5, [sp, #28]
 800bea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800beaa:	f1ca 0118 	rsb	r1, sl, #24
 800beae:	fa40 f301 	asr.w	r3, r0, r1
 800beb2:	441d      	add	r5, r3
 800beb4:	408b      	lsls	r3, r1
 800beb6:	1ac0      	subs	r0, r0, r3
 800beb8:	ab0c      	add	r3, sp, #48	; 0x30
 800beba:	9507      	str	r5, [sp, #28]
 800bebc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bec0:	f1ca 0317 	rsb	r3, sl, #23
 800bec4:	fa40 f303 	asr.w	r3, r0, r3
 800bec8:	9302      	str	r3, [sp, #8]
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd66      	ble.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	2200      	movs	r2, #0
 800bed4:	3301      	adds	r3, #1
 800bed6:	9307      	str	r3, [sp, #28]
 800bed8:	4615      	mov	r5, r2
 800beda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bede:	4294      	cmp	r4, r2
 800bee0:	f300 8099 	bgt.w	800c016 <__kernel_rem_pio2+0x2e6>
 800bee4:	f1ba 0f00 	cmp.w	sl, #0
 800bee8:	dd07      	ble.n	800befa <__kernel_rem_pio2+0x1ca>
 800beea:	f1ba 0f01 	cmp.w	sl, #1
 800beee:	f000 80a5 	beq.w	800c03c <__kernel_rem_pio2+0x30c>
 800bef2:	f1ba 0f02 	cmp.w	sl, #2
 800bef6:	f000 80c1 	beq.w	800c07c <__kernel_rem_pio2+0x34c>
 800befa:	9b02      	ldr	r3, [sp, #8]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d14e      	bne.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf00:	4632      	mov	r2, r6
 800bf02:	463b      	mov	r3, r7
 800bf04:	4958      	ldr	r1, [pc, #352]	; (800c068 <__kernel_rem_pio2+0x338>)
 800bf06:	2000      	movs	r0, #0
 800bf08:	f7f4 f962 	bl	80001d0 <__aeabi_dsub>
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	460f      	mov	r7, r1
 800bf10:	2d00      	cmp	r5, #0
 800bf12:	d044      	beq.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf14:	4650      	mov	r0, sl
 800bf16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c058 <__kernel_rem_pio2+0x328>
 800bf1a:	f000 fb91 	bl	800c640 <scalbn>
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4639      	mov	r1, r7
 800bf22:	ec53 2b10 	vmov	r2, r3, d0
 800bf26:	f7f4 f953 	bl	80001d0 <__aeabi_dsub>
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	e036      	b.n	800bf9e <__kernel_rem_pio2+0x26e>
 800bf30:	4b4e      	ldr	r3, [pc, #312]	; (800c06c <__kernel_rem_pio2+0x33c>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	4630      	mov	r0, r6
 800bf36:	4639      	mov	r1, r7
 800bf38:	f7f4 fb02 	bl	8000540 <__aeabi_dmul>
 800bf3c:	f7f4 fd9a 	bl	8000a74 <__aeabi_d2iz>
 800bf40:	f7f4 fa94 	bl	800046c <__aeabi_i2d>
 800bf44:	4b4a      	ldr	r3, [pc, #296]	; (800c070 <__kernel_rem_pio2+0x340>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	4680      	mov	r8, r0
 800bf4a:	4689      	mov	r9, r1
 800bf4c:	f7f4 faf8 	bl	8000540 <__aeabi_dmul>
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	4630      	mov	r0, r6
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 f93a 	bl	80001d0 <__aeabi_dsub>
 800bf5c:	f7f4 fd8a 	bl	8000a74 <__aeabi_d2iz>
 800bf60:	9b02      	ldr	r3, [sp, #8]
 800bf62:	f843 0b04 	str.w	r0, [r3], #4
 800bf66:	3d01      	subs	r5, #1
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	ab70      	add	r3, sp, #448	; 0x1c0
 800bf6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	f7f4 f92c 	bl	80001d4 <__adddf3>
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	460f      	mov	r7, r1
 800bf80:	e75b      	b.n	800be3a <__kernel_rem_pio2+0x10a>
 800bf82:	d105      	bne.n	800bf90 <__kernel_rem_pio2+0x260>
 800bf84:	1e63      	subs	r3, r4, #1
 800bf86:	aa0c      	add	r2, sp, #48	; 0x30
 800bf88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf8c:	15c3      	asrs	r3, r0, #23
 800bf8e:	e79b      	b.n	800bec8 <__kernel_rem_pio2+0x198>
 800bf90:	4b38      	ldr	r3, [pc, #224]	; (800c074 <__kernel_rem_pio2+0x344>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	f7f4 fd5a 	bl	8000a4c <__aeabi_dcmpge>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d139      	bne.n	800c010 <__kernel_rem_pio2+0x2e0>
 800bf9c:	9002      	str	r0, [sp, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	f7f4 fd33 	bl	8000a10 <__aeabi_dcmpeq>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f000 80b4 	beq.w	800c118 <__kernel_rem_pio2+0x3e8>
 800bfb0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800bfb4:	465b      	mov	r3, fp
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9904      	ldr	r1, [sp, #16]
 800bfba:	428b      	cmp	r3, r1
 800bfbc:	da65      	bge.n	800c08a <__kernel_rem_pio2+0x35a>
 800bfbe:	2a00      	cmp	r2, #0
 800bfc0:	d07b      	beq.n	800c0ba <__kernel_rem_pio2+0x38a>
 800bfc2:	ab0c      	add	r3, sp, #48	; 0x30
 800bfc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bfc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80a0 	beq.w	800c112 <__kernel_rem_pio2+0x3e2>
 800bfd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c058 <__kernel_rem_pio2+0x328>
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f000 fb32 	bl	800c640 <scalbn>
 800bfdc:	4f23      	ldr	r7, [pc, #140]	; (800c06c <__kernel_rem_pio2+0x33c>)
 800bfde:	ec55 4b10 	vmov	r4, r5, d0
 800bfe2:	46d8      	mov	r8, fp
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	f280 80cf 	bge.w	800c18c <__kernel_rem_pio2+0x45c>
 800bfee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c050 <__kernel_rem_pio2+0x320>
 800bff2:	465f      	mov	r7, fp
 800bff4:	f04f 0800 	mov.w	r8, #0
 800bff8:	2f00      	cmp	r7, #0
 800bffa:	f2c0 80fd 	blt.w	800c1f8 <__kernel_rem_pio2+0x4c8>
 800bffe:	ab70      	add	r3, sp, #448	; 0x1c0
 800c000:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c078 <__kernel_rem_pio2+0x348>
 800c004:	ec55 4b18 	vmov	r4, r5, d8
 800c008:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c00c:	2600      	movs	r6, #0
 800c00e:	e0e5      	b.n	800c1dc <__kernel_rem_pio2+0x4ac>
 800c010:	2302      	movs	r3, #2
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	e75c      	b.n	800bed0 <__kernel_rem_pio2+0x1a0>
 800c016:	f8db 3000 	ldr.w	r3, [fp]
 800c01a:	b955      	cbnz	r5, 800c032 <__kernel_rem_pio2+0x302>
 800c01c:	b123      	cbz	r3, 800c028 <__kernel_rem_pio2+0x2f8>
 800c01e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c022:	f8cb 3000 	str.w	r3, [fp]
 800c026:	2301      	movs	r3, #1
 800c028:	3201      	adds	r2, #1
 800c02a:	f10b 0b04 	add.w	fp, fp, #4
 800c02e:	461d      	mov	r5, r3
 800c030:	e755      	b.n	800bede <__kernel_rem_pio2+0x1ae>
 800c032:	1acb      	subs	r3, r1, r3
 800c034:	f8cb 3000 	str.w	r3, [fp]
 800c038:	462b      	mov	r3, r5
 800c03a:	e7f5      	b.n	800c028 <__kernel_rem_pio2+0x2f8>
 800c03c:	1e62      	subs	r2, r4, #1
 800c03e:	ab0c      	add	r3, sp, #48	; 0x30
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c048:	a90c      	add	r1, sp, #48	; 0x30
 800c04a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c04e:	e754      	b.n	800befa <__kernel_rem_pio2+0x1ca>
	...
 800c05c:	3ff00000 	.word	0x3ff00000
 800c060:	0800c9a0 	.word	0x0800c9a0
 800c064:	40200000 	.word	0x40200000
 800c068:	3ff00000 	.word	0x3ff00000
 800c06c:	3e700000 	.word	0x3e700000
 800c070:	41700000 	.word	0x41700000
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	0800c960 	.word	0x0800c960
 800c07c:	1e62      	subs	r2, r4, #1
 800c07e:	ab0c      	add	r3, sp, #48	; 0x30
 800c080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c084:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c088:	e7de      	b.n	800c048 <__kernel_rem_pio2+0x318>
 800c08a:	a90c      	add	r1, sp, #48	; 0x30
 800c08c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c090:	3b01      	subs	r3, #1
 800c092:	430a      	orrs	r2, r1
 800c094:	e790      	b.n	800bfb8 <__kernel_rem_pio2+0x288>
 800c096:	3301      	adds	r3, #1
 800c098:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c09c:	2900      	cmp	r1, #0
 800c09e:	d0fa      	beq.n	800c096 <__kernel_rem_pio2+0x366>
 800c0a0:	9a08      	ldr	r2, [sp, #32]
 800c0a2:	18e3      	adds	r3, r4, r3
 800c0a4:	18a6      	adds	r6, r4, r2
 800c0a6:	aa20      	add	r2, sp, #128	; 0x80
 800c0a8:	1c65      	adds	r5, r4, #1
 800c0aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c0ae:	9302      	str	r3, [sp, #8]
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	42ab      	cmp	r3, r5
 800c0b4:	da04      	bge.n	800c0c0 <__kernel_rem_pio2+0x390>
 800c0b6:	461c      	mov	r4, r3
 800c0b8:	e6b5      	b.n	800be26 <__kernel_rem_pio2+0xf6>
 800c0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e7eb      	b.n	800c098 <__kernel_rem_pio2+0x368>
 800c0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	f7f4 f9d1 	bl	800046c <__aeabi_i2d>
 800c0ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	46b3      	mov	fp, r6
 800c0d2:	461c      	mov	r4, r3
 800c0d4:	2700      	movs	r7, #0
 800c0d6:	f04f 0800 	mov.w	r8, #0
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	429f      	cmp	r7, r3
 800c0e2:	dd06      	ble.n	800c0f2 <__kernel_rem_pio2+0x3c2>
 800c0e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c0e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0ea:	e9c3 8900 	strd	r8, r9, [r3]
 800c0ee:	3501      	adds	r5, #1
 800c0f0:	e7de      	b.n	800c0b0 <__kernel_rem_pio2+0x380>
 800c0f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c0f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c0fa:	f7f4 fa21 	bl	8000540 <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4640      	mov	r0, r8
 800c104:	4649      	mov	r1, r9
 800c106:	f7f4 f865 	bl	80001d4 <__adddf3>
 800c10a:	3701      	adds	r7, #1
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	e7e5      	b.n	800c0de <__kernel_rem_pio2+0x3ae>
 800c112:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c116:	e754      	b.n	800bfc2 <__kernel_rem_pio2+0x292>
 800c118:	ec47 6b10 	vmov	d0, r6, r7
 800c11c:	f1ca 0000 	rsb	r0, sl, #0
 800c120:	f000 fa8e 	bl	800c640 <scalbn>
 800c124:	ec57 6b10 	vmov	r6, r7, d0
 800c128:	4b9f      	ldr	r3, [pc, #636]	; (800c3a8 <__kernel_rem_pio2+0x678>)
 800c12a:	ee10 0a10 	vmov	r0, s0
 800c12e:	2200      	movs	r2, #0
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 fc8b 	bl	8000a4c <__aeabi_dcmpge>
 800c136:	b300      	cbz	r0, 800c17a <__kernel_rem_pio2+0x44a>
 800c138:	4b9c      	ldr	r3, [pc, #624]	; (800c3ac <__kernel_rem_pio2+0x67c>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 f9fe 	bl	8000540 <__aeabi_dmul>
 800c144:	f7f4 fc96 	bl	8000a74 <__aeabi_d2iz>
 800c148:	4605      	mov	r5, r0
 800c14a:	f7f4 f98f 	bl	800046c <__aeabi_i2d>
 800c14e:	4b96      	ldr	r3, [pc, #600]	; (800c3a8 <__kernel_rem_pio2+0x678>)
 800c150:	2200      	movs	r2, #0
 800c152:	f7f4 f9f5 	bl	8000540 <__aeabi_dmul>
 800c156:	460b      	mov	r3, r1
 800c158:	4602      	mov	r2, r0
 800c15a:	4639      	mov	r1, r7
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7f4 f837 	bl	80001d0 <__aeabi_dsub>
 800c162:	f7f4 fc87 	bl	8000a74 <__aeabi_d2iz>
 800c166:	f104 0b01 	add.w	fp, r4, #1
 800c16a:	ab0c      	add	r3, sp, #48	; 0x30
 800c16c:	f10a 0a18 	add.w	sl, sl, #24
 800c170:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c174:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c178:	e72b      	b.n	800bfd2 <__kernel_rem_pio2+0x2a2>
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 fc79 	bl	8000a74 <__aeabi_d2iz>
 800c182:	ab0c      	add	r3, sp, #48	; 0x30
 800c184:	46a3      	mov	fp, r4
 800c186:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c18a:	e722      	b.n	800bfd2 <__kernel_rem_pio2+0x2a2>
 800c18c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c18e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c192:	ab0c      	add	r3, sp, #48	; 0x30
 800c194:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c198:	f7f4 f968 	bl	800046c <__aeabi_i2d>
 800c19c:	4622      	mov	r2, r4
 800c19e:	462b      	mov	r3, r5
 800c1a0:	f7f4 f9ce 	bl	8000540 <__aeabi_dmul>
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	e9c9 0100 	strd	r0, r1, [r9]
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 f9c6 	bl	8000540 <__aeabi_dmul>
 800c1b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	e713      	b.n	800bfe6 <__kernel_rem_pio2+0x2b6>
 800c1be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c1c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c1c6:	f7f4 f9bb 	bl	8000540 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f3 ffff 	bl	80001d4 <__adddf3>
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	429e      	cmp	r6, r3
 800c1e0:	dc01      	bgt.n	800c1e6 <__kernel_rem_pio2+0x4b6>
 800c1e2:	45b0      	cmp	r8, r6
 800c1e4:	daeb      	bge.n	800c1be <__kernel_rem_pio2+0x48e>
 800c1e6:	ab48      	add	r3, sp, #288	; 0x120
 800c1e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1ec:	e9c3 4500 	strd	r4, r5, [r3]
 800c1f0:	3f01      	subs	r7, #1
 800c1f2:	f108 0801 	add.w	r8, r8, #1
 800c1f6:	e6ff      	b.n	800bff8 <__kernel_rem_pio2+0x2c8>
 800c1f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	dc0b      	bgt.n	800c216 <__kernel_rem_pio2+0x4e6>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dc6e      	bgt.n	800c2e0 <__kernel_rem_pio2+0x5b0>
 800c202:	d045      	beq.n	800c290 <__kernel_rem_pio2+0x560>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	f003 0007 	and.w	r0, r3, #7
 800c20a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c20e:	ecbd 8b02 	vpop	{d8}
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d1f3      	bne.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c21c:	ab48      	add	r3, sp, #288	; 0x120
 800c21e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c222:	46d0      	mov	r8, sl
 800c224:	46d9      	mov	r9, fp
 800c226:	f1b9 0f00 	cmp.w	r9, #0
 800c22a:	f1a8 0808 	sub.w	r8, r8, #8
 800c22e:	dc64      	bgt.n	800c2fa <__kernel_rem_pio2+0x5ca>
 800c230:	465c      	mov	r4, fp
 800c232:	2c01      	cmp	r4, #1
 800c234:	f1aa 0a08 	sub.w	sl, sl, #8
 800c238:	dc7e      	bgt.n	800c338 <__kernel_rem_pio2+0x608>
 800c23a:	2000      	movs	r0, #0
 800c23c:	2100      	movs	r1, #0
 800c23e:	f1bb 0f01 	cmp.w	fp, #1
 800c242:	f300 8097 	bgt.w	800c374 <__kernel_rem_pio2+0x644>
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c24c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8099 	bne.w	800c388 <__kernel_rem_pio2+0x658>
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	e9c3 5600 	strd	r5, r6, [r3]
 800c25c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c260:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c264:	e7ce      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c266:	ab48      	add	r3, sp, #288	; 0x120
 800c268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ffb0 	bl	80001d4 <__adddf3>
 800c274:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c278:	f1bb 0f00 	cmp.w	fp, #0
 800c27c:	daf3      	bge.n	800c266 <__kernel_rem_pio2+0x536>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	b113      	cbz	r3, 800c288 <__kernel_rem_pio2+0x558>
 800c282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c286:	4619      	mov	r1, r3
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	e9c3 0100 	strd	r0, r1, [r3]
 800c28e:	e7b9      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c290:	2000      	movs	r0, #0
 800c292:	2100      	movs	r1, #0
 800c294:	e7f0      	b.n	800c278 <__kernel_rem_pio2+0x548>
 800c296:	ab48      	add	r3, sp, #288	; 0x120
 800c298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f7f3 ff98 	bl	80001d4 <__adddf3>
 800c2a4:	3c01      	subs	r4, #1
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	daf5      	bge.n	800c296 <__kernel_rem_pio2+0x566>
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	b1e3      	cbz	r3, 800c2e8 <__kernel_rem_pio2+0x5b8>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2b4:	9c01      	ldr	r4, [sp, #4]
 800c2b6:	e9c4 2300 	strd	r2, r3, [r4]
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c2c2:	f7f3 ff85 	bl	80001d0 <__aeabi_dsub>
 800c2c6:	ad4a      	add	r5, sp, #296	; 0x128
 800c2c8:	2401      	movs	r4, #1
 800c2ca:	45a3      	cmp	fp, r4
 800c2cc:	da0f      	bge.n	800c2ee <__kernel_rem_pio2+0x5be>
 800c2ce:	9b02      	ldr	r3, [sp, #8]
 800c2d0:	b113      	cbz	r3, 800c2d8 <__kernel_rem_pio2+0x5a8>
 800c2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	9b01      	ldr	r3, [sp, #4]
 800c2da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2de:	e791      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c2e0:	465c      	mov	r4, fp
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	e7de      	b.n	800c2a6 <__kernel_rem_pio2+0x576>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	e7e2      	b.n	800c2b4 <__kernel_rem_pio2+0x584>
 800c2ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c2f2:	f7f3 ff6f 	bl	80001d4 <__adddf3>
 800c2f6:	3401      	adds	r4, #1
 800c2f8:	e7e7      	b.n	800c2ca <__kernel_rem_pio2+0x59a>
 800c2fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c2fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c302:	4620      	mov	r0, r4
 800c304:	4632      	mov	r2, r6
 800c306:	463b      	mov	r3, r7
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ff63 	bl	80001d4 <__adddf3>
 800c30e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f3 ff59 	bl	80001d0 <__aeabi_dsub>
 800c31e:	4632      	mov	r2, r6
 800c320:	463b      	mov	r3, r7
 800c322:	f7f3 ff57 	bl	80001d4 <__adddf3>
 800c326:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c32a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c32e:	ed88 7b00 	vstr	d7, [r8]
 800c332:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c336:	e776      	b.n	800c226 <__kernel_rem_pio2+0x4f6>
 800c338:	e9da 8900 	ldrd	r8, r9, [sl]
 800c33c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c340:	4640      	mov	r0, r8
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	4649      	mov	r1, r9
 800c348:	f7f3 ff44 	bl	80001d4 <__adddf3>
 800c34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f3 ff3a 	bl	80001d0 <__aeabi_dsub>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	f7f3 ff38 	bl	80001d4 <__adddf3>
 800c364:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c36c:	ed8a 7b00 	vstr	d7, [sl]
 800c370:	3c01      	subs	r4, #1
 800c372:	e75e      	b.n	800c232 <__kernel_rem_pio2+0x502>
 800c374:	ab48      	add	r3, sp, #288	; 0x120
 800c376:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff29 	bl	80001d4 <__adddf3>
 800c382:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c386:	e75a      	b.n	800c23e <__kernel_rem_pio2+0x50e>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	601d      	str	r5, [r3, #0]
 800c38e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c392:	605c      	str	r4, [r3, #4]
 800c394:	609f      	str	r7, [r3, #8]
 800c396:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c39a:	60d3      	str	r3, [r2, #12]
 800c39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3a0:	6110      	str	r0, [r2, #16]
 800c3a2:	6153      	str	r3, [r2, #20]
 800c3a4:	e72e      	b.n	800c204 <__kernel_rem_pio2+0x4d4>
 800c3a6:	bf00      	nop
 800c3a8:	41700000 	.word	0x41700000
 800c3ac:	3e700000 	.word	0x3e700000

0800c3b0 <__kernel_sin>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	ed2d 8b04 	vpush	{d8-d9}
 800c3b8:	eeb0 8a41 	vmov.f32	s16, s2
 800c3bc:	eef0 8a61 	vmov.f32	s17, s3
 800c3c0:	ec55 4b10 	vmov	r4, r5, d0
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c3ce:	9001      	str	r0, [sp, #4]
 800c3d0:	da06      	bge.n	800c3e0 <__kernel_sin+0x30>
 800c3d2:	ee10 0a10 	vmov	r0, s0
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	f7f4 fb4c 	bl	8000a74 <__aeabi_d2iz>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d051      	beq.n	800c484 <__kernel_sin+0xd4>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	f7f4 f8aa 	bl	8000540 <__aeabi_dmul>
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	468b      	mov	fp, r1
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f4 f8a2 	bl	8000540 <__aeabi_dmul>
 800c3fc:	a341      	add	r3, pc, #260	; (adr r3, 800c504 <__kernel_sin+0x154>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	4680      	mov	r8, r0
 800c404:	4689      	mov	r9, r1
 800c406:	4650      	mov	r0, sl
 800c408:	4659      	mov	r1, fp
 800c40a:	f7f4 f899 	bl	8000540 <__aeabi_dmul>
 800c40e:	a33f      	add	r3, pc, #252	; (adr r3, 800c50c <__kernel_sin+0x15c>)
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f7f3 fedc 	bl	80001d0 <__aeabi_dsub>
 800c418:	4652      	mov	r2, sl
 800c41a:	465b      	mov	r3, fp
 800c41c:	f7f4 f890 	bl	8000540 <__aeabi_dmul>
 800c420:	a33c      	add	r3, pc, #240	; (adr r3, 800c514 <__kernel_sin+0x164>)
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	f7f3 fed5 	bl	80001d4 <__adddf3>
 800c42a:	4652      	mov	r2, sl
 800c42c:	465b      	mov	r3, fp
 800c42e:	f7f4 f887 	bl	8000540 <__aeabi_dmul>
 800c432:	a33a      	add	r3, pc, #232	; (adr r3, 800c51c <__kernel_sin+0x16c>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 feca 	bl	80001d0 <__aeabi_dsub>
 800c43c:	4652      	mov	r2, sl
 800c43e:	465b      	mov	r3, fp
 800c440:	f7f4 f87e 	bl	8000540 <__aeabi_dmul>
 800c444:	a337      	add	r3, pc, #220	; (adr r3, 800c524 <__kernel_sin+0x174>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f3 fec3 	bl	80001d4 <__adddf3>
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	4606      	mov	r6, r0
 800c452:	460f      	mov	r7, r1
 800c454:	b9eb      	cbnz	r3, 800c492 <__kernel_sin+0xe2>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4650      	mov	r0, sl
 800c45c:	4659      	mov	r1, fp
 800c45e:	f7f4 f86f 	bl	8000540 <__aeabi_dmul>
 800c462:	a325      	add	r3, pc, #148	; (adr r3, 800c4f8 <__kernel_sin+0x148>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f3 feb2 	bl	80001d0 <__aeabi_dsub>
 800c46c:	4642      	mov	r2, r8
 800c46e:	464b      	mov	r3, r9
 800c470:	f7f4 f866 	bl	8000540 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4620      	mov	r0, r4
 800c47a:	4629      	mov	r1, r5
 800c47c:	f7f3 feaa 	bl	80001d4 <__adddf3>
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	ec45 4b10 	vmov	d0, r4, r5
 800c488:	b003      	add	sp, #12
 800c48a:	ecbd 8b04 	vpop	{d8-d9}
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	4b1b      	ldr	r3, [pc, #108]	; (800c500 <__kernel_sin+0x150>)
 800c494:	ec51 0b18 	vmov	r0, r1, d8
 800c498:	2200      	movs	r2, #0
 800c49a:	f7f4 f851 	bl	8000540 <__aeabi_dmul>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	ec41 0b19 	vmov	d9, r0, r1
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	f7f4 f849 	bl	8000540 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	ec51 0b19 	vmov	r0, r1, d9
 800c4b6:	f7f3 fe8b 	bl	80001d0 <__aeabi_dsub>
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	465b      	mov	r3, fp
 800c4be:	f7f4 f83f 	bl	8000540 <__aeabi_dmul>
 800c4c2:	ec53 2b18 	vmov	r2, r3, d8
 800c4c6:	f7f3 fe83 	bl	80001d0 <__aeabi_dsub>
 800c4ca:	a30b      	add	r3, pc, #44	; (adr r3, 800c4f8 <__kernel_sin+0x148>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f832 	bl	8000540 <__aeabi_dmul>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f7f3 fe76 	bl	80001d4 <__adddf3>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f3 fe6e 	bl	80001d0 <__aeabi_dsub>
 800c4f4:	e7c4      	b.n	800c480 <__kernel_sin+0xd0>
 800c4f6:	bf00      	nop
 800c4f8:	55555549 	.word	0x55555549
 800c4fc:	3fc55555 	.word	0x3fc55555
 800c500:	3fe00000 	.word	0x3fe00000
 800c504:	5acfd57c 	.word	0x5acfd57c
 800c508:	3de5d93a 	.word	0x3de5d93a
 800c50c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c510:	3e5ae5e6 	.word	0x3e5ae5e6
 800c514:	57b1fe7d 	.word	0x57b1fe7d
 800c518:	3ec71de3 	.word	0x3ec71de3
 800c51c:	19c161d5 	.word	0x19c161d5
 800c520:	3f2a01a0 	.word	0x3f2a01a0
 800c524:	1110f8a6 	.word	0x1110f8a6
 800c528:	3f811111 	.word	0x3f811111

0800c52c <fabs>:
 800c52c:	ec51 0b10 	vmov	r0, r1, d0
 800c530:	ee10 2a10 	vmov	r2, s0
 800c534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c538:	ec43 2b10 	vmov	d0, r2, r3
 800c53c:	4770      	bx	lr
	...

0800c540 <floor>:
 800c540:	ec51 0b10 	vmov	r0, r1, d0
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c54c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c550:	2e13      	cmp	r6, #19
 800c552:	ee10 5a10 	vmov	r5, s0
 800c556:	ee10 8a10 	vmov	r8, s0
 800c55a:	460c      	mov	r4, r1
 800c55c:	dc32      	bgt.n	800c5c4 <floor+0x84>
 800c55e:	2e00      	cmp	r6, #0
 800c560:	da14      	bge.n	800c58c <floor+0x4c>
 800c562:	a333      	add	r3, pc, #204	; (adr r3, 800c630 <floor+0xf0>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f3 fe34 	bl	80001d4 <__adddf3>
 800c56c:	2200      	movs	r2, #0
 800c56e:	2300      	movs	r3, #0
 800c570:	f7f4 fa76 	bl	8000a60 <__aeabi_dcmpgt>
 800c574:	b138      	cbz	r0, 800c586 <floor+0x46>
 800c576:	2c00      	cmp	r4, #0
 800c578:	da57      	bge.n	800c62a <floor+0xea>
 800c57a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c57e:	431d      	orrs	r5, r3
 800c580:	d001      	beq.n	800c586 <floor+0x46>
 800c582:	4c2d      	ldr	r4, [pc, #180]	; (800c638 <floor+0xf8>)
 800c584:	2500      	movs	r5, #0
 800c586:	4621      	mov	r1, r4
 800c588:	4628      	mov	r0, r5
 800c58a:	e025      	b.n	800c5d8 <floor+0x98>
 800c58c:	4f2b      	ldr	r7, [pc, #172]	; (800c63c <floor+0xfc>)
 800c58e:	4137      	asrs	r7, r6
 800c590:	ea01 0307 	and.w	r3, r1, r7
 800c594:	4303      	orrs	r3, r0
 800c596:	d01f      	beq.n	800c5d8 <floor+0x98>
 800c598:	a325      	add	r3, pc, #148	; (adr r3, 800c630 <floor+0xf0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 fe19 	bl	80001d4 <__adddf3>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f7f4 fa5b 	bl	8000a60 <__aeabi_dcmpgt>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d0eb      	beq.n	800c586 <floor+0x46>
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	bfbe      	ittt	lt
 800c5b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5ba:	19a4      	addlt	r4, r4, r6
 800c5bc:	ea24 0407 	bic.w	r4, r4, r7
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	e7e0      	b.n	800c586 <floor+0x46>
 800c5c4:	2e33      	cmp	r6, #51	; 0x33
 800c5c6:	dd0b      	ble.n	800c5e0 <floor+0xa0>
 800c5c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5cc:	d104      	bne.n	800c5d8 <floor+0x98>
 800c5ce:	ee10 2a10 	vmov	r2, s0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	f7f3 fdfe 	bl	80001d4 <__adddf3>
 800c5d8:	ec41 0b10 	vmov	d0, r0, r1
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5e8:	fa23 f707 	lsr.w	r7, r3, r7
 800c5ec:	4207      	tst	r7, r0
 800c5ee:	d0f3      	beq.n	800c5d8 <floor+0x98>
 800c5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800c630 <floor+0xf0>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f3 fded 	bl	80001d4 <__adddf3>
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f7f4 fa2f 	bl	8000a60 <__aeabi_dcmpgt>
 800c602:	2800      	cmp	r0, #0
 800c604:	d0bf      	beq.n	800c586 <floor+0x46>
 800c606:	2c00      	cmp	r4, #0
 800c608:	da02      	bge.n	800c610 <floor+0xd0>
 800c60a:	2e14      	cmp	r6, #20
 800c60c:	d103      	bne.n	800c616 <floor+0xd6>
 800c60e:	3401      	adds	r4, #1
 800c610:	ea25 0507 	bic.w	r5, r5, r7
 800c614:	e7b7      	b.n	800c586 <floor+0x46>
 800c616:	2301      	movs	r3, #1
 800c618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c61c:	fa03 f606 	lsl.w	r6, r3, r6
 800c620:	4435      	add	r5, r6
 800c622:	4545      	cmp	r5, r8
 800c624:	bf38      	it	cc
 800c626:	18e4      	addcc	r4, r4, r3
 800c628:	e7f2      	b.n	800c610 <floor+0xd0>
 800c62a:	2500      	movs	r5, #0
 800c62c:	462c      	mov	r4, r5
 800c62e:	e7aa      	b.n	800c586 <floor+0x46>
 800c630:	8800759c 	.word	0x8800759c
 800c634:	7e37e43c 	.word	0x7e37e43c
 800c638:	bff00000 	.word	0xbff00000
 800c63c:	000fffff 	.word	0x000fffff

0800c640 <scalbn>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	ec55 4b10 	vmov	r4, r5, d0
 800c646:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c64a:	4606      	mov	r6, r0
 800c64c:	462b      	mov	r3, r5
 800c64e:	b99a      	cbnz	r2, 800c678 <scalbn+0x38>
 800c650:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c654:	4323      	orrs	r3, r4
 800c656:	d036      	beq.n	800c6c6 <scalbn+0x86>
 800c658:	4b39      	ldr	r3, [pc, #228]	; (800c740 <scalbn+0x100>)
 800c65a:	4629      	mov	r1, r5
 800c65c:	ee10 0a10 	vmov	r0, s0
 800c660:	2200      	movs	r2, #0
 800c662:	f7f3 ff6d 	bl	8000540 <__aeabi_dmul>
 800c666:	4b37      	ldr	r3, [pc, #220]	; (800c744 <scalbn+0x104>)
 800c668:	429e      	cmp	r6, r3
 800c66a:	4604      	mov	r4, r0
 800c66c:	460d      	mov	r5, r1
 800c66e:	da10      	bge.n	800c692 <scalbn+0x52>
 800c670:	a32b      	add	r3, pc, #172	; (adr r3, 800c720 <scalbn+0xe0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	e03a      	b.n	800c6ee <scalbn+0xae>
 800c678:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c67c:	428a      	cmp	r2, r1
 800c67e:	d10c      	bne.n	800c69a <scalbn+0x5a>
 800c680:	ee10 2a10 	vmov	r2, s0
 800c684:	4620      	mov	r0, r4
 800c686:	4629      	mov	r1, r5
 800c688:	f7f3 fda4 	bl	80001d4 <__adddf3>
 800c68c:	4604      	mov	r4, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	e019      	b.n	800c6c6 <scalbn+0x86>
 800c692:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c696:	460b      	mov	r3, r1
 800c698:	3a36      	subs	r2, #54	; 0x36
 800c69a:	4432      	add	r2, r6
 800c69c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6a0:	428a      	cmp	r2, r1
 800c6a2:	dd08      	ble.n	800c6b6 <scalbn+0x76>
 800c6a4:	2d00      	cmp	r5, #0
 800c6a6:	a120      	add	r1, pc, #128	; (adr r1, 800c728 <scalbn+0xe8>)
 800c6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ac:	da1c      	bge.n	800c6e8 <scalbn+0xa8>
 800c6ae:	a120      	add	r1, pc, #128	; (adr r1, 800c730 <scalbn+0xf0>)
 800c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b4:	e018      	b.n	800c6e8 <scalbn+0xa8>
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	dd08      	ble.n	800c6cc <scalbn+0x8c>
 800c6ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6c6:	ec45 4b10 	vmov	d0, r4, r5
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6d0:	da19      	bge.n	800c706 <scalbn+0xc6>
 800c6d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6d6:	429e      	cmp	r6, r3
 800c6d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6dc:	dd0a      	ble.n	800c6f4 <scalbn+0xb4>
 800c6de:	a112      	add	r1, pc, #72	; (adr r1, 800c728 <scalbn+0xe8>)
 800c6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e2      	bne.n	800c6ae <scalbn+0x6e>
 800c6e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c728 <scalbn+0xe8>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 ff27 	bl	8000540 <__aeabi_dmul>
 800c6f2:	e7cb      	b.n	800c68c <scalbn+0x4c>
 800c6f4:	a10a      	add	r1, pc, #40	; (adr r1, 800c720 <scalbn+0xe0>)
 800c6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0b8      	beq.n	800c670 <scalbn+0x30>
 800c6fe:	a10e      	add	r1, pc, #56	; (adr r1, 800c738 <scalbn+0xf8>)
 800c700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c704:	e7b4      	b.n	800c670 <scalbn+0x30>
 800c706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c70a:	3236      	adds	r2, #54	; 0x36
 800c70c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c710:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c714:	4620      	mov	r0, r4
 800c716:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <scalbn+0x108>)
 800c718:	2200      	movs	r2, #0
 800c71a:	e7e8      	b.n	800c6ee <scalbn+0xae>
 800c71c:	f3af 8000 	nop.w
 800c720:	c2f8f359 	.word	0xc2f8f359
 800c724:	01a56e1f 	.word	0x01a56e1f
 800c728:	8800759c 	.word	0x8800759c
 800c72c:	7e37e43c 	.word	0x7e37e43c
 800c730:	8800759c 	.word	0x8800759c
 800c734:	fe37e43c 	.word	0xfe37e43c
 800c738:	c2f8f359 	.word	0xc2f8f359
 800c73c:	81a56e1f 	.word	0x81a56e1f
 800c740:	43500000 	.word	0x43500000
 800c744:	ffff3cb0 	.word	0xffff3cb0
 800c748:	3c900000 	.word	0x3c900000

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
